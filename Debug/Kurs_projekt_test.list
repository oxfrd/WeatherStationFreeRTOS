
Kurs_projekt_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800c840  0800c840  0001c840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbf8  0800cbf8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbf8  0800cbf8  0001cbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc00  0800cc00  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc04  0800cc04  0001cc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800cc08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de0  20000010  0800cc18  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004df0  0800cc18  00024df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024edc  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fad  00000000  00000000  00044f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  00049ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c60  00000000  00000000  0004bd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc86  00000000  00000000  0004d9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025d88  00000000  00000000  0007963e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103949  00000000  00000000  0009f3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a2d0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008164  00000000  00000000  001a2d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c828 	.word	0x0800c828

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800c828 	.word	0x0800c828

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_ldivmod>:
 8000b0c:	b97b      	cbnz	r3, 8000b2e <__aeabi_ldivmod+0x22>
 8000b0e:	b972      	cbnz	r2, 8000b2e <__aeabi_ldivmod+0x22>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bfbe      	ittt	lt
 8000b14:	2000      	movlt	r0, #0
 8000b16:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b1a:	e006      	blt.n	8000b2a <__aeabi_ldivmod+0x1e>
 8000b1c:	bf08      	it	eq
 8000b1e:	2800      	cmpeq	r0, #0
 8000b20:	bf1c      	itt	ne
 8000b22:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b26:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2a:	f000 b9bf 	b.w	8000eac <__aeabi_idiv0>
 8000b2e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b32:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b36:	2900      	cmp	r1, #0
 8000b38:	db09      	blt.n	8000b4e <__aeabi_ldivmod+0x42>
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db1a      	blt.n	8000b74 <__aeabi_ldivmod+0x68>
 8000b3e:	f000 f84d 	bl	8000bdc <__udivmoddi4>
 8000b42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4a:	b004      	add	sp, #16
 8000b4c:	4770      	bx	lr
 8000b4e:	4240      	negs	r0, r0
 8000b50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db1b      	blt.n	8000b90 <__aeabi_ldivmod+0x84>
 8000b58:	f000 f840 	bl	8000bdc <__udivmoddi4>
 8000b5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b64:	b004      	add	sp, #16
 8000b66:	4240      	negs	r0, r0
 8000b68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6c:	4252      	negs	r2, r2
 8000b6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b72:	4770      	bx	lr
 8000b74:	4252      	negs	r2, r2
 8000b76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b7a:	f000 f82f 	bl	8000bdc <__udivmoddi4>
 8000b7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b86:	b004      	add	sp, #16
 8000b88:	4240      	negs	r0, r0
 8000b8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8e:	4770      	bx	lr
 8000b90:	4252      	negs	r2, r2
 8000b92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b96:	f000 f821 	bl	8000bdc <__udivmoddi4>
 8000b9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba2:	b004      	add	sp, #16
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <BH1750_Init+0x34>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000ebe:	f000 f813 	bl	8000ee8 <BH1750_Reset>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d107      	bne.n	8000ed8 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8000ec8:	2045      	movs	r0, #69	; 0x45
 8000eca:	f000 f859 	bl	8000f80 <BH1750_SetMtreg>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <BH1750_Init+0x28>
			return BH1750_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e000      	b.n	8000eda <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8000ed8:	2301      	movs	r3, #1
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000002c 	.word	0x2000002c

08000ee8 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <BH1750_Reset+0x30>)
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	1dfa      	adds	r2, r7, #7
 8000ef8:	230a      	movs	r3, #10
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	2146      	movs	r1, #70	; 0x46
 8000f00:	f003 fe20 	bl	8004b44 <HAL_I2C_Master_Transmit>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <BH1750_Reset+0x26>
		return BH1750_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000002c 	.word	0x2000002c

08000f1c <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d106      	bne.n	8000f3e <BH1750_SetMode+0x22>
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <BH1750_SetMode+0x22>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e018      	b.n	8000f70 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <BH1750_SetMode+0x30>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e011      	b.n	8000f70 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8000f4c:	79fa      	ldrb	r2, [r7, #7]
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <BH1750_SetMode+0x5c>)
 8000f50:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <BH1750_SetMode+0x60>)
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	1dfa      	adds	r2, r7, #7
 8000f58:	230a      	movs	r3, #10
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	2146      	movs	r1, #70	; 0x46
 8000f60:	f003 fdf0 	bl	8004b44 <HAL_I2C_Master_Transmit>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <BH1750_SetMode+0x52>
		return BH1750_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000030 	.word	0x20000030
 8000f7c:	2000002c 	.word	0x2000002c

08000f80 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b1e      	cmp	r3, #30
 8000f8e:	d902      	bls.n	8000f96 <BH1750_SetMtreg+0x16>
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2bff      	cmp	r3, #255	; 0xff
 8000f94:	d101      	bne.n	8000f9a <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e037      	b.n	800100a <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8000f9a:	4a1e      	ldr	r2, [pc, #120]	; (8001014 <BH1750_SetMtreg+0x94>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	f003 031f 	and.w	r3, r3, #31
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <BH1750_SetMtreg+0x98>)
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	f107 020c 	add.w	r2, r7, #12
 8000fca:	230a      	movs	r3, #10
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	2146      	movs	r1, #70	; 0x46
 8000fd2:	f003 fdb7 	bl	8004b44 <HAL_I2C_Master_Transmit>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e012      	b.n	800100a <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <BH1750_SetMtreg+0x98>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	230a      	movs	r3, #10
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2146      	movs	r1, #70	; 0x46
 8000ff6:	f003 fda5 	bl	8004b44 <HAL_I2C_Master_Transmit>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	e000      	b.n	800100a <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8001008:	2301      	movs	r3, #1
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000031 	.word	0x20000031
 8001018:	2000002c 	.word	0x2000002c

0800101c <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(uint32_t *Result)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	6078      	str	r0, [r7, #4]
	uint32_t result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <BH1750_ReadLight+0x90>)
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	f107 0208 	add.w	r2, r7, #8
 800102c:	230a      	movs	r3, #10
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2302      	movs	r3, #2
 8001032:	2146      	movs	r1, #70	; 0x46
 8001034:	f003 fe7a 	bl	8004d2c <HAL_I2C_Master_Receive>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d131      	bne.n	80010a2 <BH1750_ReadLight+0x86>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 800103e:	7a3b      	ldrb	r3, [r7, #8]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	7a7a      	ldrb	r2, [r7, #9]
 8001044:	4313      	orrs	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <BH1750_ReadLight+0x94>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b45      	cmp	r3, #69	; 0x45
 800104e:	d00a      	beq.n	8001066 <BH1750_ReadLight+0x4a>
		{
			result *= (uint32_t)((uint8_t)BH1750_DEFAULT_MTREG/(uint32_t)Bh1750_Mtreg);
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <BH1750_ReadLight+0x94>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2245      	movs	r2, #69	; 0x45
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	60fb      	str	r3, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <BH1750_ReadLight+0x98>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b21      	cmp	r3, #33	; 0x21
 800106c:	d003      	beq.n	8001076 <BH1750_ReadLight+0x5a>
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <BH1750_ReadLight+0x98>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b11      	cmp	r3, #17
 8001074:	d110      	bne.n	8001098 <BH1750_ReadLight+0x7c>
		{
			result /= 2.0;
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff f9ec 	bl	8000454 <__aeabi_ui2d>
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001084:	f7ff fb8a 	bl	800079c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fd1c 	bl	8000acc <__aeabi_d2uiz>
 8001094:	4603      	mov	r3, r0
 8001096:	60fb      	str	r3, [r7, #12]
		}

		*Result = result / (uint32_t)BH1750_CONVERSION_FACTOR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	601a      	str	r2, [r3, #0]
		return BH1750_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <BH1750_ReadLight+0x88>
	}
	return BH1750_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000002c 	.word	0x2000002c
 80010b0:	20000031 	.word	0x20000031
 80010b4:	20000030 	.word	0x20000030

080010b8 <DWT_Delay_us>:
/**
 * @brief This function provides a delay (in microseconds)
 * @param microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <DWT_Delay_us+0x40>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	60fb      	str	r3, [r7, #12]
 /* Go to number of cycles for system */
 microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80010c6:	f005 fb25 	bl	8006714 <HAL_RCC_GetHCLKFreq>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <DWT_Delay_us+0x44>)
 80010ce:	fba2 2303 	umull	r2, r3, r2, r3
 80010d2:	0c9b      	lsrs	r3, r3, #18
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	607b      	str	r3, [r7, #4]
 /* Delay till end */
 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80010dc:	bf00      	nop
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <DWT_Delay_us+0x40>)
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1ad2      	subs	r2, r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3f8      	bcc.n	80010de <DWT_Delay_us+0x26>
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e0001000 	.word	0xe0001000
 80010fc:	431bde83 	.word	0x431bde83

08001100 <Set_Pin_Output>:

/*float Temperature = 0;
float Humidity = 0;*/
uint8_t echo;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800111c:	887b      	ldrh	r3, [r7, #2]
 800111e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f003 fa62 	bl	80045f8 <HAL_GPIO_Init>
}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	4619      	mov	r1, r3
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f003 fa44 	bl	80045f8 <HAL_GPIO_Init>
}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <DHT11_Start>:

void DHT11_Start(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);  // set the pin as output
 800117c:	2101      	movs	r1, #1
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <DHT11_Start+0x3c>)
 8001180:	f7ff ffbe 	bl	8001100 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001184:	2200      	movs	r2, #0
 8001186:	2101      	movs	r1, #1
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <DHT11_Start+0x3c>)
 800118a:	f003 fbf7 	bl	800497c <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);   // wait for 18ms
 800118e:	f244 6050 	movw	r0, #18000	; 0x4650
 8001192:	f7ff ff91 	bl	80010b8 <DWT_Delay_us>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001196:	2201      	movs	r2, #1
 8001198:	2101      	movs	r1, #1
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <DHT11_Start+0x3c>)
 800119c:	f003 fbee 	bl	800497c <HAL_GPIO_WritePin>
	DWT_Delay_us(20);   // wait for 20us
 80011a0:	2014      	movs	r0, #20
 80011a2:	f7ff ff89 	bl	80010b8 <DWT_Delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80011a6:	2101      	movs	r1, #1
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <DHT11_Start+0x3c>)
 80011aa:	f7ff ffc7 	bl	800113c <Set_Pin_Input>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	48000c00 	.word	0x48000c00

080011b8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	71fb      	strb	r3, [r7, #7]
	uint32_t currentTicks = HAL_GetTick();
 80011c2:	f003 f92b 	bl	800441c <HAL_GetTick>
 80011c6:	6038      	str	r0, [r7, #0]

	DWT_Delay_us(40);	// wait for 40 us
 80011c8:	2028      	movs	r0, #40	; 0x28
 80011ca:	f7ff ff75 	bl	80010b8 <DWT_Delay_us>

	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 80011ce:	2101      	movs	r1, #1
 80011d0:	4815      	ldr	r0, [pc, #84]	; (8001228 <DHT11_Check_Response+0x70>)
 80011d2:	f003 fbbb 	bl	800494c <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d118      	bne.n	800120e <DHT11_Check_Response+0x56>
		DWT_Delay_us(80);
 80011dc:	2050      	movs	r0, #80	; 0x50
 80011de:	f7ff ff6b 	bl	80010b8 <DWT_Delay_us>

		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 80011e2:	2101      	movs	r1, #1
 80011e4:	4810      	ldr	r0, [pc, #64]	; (8001228 <DHT11_Check_Response+0x70>)
 80011e6:	f003 fbb1 	bl	800494c <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <DHT11_Check_Response+0x3e>
			Response = 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	e00b      	b.n	800120e <DHT11_Check_Response+0x56>
		else
			Response = -1; // 255
 80011f6:	23ff      	movs	r3, #255	; 0xff
 80011f8:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 80011fa:	e008      	b.n	800120e <DHT11_Check_Response+0x56>
	{
		if((HAL_GetTick()-currentTicks)>DELAY2FAULT)
 80011fc:	f003 f90e 	bl	800441c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d901      	bls.n	800120e <DHT11_Check_Response+0x56>
			return 0; 	//end process if it last too long
 800120a:	2300      	movs	r3, #0
 800120c:	e007      	b.n	800121e <DHT11_Check_Response+0x66>
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 800120e:	2101      	movs	r1, #1
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <DHT11_Check_Response+0x70>)
 8001212:	f003 fb9b 	bl	800494c <HAL_GPIO_ReadPin>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1ef      	bne.n	80011fc <DHT11_Check_Response+0x44>
		// wait for the pin to go low
	}


	return Response;
 800121c:	79fb      	ldrb	r3, [r7, #7]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	48000c00 	.word	0x48000c00

0800122c <DHT11_Read>:

uint8_t DHT11_Read(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
	uint8_t i, j;
	uint32_t currentTicks = HAL_GetTick();
 8001232:	f003 f8f3 	bl	800441c <HAL_GetTick>
 8001236:	6038      	str	r0, [r7, #0]

	for (j = 0; j < 8; j++) {
 8001238:	2300      	movs	r3, #0
 800123a:	71bb      	strb	r3, [r7, #6]
 800123c:	e048      	b.n	80012d0 <DHT11_Read+0xa4>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
		{
			if((HAL_GetTick()-currentTicks)>DELAY2FAULT)
 800123e:	f003 f8ed 	bl	800441c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d901      	bls.n	8001250 <DHT11_Read+0x24>
				return 0; 	//end process if it last too long
 800124c:	2300      	movs	r3, #0
 800124e:	e043      	b.n	80012d8 <DHT11_Read+0xac>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8001250:	2101      	movs	r1, #1
 8001252:	4823      	ldr	r0, [pc, #140]	; (80012e0 <DHT11_Read+0xb4>)
 8001254:	f003 fb7a 	bl	800494c <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0ef      	beq.n	800123e <DHT11_Read+0x12>
				// wait for the pin to go high
		}

		DWT_Delay_us(40);  // wait for 40 us
 800125e:	2028      	movs	r0, #40	; 0x28
 8001260:	f7ff ff2a 	bl	80010b8 <DWT_Delay_us>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001264:	2101      	movs	r1, #1
 8001266:	481e      	ldr	r0, [pc, #120]	; (80012e0 <DHT11_Read+0xb4>)
 8001268:	f003 fb70 	bl	800494c <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10e      	bne.n	8001290 <DHT11_Read+0x64>
		{
			i &= ~(1 << (7 - j));   // write 0
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	f1c3 0307 	rsb	r3, r3, #7
 8001278:	2201      	movs	r2, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	b25b      	sxtb	r3, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	b25a      	sxtb	r2, r3
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	4013      	ands	r3, r2
 800128a:	b25b      	sxtb	r3, r3
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	e015      	b.n	80012bc <DHT11_Read+0x90>
		} else
		{
			i |= (1 << (7 - j));  // if the pin is high, write 1
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2201      	movs	r2, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	b25a      	sxtb	r2, r3
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	71fb      	strb	r3, [r7, #7]
		}

		while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 80012a8:	e008      	b.n	80012bc <DHT11_Read+0x90>
		{
			if((HAL_GetTick()-currentTicks)>DELAY2FAULT)
 80012aa:	f003 f8b7 	bl	800441c <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d901      	bls.n	80012bc <DHT11_Read+0x90>
				return 0; 	//end process if it last too long
 80012b8:	2300      	movs	r3, #0
 80012ba:	e00d      	b.n	80012d8 <DHT11_Read+0xac>
		while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 80012bc:	2101      	movs	r1, #1
 80012be:	4808      	ldr	r0, [pc, #32]	; (80012e0 <DHT11_Read+0xb4>)
 80012c0:	f003 fb44 	bl	800494c <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1ef      	bne.n	80012aa <DHT11_Read+0x7e>
	for (j = 0; j < 8; j++) {
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	3301      	adds	r3, #1
 80012ce:	71bb      	strb	r3, [r7, #6]
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	2b07      	cmp	r3, #7
 80012d4:	d9bc      	bls.n	8001250 <DHT11_Read+0x24>
			// wait for the pin to go low
		}
	}
	return i;
 80012d6:	79fb      	ldrb	r3, [r7, #7]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	48000c00 	.word	0x48000c00

080012e4 <DHT11_TempAndHumidity>:

void DHT11_TempAndHumidity(uint16_t *Temperature, uint16_t *Humidity)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	//DHT11_Start();
	echo = DHT11_Check_Response();
 80012ee:	f7ff ff63 	bl	80011b8 <DHT11_Check_Response>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <DHT11_TempAndHumidity+0x70>)
 80012f8:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read();
 80012fa:	f7ff ff97 	bl	800122c <DHT11_Read>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <DHT11_TempAndHumidity+0x74>)
 8001304:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read();
 8001306:	f7ff ff91 	bl	800122c <DHT11_Read>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <DHT11_TempAndHumidity+0x78>)
 8001310:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read();
 8001312:	f7ff ff8b 	bl	800122c <DHT11_Read>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <DHT11_TempAndHumidity+0x7c>)
 800131c:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read();
 800131e:	f7ff ff85 	bl	800122c <DHT11_Read>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <DHT11_TempAndHumidity+0x80>)
 8001328:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 800132a:	f7ff ff7f 	bl	800122c <DHT11_Read>
 800132e:	4603      	mov	r3, r0
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <DHT11_TempAndHumidity+0x84>)
 8001334:	801a      	strh	r2, [r3, #0]

	*Temperature = Temp_byte1;
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <DHT11_TempAndHumidity+0x7c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	801a      	strh	r2, [r3, #0]
	*Humidity = Rh_byte1;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <DHT11_TempAndHumidity+0x74>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b29a      	uxth	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	801a      	strh	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000038 	.word	0x20000038
 8001358:	20000032 	.word	0x20000032
 800135c:	20000033 	.word	0x20000033
 8001360:	20000034 	.word	0x20000034
 8001364:	20000035 	.word	0x20000035
 8001368:	20000036 	.word	0x20000036

0800136c <nrf24_CE_enable>:
#include "NRF24L0plus.h"

#include "FreeRTOS.h"

void nrf24_CE_enable()
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_GPIO_Port,NRF24_CE_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001376:	4802      	ldr	r0, [pc, #8]	; (8001380 <nrf24_CE_enable+0x14>)
 8001378:	f003 fb00 	bl	800497c <HAL_GPIO_WritePin>
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	48001000 	.word	0x48001000

08001384 <CS_ON>:
{
	HAL_GPIO_WritePin(NRF24_CE_GPIO_Port,NRF24_CE_Pin, GPIO_PIN_RESET);
}

static void CS_ON(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CS_GPIO_Port, NRF24_CS_Pin,GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138e:	4802      	ldr	r0, [pc, #8]	; (8001398 <CS_ON+0x14>)
 8001390:	f003 faf4 	bl	800497c <HAL_GPIO_WritePin>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	48001000 	.word	0x48001000

0800139c <CS_OFF>:
static void CS_OFF(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CS_GPIO_Port, NRF24_CS_Pin,GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a6:	4802      	ldr	r0, [pc, #8]	; (80013b0 <CS_OFF+0x14>)
 80013a8:	f003 fae8 	bl	800497c <HAL_GPIO_WritePin>
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	48001000 	.word	0x48001000

080013b4 <nrf24_WriteReg>:



HAL_StatusTypeDef nrf24_WriteReg (uint8_t regAdr, uint8_t data)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	4613      	mov	r3, r2
 80013c2:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef errorCode = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[2];
	buffer[0] = regAdr | (1<<5);
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f043 0320 	orr.w	r3, r3, #32
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	737b      	strb	r3, [r7, #13]
	CS_ON();
 80013d6:	f7ff ffd5 	bl	8001384 <CS_ON>
	errorCode = HAL_SPI_Transmit(NRF24_SPI, buffer, 2, 1000);
 80013da:	f107 010c 	add.w	r1, r7, #12
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	2202      	movs	r2, #2
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <nrf24_WriteReg+0x48>)
 80013e6:	f005 ffbe 	bl	8007366 <HAL_SPI_Transmit>
 80013ea:	4603      	mov	r3, r0
 80013ec:	73fb      	strb	r3, [r7, #15]
	CS_OFF();
 80013ee:	f7ff ffd5 	bl	800139c <CS_OFF>
return	errorCode;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200000e8 	.word	0x200000e8

08001400 <nrf24_ReadReg>:




HAL_StatusTypeDef nrf24_ReadReg (uint8_t regAdr, uint8_t *received)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef errorCode = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]

	CS_ON();
 8001410:	f7ff ffb8 	bl	8001384 <CS_ON>
	errorCode = HAL_SPI_Transmit(NRF24_SPI, (uint8_t *)regAdr,
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4619      	mov	r1, r3
 8001418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141c:	2201      	movs	r2, #1
 800141e:	480e      	ldr	r0, [pc, #56]	; (8001458 <nrf24_ReadReg+0x58>)
 8001420:	f005 ffa1 	bl	8007366 <HAL_SPI_Transmit>
 8001424:	4603      	mov	r3, r0
 8001426:	73fb      	strb	r3, [r7, #15]
						1, 1000);
	if(errorCode != HAL_OK)
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <nrf24_ReadReg+0x36>
	{
		CS_OFF();
 800142e:	f7ff ffb5 	bl	800139c <CS_OFF>
		return errorCode;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	e00b      	b.n	800144e <nrf24_ReadReg+0x4e>
	}
	errorCode = HAL_SPI_Receive(NRF24_SPI, (uint8_t *)received,
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	2201      	movs	r2, #1
 800143c:	6839      	ldr	r1, [r7, #0]
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <nrf24_ReadReg+0x58>)
 8001440:	f006 f8ff 	bl	8007642 <HAL_SPI_Receive>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
						1, 1000);
	CS_OFF();
 8001448:	f7ff ffa8 	bl	800139c <CS_OFF>

return	errorCode;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200000e8 	.word	0x200000e8

0800145c <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af04      	add	r7, sp, #16
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <BMP280_Read8+0x38>)
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	b29a      	uxth	r2, r3
 8001472:	230a      	movs	r3, #10
 8001474:	9302      	str	r3, [sp, #8]
 8001476:	2301      	movs	r3, #1
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	f107 030f 	add.w	r3, r7, #15
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	21ec      	movs	r1, #236	; 0xec
 8001484:	f003 fe5c 	bl	8005140 <HAL_I2C_Mem_Read>
  return tmp;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000003c 	.word	0x2000003c

08001498 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af04      	add	r7, sp, #16
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <BMP280_Read16+0x40>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	230a      	movs	r3, #10
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	2302      	movs	r3, #2
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2301      	movs	r3, #1
 80014ba:	21ec      	movs	r1, #236	; 0xec
 80014bc:	f003 fe40 	bl	8005140 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 80014c0:	7b3b      	ldrb	r3, [r7, #12]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	7b7b      	ldrb	r3, [r7, #13]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000003c 	.word	0x2000003c

080014dc <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ffd5 	bl	8001498 <BMP280_Read16>
 80014ee:	4603      	mov	r3, r0
 80014f0:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	b29b      	uxth	r3, r3
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af04      	add	r7, sp, #16
 8001516:	4603      	mov	r3, r0
 8001518:	460a      	mov	r2, r1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <BMP280_Write8+0x34>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	b29a      	uxth	r2, r3
 8001528:	230a      	movs	r3, #10
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2301      	movs	r3, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	1dbb      	adds	r3, r7, #6
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	21ec      	movs	r1, #236	; 0xec
 8001538:	f003 fcee 	bl	8004f18 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000003c 	.word	0x2000003c

08001548 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af04      	add	r7, sp, #16
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <BMP280_Read24+0x40>)
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	b29a      	uxth	r2, r3
 800155a:	230a      	movs	r3, #10
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2303      	movs	r3, #3
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	21ec      	movs	r1, #236	; 0xec
 800156c:	f003 fde8 	bl	8005140 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001570:	7b3b      	ldrb	r3, [r7, #12]
 8001572:	041a      	lsls	r2, r3, #16
 8001574:	7b7b      	ldrb	r3, [r7, #13]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	4313      	orrs	r3, r2
 800157a:	7bba      	ldrb	r2, [r7, #14]
 800157c:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000003c 	.word	0x2000003c

0800158c <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	4608      	mov	r0, r1
 8001596:	4611      	mov	r1, r2
 8001598:	461a      	mov	r2, r3
 800159a:	4603      	mov	r3, r0
 800159c:	70fb      	strb	r3, [r7, #3]
 800159e:	460b      	mov	r3, r1
 80015a0:	70bb      	strb	r3, [r7, #2]
 80015a2:	4613      	mov	r3, r2
 80015a4:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80015a6:	4a48      	ldr	r2, [pc, #288]	; (80016c8 <BMP280_Init+0x13c>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80015ac:	787b      	ldrb	r3, [r7, #1]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d901      	bls.n	80015b6 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80015b2:	2303      	movs	r3, #3
 80015b4:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80015b6:	4a45      	ldr	r2, [pc, #276]	; (80016cc <BMP280_Init+0x140>)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80015bc:	787b      	ldrb	r3, [r7, #1]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d901      	bls.n	80015d0 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80015cc:	2305      	movs	r3, #5
 80015ce:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80015d0:	4a3f      	ldr	r2, [pc, #252]	; (80016d0 <BMP280_Init+0x144>)
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80015d6:	78bb      	ldrb	r3, [r7, #2]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d901      	bls.n	80015e0 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80015dc:	2305      	movs	r3, #5
 80015de:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80015e0:	4a3c      	ldr	r2, [pc, #240]	; (80016d4 <BMP280_Init+0x148>)
 80015e2:	78bb      	ldrb	r3, [r7, #2]
 80015e4:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80015e6:	bf00      	nop
 80015e8:	20d0      	movs	r0, #208	; 0xd0
 80015ea:	f7ff ff37 	bl	800145c <BMP280_Read8>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b58      	cmp	r3, #88	; 0x58
 80015f2:	d1f9      	bne.n	80015e8 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80015f4:	2088      	movs	r0, #136	; 0x88
 80015f6:	f7ff ff71 	bl	80014dc <BMP280_Read16LE>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <BMP280_Init+0x14c>)
 8001600:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001602:	208a      	movs	r0, #138	; 0x8a
 8001604:	f7ff ff6a 	bl	80014dc <BMP280_Read16LE>
 8001608:	4603      	mov	r3, r0
 800160a:	b21a      	sxth	r2, r3
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <BMP280_Init+0x150>)
 800160e:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001610:	208c      	movs	r0, #140	; 0x8c
 8001612:	f7ff ff63 	bl	80014dc <BMP280_Read16LE>
 8001616:	4603      	mov	r3, r0
 8001618:	b21a      	sxth	r2, r3
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <BMP280_Init+0x154>)
 800161c:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800161e:	208e      	movs	r0, #142	; 0x8e
 8001620:	f7ff ff5c 	bl	80014dc <BMP280_Read16LE>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <BMP280_Init+0x158>)
 800162a:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800162c:	2090      	movs	r0, #144	; 0x90
 800162e:	f7ff ff55 	bl	80014dc <BMP280_Read16LE>
 8001632:	4603      	mov	r3, r0
 8001634:	b21a      	sxth	r2, r3
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <BMP280_Init+0x15c>)
 8001638:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800163a:	2092      	movs	r0, #146	; 0x92
 800163c:	f7ff ff4e 	bl	80014dc <BMP280_Read16LE>
 8001640:	4603      	mov	r3, r0
 8001642:	b21a      	sxth	r2, r3
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <BMP280_Init+0x160>)
 8001646:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001648:	2094      	movs	r0, #148	; 0x94
 800164a:	f7ff ff47 	bl	80014dc <BMP280_Read16LE>
 800164e:	4603      	mov	r3, r0
 8001650:	b21a      	sxth	r2, r3
 8001652:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <BMP280_Init+0x164>)
 8001654:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001656:	2096      	movs	r0, #150	; 0x96
 8001658:	f7ff ff40 	bl	80014dc <BMP280_Read16LE>
 800165c:	4603      	mov	r3, r0
 800165e:	b21a      	sxth	r2, r3
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <BMP280_Init+0x168>)
 8001662:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001664:	2098      	movs	r0, #152	; 0x98
 8001666:	f7ff ff39 	bl	80014dc <BMP280_Read16LE>
 800166a:	4603      	mov	r3, r0
 800166c:	b21a      	sxth	r2, r3
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <BMP280_Init+0x16c>)
 8001670:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001672:	209a      	movs	r0, #154	; 0x9a
 8001674:	f7ff ff32 	bl	80014dc <BMP280_Read16LE>
 8001678:	4603      	mov	r3, r0
 800167a:	b21a      	sxth	r2, r3
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <BMP280_Init+0x170>)
 800167e:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001680:	209c      	movs	r0, #156	; 0x9c
 8001682:	f7ff ff2b 	bl	80014dc <BMP280_Read16LE>
 8001686:	4603      	mov	r3, r0
 8001688:	b21a      	sxth	r2, r3
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <BMP280_Init+0x174>)
 800168c:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800168e:	209e      	movs	r0, #158	; 0x9e
 8001690:	f7ff ff24 	bl	80014dc <BMP280_Read16LE>
 8001694:	4603      	mov	r3, r0
 8001696:	b21a      	sxth	r2, r3
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <BMP280_Init+0x178>)
 800169a:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	015b      	lsls	r3, r3, #5
 80016a0:	b25a      	sxtb	r2, r3
 80016a2:	78bb      	ldrb	r3, [r7, #2]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	20f4      	movs	r0, #244	; 0xf4
 80016ba:	f7ff ff29 	bl	8001510 <BMP280_Write8>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000003c 	.word	0x2000003c
 80016cc:	20000042 	.word	0x20000042
 80016d0:	20000040 	.word	0x20000040
 80016d4:	20000041 	.word	0x20000041
 80016d8:	20000058 	.word	0x20000058
 80016dc:	20000044 	.word	0x20000044
 80016e0:	20000046 	.word	0x20000046
 80016e4:	2000005a 	.word	0x2000005a
 80016e8:	20000048 	.word	0x20000048
 80016ec:	2000004a 	.word	0x2000004a
 80016f0:	2000004c 	.word	0x2000004c
 80016f4:	2000004e 	.word	0x2000004e
 80016f8:	20000050 	.word	0x20000050
 80016fc:	20000052 	.word	0x20000052
 8001700:	20000054 	.word	0x20000054
 8001704:	20000056 	.word	0x20000056

08001708 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <BMP280_ReadTemperature+0xfc>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d16d      	bne.n	80017f2 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001716:	20f4      	movs	r0, #244	; 0xf4
 8001718:	f7ff fea0 	bl	800145c <BMP280_Read8>
 800171c:	4603      	mov	r3, r0
 800171e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	f023 0303 	bic.w	r3, r3, #3
 8001726:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	4619      	mov	r1, r3
 8001734:	20f4      	movs	r0, #244	; 0xf4
 8001736:	f7ff feeb 	bl	8001510 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800173a:	20f4      	movs	r0, #244	; 0xf4
 800173c:	f7ff fe8e 	bl	800145c <BMP280_Read8>
 8001740:	4603      	mov	r3, r0
 8001742:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001744:	7dbb      	ldrb	r3, [r7, #22]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800174c:	7dbb      	ldrb	r3, [r7, #22]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d14f      	bne.n	80017f2 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001752:	20f4      	movs	r0, #244	; 0xf4
 8001754:	f7ff fe82 	bl	800145c <BMP280_Read8>
 8001758:	4603      	mov	r3, r0
 800175a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800175c:	7dbb      	ldrb	r3, [r7, #22]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001764:	7dbb      	ldrb	r3, [r7, #22]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d000      	beq.n	800176c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800176a:	e7f2      	b.n	8001752 <BMP280_ReadTemperature+0x4a>
				  break;
 800176c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800176e:	20fa      	movs	r0, #250	; 0xfa
 8001770:	f7ff feea 	bl	8001548 <BMP280_Read24>
 8001774:	4603      	mov	r3, r0
 8001776:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	111b      	asrs	r3, r3, #4
 800177c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	10da      	asrs	r2, r3, #3
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <BMP280_ReadTemperature+0x100>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800178a:	4a20      	ldr	r2, [pc, #128]	; (800180c <BMP280_ReadTemperature+0x104>)
 800178c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	12db      	asrs	r3, r3, #11
 8001796:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	111b      	asrs	r3, r3, #4
 800179c:	4a1a      	ldr	r2, [pc, #104]	; (8001808 <BMP280_ReadTemperature+0x100>)
 800179e:	8812      	ldrh	r2, [r2, #0]
 80017a0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	1112      	asrs	r2, r2, #4
 80017a6:	4918      	ldr	r1, [pc, #96]	; (8001808 <BMP280_ReadTemperature+0x100>)
 80017a8:	8809      	ldrh	r1, [r1, #0]
 80017aa:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80017ac:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80017b0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80017b2:	4a17      	ldr	r2, [pc, #92]	; (8001810 <BMP280_ReadTemperature+0x108>)
 80017b4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80017bc:	139b      	asrs	r3, r3, #14
 80017be:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a13      	ldr	r2, [pc, #76]	; (8001814 <BMP280_ReadTemperature+0x10c>)
 80017c8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <BMP280_ReadTemperature+0x10c>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	3380      	adds	r3, #128	; 0x80
 80017d6:	121b      	asrs	r3, r3, #8
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80017e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001818 <BMP280_ReadTemperature+0x110>
 80017ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017f0:	e001      	b.n	80017f6 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80017f2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800181c <BMP280_ReadTemperature+0x114>
}
 80017f6:	eef0 7a47 	vmov.f32	s15, s14
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000042 	.word	0x20000042
 8001808:	20000058 	.word	0x20000058
 800180c:	20000044 	.word	0x20000044
 8001810:	20000046 	.word	0x20000046
 8001814:	2000005c 	.word	0x2000005c
 8001818:	42c80000 	.word	0x42c80000
 800181c:	c2c60000 	.word	0xc2c60000

08001820 <BMP280_ReadPressure>:
	  return p;
}
#endif
#ifdef BMP280
int32_t BMP280_ReadPressure(void)
{
 8001820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001824:	b0ca      	sub	sp, #296	; 0x128
 8001826:	af00      	add	r7, sp, #0
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  BMP280_ReadTemperature();
 8001828:	f7ff ff6e 	bl	8001708 <BMP280_ReadTemperature>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800182c:	20f7      	movs	r0, #247	; 0xf7
 800182e:	f7ff fe8b 	bl	8001548 <BMP280_Read24>
 8001832:	4603      	mov	r3, r0
 8001834:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  adc_P >>= 4;
 8001838:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800183c:	111b      	asrs	r3, r3, #4
 800183e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	  var1 = ((int64_t)t_fine) - 128000;
 8001842:	4baf      	ldr	r3, [pc, #700]	; (8001b00 <BMP280_ReadPressure+0x2e0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	17da      	asrs	r2, r3, #31
 8001848:	4698      	mov	r8, r3
 800184a:	4691      	mov	r9, r2
 800184c:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8001850:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001854:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
	  var2 = var1 * var1 * (int64_t)p6;
 8001858:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800185c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001860:	fb03 f102 	mul.w	r1, r3, r2
 8001864:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001868:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800186c:	fb02 f303 	mul.w	r3, r2, r3
 8001870:	18ca      	adds	r2, r1, r3
 8001872:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001876:	fba3 4503 	umull	r4, r5, r3, r3
 800187a:	1953      	adds	r3, r2, r5
 800187c:	461d      	mov	r5, r3
 800187e:	4ba1      	ldr	r3, [pc, #644]	; (8001b04 <BMP280_ReadPressure+0x2e4>)
 8001880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001884:	b21b      	sxth	r3, r3
 8001886:	17da      	asrs	r2, r3, #31
 8001888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800188c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001890:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001894:	4603      	mov	r3, r0
 8001896:	fb03 f205 	mul.w	r2, r3, r5
 800189a:	460b      	mov	r3, r1
 800189c:	fb04 f303 	mul.w	r3, r4, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	4602      	mov	r2, r0
 80018a4:	fba4 1202 	umull	r1, r2, r4, r2
 80018a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80018ac:	460a      	mov	r2, r1
 80018ae:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80018b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80018b6:	4413      	add	r3, r2
 80018b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80018bc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80018c0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 80018c4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80018c8:	4b8f      	ldr	r3, [pc, #572]	; (8001b08 <BMP280_ReadPressure+0x2e8>)
 80018ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	17da      	asrs	r2, r3, #31
 80018d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80018d6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80018da:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018de:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80018e2:	462a      	mov	r2, r5
 80018e4:	fb02 f203 	mul.w	r2, r2, r3
 80018e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018ec:	4621      	mov	r1, r4
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	441a      	add	r2, r3
 80018f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018f8:	4621      	mov	r1, r4
 80018fa:	fba3 1301 	umull	r1, r3, r3, r1
 80018fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001902:	460b      	mov	r3, r1
 8001904:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800190c:	18d3      	adds	r3, r2, r3
 800190e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800191e:	462b      	mov	r3, r5
 8001920:	0459      	lsls	r1, r3, #17
 8001922:	4623      	mov	r3, r4
 8001924:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001928:	4623      	mov	r3, r4
 800192a:	0458      	lsls	r0, r3, #17
 800192c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001930:	1814      	adds	r4, r2, r0
 8001932:	643c      	str	r4, [r7, #64]	; 0x40
 8001934:	414b      	adcs	r3, r1
 8001936:	647b      	str	r3, [r7, #68]	; 0x44
 8001938:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800193c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  var2 = var2 + (((int64_t)p4)<<35);
 8001940:	4b72      	ldr	r3, [pc, #456]	; (8001b0c <BMP280_ReadPressure+0x2ec>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	b21b      	sxth	r3, r3
 8001948:	17da      	asrs	r2, r3, #31
 800194a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800194e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800195e:	00d9      	lsls	r1, r3, #3
 8001960:	2000      	movs	r0, #0
 8001962:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001966:	1814      	adds	r4, r2, r0
 8001968:	63bc      	str	r4, [r7, #56]	; 0x38
 800196a:	414b      	adcs	r3, r1
 800196c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800196e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001972:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001976:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800197a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800197e:	fb03 f102 	mul.w	r1, r3, r2
 8001982:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001986:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	18ca      	adds	r2, r1, r3
 8001990:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001994:	fba3 1303 	umull	r1, r3, r3, r3
 8001998:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800199c:	460b      	mov	r3, r1
 800199e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80019a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019a6:	18d3      	adds	r3, r2, r3
 80019a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80019ac:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <BMP280_ReadPressure+0x2f0>)
 80019ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	17da      	asrs	r2, r3, #31
 80019b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80019be:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80019c2:	462b      	mov	r3, r5
 80019c4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80019c8:	4642      	mov	r2, r8
 80019ca:	fb02 f203 	mul.w	r2, r2, r3
 80019ce:	464b      	mov	r3, r9
 80019d0:	4621      	mov	r1, r4
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	4622      	mov	r2, r4
 80019da:	4641      	mov	r1, r8
 80019dc:	fba2 1201 	umull	r1, r2, r2, r1
 80019e0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80019e4:	460a      	mov	r2, r1
 80019e6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80019ea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80019ee:	4413      	add	r3, r2
 80019f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001a00:	4623      	mov	r3, r4
 8001a02:	0a18      	lsrs	r0, r3, #8
 8001a04:	462b      	mov	r3, r5
 8001a06:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001a0e:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <BMP280_ReadPressure+0x2f4>)
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	17da      	asrs	r2, r3, #31
 8001a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a1c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a24:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001a28:	464a      	mov	r2, r9
 8001a2a:	fb02 f203 	mul.w	r2, r2, r3
 8001a2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a32:	4644      	mov	r4, r8
 8001a34:	fb04 f303 	mul.w	r3, r4, r3
 8001a38:	441a      	add	r2, r3
 8001a3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a3e:	4644      	mov	r4, r8
 8001a40:	fba3 4304 	umull	r4, r3, r3, r4
 8001a44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001a48:	4623      	mov	r3, r4
 8001a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001a4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001a52:	18d3      	adds	r3, r2, r3
 8001a54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001a64:	464c      	mov	r4, r9
 8001a66:	0323      	lsls	r3, r4, #12
 8001a68:	4644      	mov	r4, r8
 8001a6a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001a6e:	4644      	mov	r4, r8
 8001a70:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001a72:	1884      	adds	r4, r0, r2
 8001a74:	633c      	str	r4, [r7, #48]	; 0x30
 8001a76:	eb41 0303 	adc.w	r3, r1, r3
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a7c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001a80:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001a84:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a88:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001a8c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001a90:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <BMP280_ReadPressure+0x2f8>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001aa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001aa4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001aa8:	462b      	mov	r3, r5
 8001aaa:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001aae:	4642      	mov	r2, r8
 8001ab0:	fb02 f203 	mul.w	r2, r2, r3
 8001ab4:	464b      	mov	r3, r9
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	4622      	mov	r2, r4
 8001ac0:	4641      	mov	r1, r8
 8001ac2:	fba2 1201 	umull	r1, r2, r2, r1
 8001ac6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001aca:	460a      	mov	r2, r1
 8001acc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001ad0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	104a      	asrs	r2, r1, #1
 8001aea:	4629      	mov	r1, r5
 8001aec:	17cb      	asrs	r3, r1, #31
 8001aee:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  if (var1 == 0) {
 8001af2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001af6:	4313      	orrs	r3, r2
 8001af8:	d110      	bne.n	8001b1c <BMP280_ReadPressure+0x2fc>
	    return 0;  // avoid exception caused by division by zero
 8001afa:	2300      	movs	r3, #0
 8001afc:	e158      	b.n	8001db0 <BMP280_ReadPressure+0x590>
 8001afe:	bf00      	nop
 8001b00:	2000005c 	.word	0x2000005c
 8001b04:	20000050 	.word	0x20000050
 8001b08:	2000004e 	.word	0x2000004e
 8001b0c:	2000004c 	.word	0x2000004c
 8001b10:	2000004a 	.word	0x2000004a
 8001b14:	20000048 	.word	0x20000048
 8001b18:	2000005a 	.word	0x2000005a
	  }
	  p = 1048576 - adc_P;
 8001b1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b20:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001b24:	17da      	asrs	r2, r3, #31
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b2a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001b2e:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	  p = (((p<<31) - var2)*3125) / var1;
 8001b32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b36:	105b      	asrs	r3, r3, #1
 8001b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b40:	07db      	lsls	r3, r3, #31
 8001b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b46:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001b4a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001b4e:	4621      	mov	r1, r4
 8001b50:	1a89      	subs	r1, r1, r2
 8001b52:	67b9      	str	r1, [r7, #120]	; 0x78
 8001b54:	4629      	mov	r1, r5
 8001b56:	eb61 0303 	sbc.w	r3, r1, r3
 8001b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b5c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b60:	4622      	mov	r2, r4
 8001b62:	462b      	mov	r3, r5
 8001b64:	1891      	adds	r1, r2, r2
 8001b66:	6239      	str	r1, [r7, #32]
 8001b68:	415b      	adcs	r3, r3
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b70:	4621      	mov	r1, r4
 8001b72:	1851      	adds	r1, r2, r1
 8001b74:	61b9      	str	r1, [r7, #24]
 8001b76:	4629      	mov	r1, r5
 8001b78:	414b      	adcs	r3, r1
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001b88:	4649      	mov	r1, r9
 8001b8a:	018b      	lsls	r3, r1, #6
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b92:	4641      	mov	r1, r8
 8001b94:	018a      	lsls	r2, r1, #6
 8001b96:	4641      	mov	r1, r8
 8001b98:	1889      	adds	r1, r1, r2
 8001b9a:	6139      	str	r1, [r7, #16]
 8001b9c:	4649      	mov	r1, r9
 8001b9e:	eb43 0101 	adc.w	r1, r3, r1
 8001ba2:	6179      	str	r1, [r7, #20]
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	008b      	lsls	r3, r1, #2
 8001bb4:	4641      	mov	r1, r8
 8001bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bba:	4641      	mov	r1, r8
 8001bbc:	008a      	lsls	r2, r1, #2
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4622      	mov	r2, r4
 8001bc6:	189b      	adds	r3, r3, r2
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	462a      	mov	r2, r5
 8001bce:	eb42 0303 	adc.w	r3, r2, r3
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001be0:	4649      	mov	r1, r9
 8001be2:	008b      	lsls	r3, r1, #2
 8001be4:	4641      	mov	r1, r8
 8001be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bea:	4641      	mov	r1, r8
 8001bec:	008a      	lsls	r2, r1, #2
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	189b      	adds	r3, r3, r2
 8001bf8:	673b      	str	r3, [r7, #112]	; 0x70
 8001bfa:	462b      	mov	r3, r5
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	eb42 0303 	adc.w	r3, r2, r3
 8001c02:	677b      	str	r3, [r7, #116]	; 0x74
 8001c04:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c0c:	f7fe ff7e 	bl	8000b0c <__aeabi_ldivmod>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001c18:	4b68      	ldr	r3, [pc, #416]	; (8001dbc <BMP280_ReadPressure+0x59c>)
 8001c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	17da      	asrs	r2, r3, #31
 8001c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c24:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c26:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8001c2a:	f04f 0000 	mov.w	r0, #0
 8001c2e:	f04f 0100 	mov.w	r1, #0
 8001c32:	0b50      	lsrs	r0, r2, #13
 8001c34:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c38:	1359      	asrs	r1, r3, #13
 8001c3a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001c3e:	462b      	mov	r3, r5
 8001c40:	fb00 f203 	mul.w	r2, r0, r3
 8001c44:	4623      	mov	r3, r4
 8001c46:	fb03 f301 	mul.w	r3, r3, r1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4622      	mov	r2, r4
 8001c4e:	fba2 1200 	umull	r1, r2, r2, r0
 8001c52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c56:	460a      	mov	r2, r1
 8001c58:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001c5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001c60:	4413      	add	r3, r2
 8001c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001c66:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8001c6a:	f04f 0000 	mov.w	r0, #0
 8001c6e:	f04f 0100 	mov.w	r1, #0
 8001c72:	0b50      	lsrs	r0, r2, #13
 8001c74:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c78:	1359      	asrs	r1, r3, #13
 8001c7a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001c7e:	462b      	mov	r3, r5
 8001c80:	fb00 f203 	mul.w	r2, r0, r3
 8001c84:	4623      	mov	r3, r4
 8001c86:	fb03 f301 	mul.w	r3, r3, r1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4622      	mov	r2, r4
 8001c8e:	fba2 1200 	umull	r1, r2, r2, r0
 8001c92:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001c96:	460a      	mov	r2, r1
 8001c98:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001c9c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	0e4a      	lsrs	r2, r1, #25
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	164b      	asrs	r3, r1, #25
 8001cc0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	  var2 = (((int64_t)p8) * p) >> 19;
 8001cc4:	4b3e      	ldr	r3, [pc, #248]	; (8001dc0 <BMP280_ReadPressure+0x5a0>)
 8001cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	17da      	asrs	r2, r3, #31
 8001cce:	663b      	str	r3, [r7, #96]	; 0x60
 8001cd0:	667a      	str	r2, [r7, #100]	; 0x64
 8001cd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001cd6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001cda:	462a      	mov	r2, r5
 8001cdc:	fb02 f203 	mul.w	r2, r2, r3
 8001ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	fba2 1201 	umull	r1, r2, r2, r1
 8001cf6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001cfa:	460a      	mov	r2, r1
 8001cfc:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001d00:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001d04:	4413      	add	r3, r2
 8001d06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001d16:	4621      	mov	r1, r4
 8001d18:	0cca      	lsrs	r2, r1, #19
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001d20:	4629      	mov	r1, r5
 8001d22:	14cb      	asrs	r3, r1, #19
 8001d24:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001d28:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001d2c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001d30:	1884      	adds	r4, r0, r2
 8001d32:	65bc      	str	r4, [r7, #88]	; 0x58
 8001d34:	eb41 0303 	adc.w	r3, r1, r3
 8001d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d3a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001d3e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001d42:	4621      	mov	r1, r4
 8001d44:	1889      	adds	r1, r1, r2
 8001d46:	6539      	str	r1, [r7, #80]	; 0x50
 8001d48:	4629      	mov	r1, r5
 8001d4a:	eb43 0101 	adc.w	r1, r3, r1
 8001d4e:	6579      	str	r1, [r7, #84]	; 0x54
 8001d50:	f04f 0000 	mov.w	r0, #0
 8001d54:	f04f 0100 	mov.w	r1, #0
 8001d58:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001d5c:	4623      	mov	r3, r4
 8001d5e:	0a18      	lsrs	r0, r3, #8
 8001d60:	462b      	mov	r3, r5
 8001d62:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001d66:	462b      	mov	r3, r5
 8001d68:	1219      	asrs	r1, r3, #8
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <BMP280_ReadPressure+0x5a4>)
 8001d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	17da      	asrs	r2, r3, #31
 8001d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d76:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001d84:	464c      	mov	r4, r9
 8001d86:	0123      	lsls	r3, r4, #4
 8001d88:	4644      	mov	r4, r8
 8001d8a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001d8e:	4644      	mov	r4, r8
 8001d90:	0122      	lsls	r2, r4, #4
 8001d92:	1884      	adds	r4, r0, r2
 8001d94:	603c      	str	r4, [r7, #0]
 8001d96:	eb41 0303 	adc.w	r3, r1, r3
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001da0:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	  return (int32_t)p/256;
 8001da4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	da00      	bge.n	8001dae <BMP280_ReadPressure+0x58e>
 8001dac:	33ff      	adds	r3, #255	; 0xff
 8001dae:	121b      	asrs	r3, r3, #8
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001db6:	46bd      	mov	sp, r7
 8001db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dbc:	20000056 	.word	0x20000056
 8001dc0:	20000054 	.word	0x20000054
 8001dc4:	20000052 	.word	0x20000052

08001dc8 <DWT_Delay_Init>:
#include "dwt_stm32_delay.h"

uint32_t DWT_Delay_Init(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <DWT_Delay_Init+0x58>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <DWT_Delay_Init+0x58>)
 8001dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	60d3      	str	r3, [r2, #12]

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <DWT_Delay_Init+0x58>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <DWT_Delay_Init+0x58>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de2:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= !DWT_CTRL_CYCCNTENA_Msk;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <DWT_Delay_Init+0x5c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <DWT_Delay_Init+0x5c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
	DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk;
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <DWT_Delay_Init+0x5c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <DWT_Delay_Init+0x5c>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6013      	str	r3, [r2, #0]
	DWT-> CYCCNT = 0;
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <DWT_Delay_Init+0x5c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]

	__asm__ ("NOP");
 8001e00:	bf00      	nop
	__asm__ ("NOP");
 8001e02:	bf00      	nop
	__asm__ ("NOP");
 8001e04:	bf00      	nop

	if(DWT->CYCCNT)
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <DWT_Delay_Init+0x5c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <DWT_Delay_Init+0x4a>
	{
		return 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <DWT_Delay_Init+0x4c>
	}
	else {
		return 1;
 8001e12:	2301      	movs	r3, #1
	}
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000edf0 	.word	0xe000edf0
 8001e24:	e0001000 	.word	0xe0001000

08001e28 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	while(1)
 8001e32:	e7fe      	b.n	8001e32 <vApplicationStackOverflowHook+0xa>

08001e34 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	while(1)
 8001e38:	e7fe      	b.n	8001e38 <vApplicationMallocFailedHook+0x4>
	...

08001e3c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrint */
  MutexPrintHandle = osMutexNew(&MutexPrint_attributes);
 8001e40:	4829      	ldr	r0, [pc, #164]	; (8001ee8 <MX_FREERTOS_Init+0xac>)
 8001e42:	f007 fa54 	bl	80092ee <osMutexNew>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a28      	ldr	r2, [pc, #160]	; (8001eec <MX_FREERTOS_Init+0xb0>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C1 */
  MutexI2C1Handle = osMutexNew(&MutexI2C1_attributes);
 8001e4c:	4828      	ldr	r0, [pc, #160]	; (8001ef0 <MX_FREERTOS_Init+0xb4>)
 8001e4e:	f007 fa4e 	bl	80092ee <osMutexNew>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a27      	ldr	r2, [pc, #156]	; (8001ef4 <MX_FREERTOS_Init+0xb8>)
 8001e56:	6013      	str	r3, [r2, #0]

  /* creation of MutexSPI1 */
  MutexSPI1Handle = osMutexNew(&MutexSPI1_attributes);
 8001e58:	4827      	ldr	r0, [pc, #156]	; (8001ef8 <MX_FREERTOS_Init+0xbc>)
 8001e5a:	f007 fa48 	bl	80092ee <osMutexNew>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4a26      	ldr	r2, [pc, #152]	; (8001efc <MX_FREERTOS_Init+0xc0>)
 8001e62:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueToSend */
  QueueToSendHandle = osMessageQueueNew (5, sizeof(Measured_t), &QueueToSend_attributes);
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <MX_FREERTOS_Init+0xc4>)
 8001e66:	2108      	movs	r1, #8
 8001e68:	2005      	movs	r0, #5
 8001e6a:	f007 fb4e 	bl	800950a <osMessageQueueNew>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <MX_FREERTOS_Init+0xc8>)
 8001e72:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BMP_Task */
  BMP_TaskHandle = osThreadNew(StartBMP_Task, NULL, &BMP_Task_attributes);
 8001e74:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <MX_FREERTOS_Init+0xcc>)
 8001e76:	2100      	movs	r1, #0
 8001e78:	4824      	ldr	r0, [pc, #144]	; (8001f0c <MX_FREERTOS_Init+0xd0>)
 8001e7a:	f007 f98b 	bl	8009194 <osThreadNew>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <MX_FREERTOS_Init+0xd4>)
 8001e82:	6013      	str	r3, [r2, #0]

  /* creation of BH_Task */
  BH_TaskHandle = osThreadNew(StartBH_Task, NULL, &BH_Task_attributes);
 8001e84:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <MX_FREERTOS_Init+0xd8>)
 8001e86:	2100      	movs	r1, #0
 8001e88:	4823      	ldr	r0, [pc, #140]	; (8001f18 <MX_FREERTOS_Init+0xdc>)
 8001e8a:	f007 f983 	bl	8009194 <osThreadNew>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <MX_FREERTOS_Init+0xe0>)
 8001e92:	6013      	str	r3, [r2, #0]

  /* creation of LedRed_task */
  LedRed_taskHandle = osThreadNew(StartLedRed_task, NULL, &LedRed_task_attributes);
 8001e94:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <MX_FREERTOS_Init+0xe4>)
 8001e96:	2100      	movs	r1, #0
 8001e98:	4822      	ldr	r0, [pc, #136]	; (8001f24 <MX_FREERTOS_Init+0xe8>)
 8001e9a:	f007 f97b 	bl	8009194 <osThreadNew>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4a21      	ldr	r2, [pc, #132]	; (8001f28 <MX_FREERTOS_Init+0xec>)
 8001ea2:	6013      	str	r3, [r2, #0]

  /* creation of DHT11_Task */
  DHT11_TaskHandle = osThreadNew(StartDHT11Task, NULL, &DHT11_Task_attributes);
 8001ea4:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <MX_FREERTOS_Init+0xf0>)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4821      	ldr	r0, [pc, #132]	; (8001f30 <MX_FREERTOS_Init+0xf4>)
 8001eaa:	f007 f973 	bl	8009194 <osThreadNew>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <MX_FREERTOS_Init+0xf8>)
 8001eb2:	6013      	str	r3, [r2, #0]

  /* creation of SenderTask */
  SenderTaskHandle = osThreadNew(StartSenderTask, NULL, &SenderTask_attributes);
 8001eb4:	4a20      	ldr	r2, [pc, #128]	; (8001f38 <MX_FREERTOS_Init+0xfc>)
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4820      	ldr	r0, [pc, #128]	; (8001f3c <MX_FREERTOS_Init+0x100>)
 8001eba:	f007 f96b 	bl	8009194 <osThreadNew>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <MX_FREERTOS_Init+0x104>)
 8001ec2:	6013      	str	r3, [r2, #0]

  /* creation of IWDG_Task */
  IWDG_TaskHandle = osThreadNew(StartIWDGTask, NULL, &IWDG_Task_attributes);
 8001ec4:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <MX_FREERTOS_Init+0x108>)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	481f      	ldr	r0, [pc, #124]	; (8001f48 <MX_FREERTOS_Init+0x10c>)
 8001eca:	f007 f963 	bl	8009194 <osThreadNew>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <MX_FREERTOS_Init+0x110>)
 8001ed2:	6013      	str	r3, [r2, #0]

  /* creation of NRF24Task */
  NRF24TaskHandle = osThreadNew(StartNRF24Task, NULL, &NRF24Task_attributes);
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <MX_FREERTOS_Init+0x114>)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	481e      	ldr	r0, [pc, #120]	; (8001f54 <MX_FREERTOS_Init+0x118>)
 8001eda:	f007 f95b 	bl	8009194 <osThreadNew>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <MX_FREERTOS_Init+0x11c>)
 8001ee2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	0800cb30 	.word	0x0800cb30
 8001eec:	20000080 	.word	0x20000080
 8001ef0:	0800cb40 	.word	0x0800cb40
 8001ef4:	20000084 	.word	0x20000084
 8001ef8:	0800cb50 	.word	0x0800cb50
 8001efc:	20000088 	.word	0x20000088
 8001f00:	0800cb18 	.word	0x0800cb18
 8001f04:	2000007c 	.word	0x2000007c
 8001f08:	0800ca1c 	.word	0x0800ca1c
 8001f0c:	08001f5d 	.word	0x08001f5d
 8001f10:	20000060 	.word	0x20000060
 8001f14:	0800ca40 	.word	0x0800ca40
 8001f18:	08002015 	.word	0x08002015
 8001f1c:	20000064 	.word	0x20000064
 8001f20:	0800ca64 	.word	0x0800ca64
 8001f24:	080020dd 	.word	0x080020dd
 8001f28:	20000068 	.word	0x20000068
 8001f2c:	0800ca88 	.word	0x0800ca88
 8001f30:	080020fd 	.word	0x080020fd
 8001f34:	2000006c 	.word	0x2000006c
 8001f38:	0800caac 	.word	0x0800caac
 8001f3c:	08002169 	.word	0x08002169
 8001f40:	20000070 	.word	0x20000070
 8001f44:	0800cad0 	.word	0x0800cad0
 8001f48:	080022a9 	.word	0x080022a9
 8001f4c:	20000074 	.word	0x20000074
 8001f50:	0800caf4 	.word	0x0800caf4
 8001f54:	080022c5 	.word	0x080022c5
 8001f58:	20000078 	.word	0x20000078

08001f5c <StartBMP_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBMP_Task */
void StartBMP_Task(void *argument)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBMP_Task */
	Measured_t bmp;
	osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001f64:	4b28      	ldr	r3, [pc, #160]	; (8002008 <StartBMP_Task+0xac>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f007 fa44 	bl	80093fa <osMutexAcquire>
	BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001f72:	2301      	movs	r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	2101      	movs	r1, #1
 8001f78:	4824      	ldr	r0, [pc, #144]	; (800200c <StartBMP_Task+0xb0>)
 8001f7a:	f7ff fb07 	bl	800158c <BMP280_Init>
	osMutexRelease(MutexI2C1Handle);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <StartBMP_Task+0xac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f007 fa84 	bl	8009490 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001f88:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <StartBMP_Task+0xac>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	4618      	mov	r0, r3
 8001f92:	f007 fa32 	bl	80093fa <osMutexAcquire>
	  bmp.data_ID = bmp_temp;
 8001f96:	2300      	movs	r3, #0
 8001f98:	723b      	strb	r3, [r7, #8]
	  bmp.value = BMP280_ReadTemperature();
 8001f9a:	f7ff fbb5 	bl	8001708 <BMP280_ReadTemperature>
 8001f9e:	eef0 7a40 	vmov.f32	s15, s0
 8001fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa6:	ee17 3a90 	vmov	r3, s15
 8001faa:	60fb      	str	r3, [r7, #12]
	  osMutexRelease(MutexI2C1Handle);
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <StartBMP_Task+0xac>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f007 fa6d 	bl	8009490 <osMutexRelease>
	  osMessageQueuePut(QueueToSendHandle, &bmp, 0, osWaitForever);
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <StartBMP_Task+0xb4>)
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	f107 0108 	add.w	r1, r7, #8
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f007 fb14 	bl	80095f0 <osMessageQueuePut>

	  osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <StartBMP_Task+0xac>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f007 fa12 	bl	80093fa <osMutexAcquire>
	  bmp.data_ID = bmp_pressure;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	723b      	strb	r3, [r7, #8]
	  bmp.value = BMP280_ReadPressure();
 8001fda:	f7ff fc21 	bl	8001820 <BMP280_ReadPressure>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	60fb      	str	r3, [r7, #12]
	  osMutexRelease(MutexI2C1Handle);
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <StartBMP_Task+0xac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f007 fa52 	bl	8009490 <osMutexRelease>
	  osMessageQueuePut(QueueToSendHandle, &bmp, 0, osWaitForever);
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <StartBMP_Task+0xb4>)
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	f107 0108 	add.w	r1, r7, #8
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f007 faf9 	bl	80095f0 <osMessageQueuePut>

	  osDelay(MEASURING_INTERVAL);
 8001ffe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002002:	f007 f959 	bl	80092b8 <osDelay>
	  osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8002006:	e7bf      	b.n	8001f88 <StartBMP_Task+0x2c>
 8002008:	20000084 	.word	0x20000084
 800200c:	2000008c 	.word	0x2000008c
 8002010:	2000007c 	.word	0x2000007c

08002014 <StartBH_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBH_Task */
void StartBH_Task(void *argument)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBH_Task */
	Measured_t measuring;
	measuring.data_ID = bh_light;
 800201c:	2304      	movs	r3, #4
 800201e:	723b      	strb	r3, [r7, #8]

	osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <StartBH_Task+0xac>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	4618      	mov	r0, r3
 800202a:	f007 f9e6 	bl	80093fa <osMutexAcquire>
	if(BH1750_OK == BH1750_Init(&hi2c1))
 800202e:	4825      	ldr	r0, [pc, #148]	; (80020c4 <StartBH_Task+0xb0>)
 8002030:	f7fe ff3e 	bl	8000eb0 <BH1750_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d103      	bne.n	8002042 <StartBH_Task+0x2e>
	{
		printf("BH init OK!\n\r");
 800203a:	4823      	ldr	r0, [pc, #140]	; (80020c8 <StartBH_Task+0xb4>)
 800203c:	f001 ffb4 	bl	8003fa8 <printf_>
 8002040:	e002      	b.n	8002048 <StartBH_Task+0x34>
	}else
	{
		printf("BH init error!\n\r");
 8002042:	4822      	ldr	r0, [pc, #136]	; (80020cc <StartBH_Task+0xb8>)
 8002044:	f001 ffb0 	bl	8003fa8 <printf_>
	}

	BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE);
 8002048:	2010      	movs	r0, #16
 800204a:	f7fe ff67 	bl	8000f1c <BH1750_SetMode>
	osMutexRelease(MutexI2C1Handle);
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <StartBH_Task+0xac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f007 fa1c 	bl	8009490 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2C1Handle, osWaitForever);
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <StartBH_Task+0xac>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	4618      	mov	r0, r3
 8002062:	f007 f9ca 	bl	80093fa <osMutexAcquire>
	  if(BH1750_OK == BH1750_ReadLight(&measuring.value))
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	3304      	adds	r3, #4
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe ffd5 	bl	800101c <BH1750_ReadLight>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <StartBH_Task+0x78>
	  {
		  osMessageQueuePut(QueueToSendHandle, &measuring, 0, osWaitForever);
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <StartBH_Task+0xbc>)
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	f107 0108 	add.w	r1, r7, #8
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	2200      	movs	r2, #0
 8002086:	f007 fab3 	bl	80095f0 <osMessageQueuePut>
 800208a:	e00e      	b.n	80020aa <StartBH_Task+0x96>
		  //printf("Light: %d lx\n\r",BH1750_lx_value);
	  }else
	  {
		  osMutexAcquire(MutexPrintHandle, osWaitForever);
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <StartBH_Task+0xc0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	4618      	mov	r0, r3
 8002096:	f007 f9b0 	bl	80093fa <osMutexAcquire>
		  printf("BH error!\n\r");
 800209a:	480f      	ldr	r0, [pc, #60]	; (80020d8 <StartBH_Task+0xc4>)
 800209c:	f001 ff84 	bl	8003fa8 <printf_>
		  osMutexRelease(MutexPrintHandle);
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <StartBH_Task+0xc0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f007 f9f3 	bl	8009490 <osMutexRelease>
	  }
	  osMutexRelease(MutexI2C1Handle);
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <StartBH_Task+0xac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f007 f9ee 	bl	8009490 <osMutexRelease>

	  osDelay(MEASURING_INTERVAL);
 80020b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020b8:	f007 f8fe 	bl	80092b8 <osDelay>
	  osMutexAcquire(MutexI2C1Handle, osWaitForever);
 80020bc:	e7cc      	b.n	8002058 <StartBH_Task+0x44>
 80020be:	bf00      	nop
 80020c0:	20000084 	.word	0x20000084
 80020c4:	2000008c 	.word	0x2000008c
 80020c8:	0800c8c0 	.word	0x0800c8c0
 80020cc:	0800c8d0 	.word	0x0800c8d0
 80020d0:	2000007c 	.word	0x2000007c
 80020d4:	20000080 	.word	0x20000080
 80020d8:	0800c8e4 	.word	0x0800c8e4

080020dc <StartLedRed_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedRed_task */
void StartLedRed_task(void *argument)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedRed_task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(Led_Red_GPIO_Port,Led_Red_Pin);
 80020e4:	2104      	movs	r1, #4
 80020e6:	4804      	ldr	r0, [pc, #16]	; (80020f8 <StartLedRed_task+0x1c>)
 80020e8:	f002 fc60 	bl	80049ac <HAL_GPIO_TogglePin>
	  osDelay(BLINKING_INTERVAL);
 80020ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020f0:	f007 f8e2 	bl	80092b8 <osDelay>
	  HAL_GPIO_TogglePin(Led_Red_GPIO_Port,Led_Red_Pin);
 80020f4:	e7f6      	b.n	80020e4 <StartLedRed_task+0x8>
 80020f6:	bf00      	nop
 80020f8:	48000400 	.word	0x48000400

080020fc <StartDHT11Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDHT11Task */
void StartDHT11Task(void *argument)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDHT11Task */
	//uint32_t DHT_temperature,DHT_humidity;
	DWT_Delay_Init();
 8002104:	f7ff fe60 	bl	8001dc8 <DWT_Delay_Init>
	Measured_t dht;
  /* Infinite loop */
  for(;;)
  {

	  DHT11_Start();
 8002108:	f7ff f836 	bl	8001178 <DHT11_Start>
	  taskENTER_CRITICAL();
 800210c:	f00a f842 	bl	800c194 <vPortEnterCritical>
	  DHT11_TempAndHumidity((uint16_t*)&temperature, (uint16_t*)&humidity);
 8002110:	f107 0216 	add.w	r2, r7, #22
 8002114:	f107 0317 	add.w	r3, r7, #23
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f8e2 	bl	80012e4 <DHT11_TempAndHumidity>
	  taskEXIT_CRITICAL();
 8002120:	f00a f868 	bl	800c1f4 <vPortExitCritical>

	  dht.data_ID = dht_temp;
 8002124:	2302      	movs	r3, #2
 8002126:	733b      	strb	r3, [r7, #12]
	  dht.value = temperature;
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	613b      	str	r3, [r7, #16]
	  osMessageQueuePut(QueueToSendHandle, &dht, 0, osWaitForever);
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <StartDHT11Task+0x68>)
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	f107 010c 	add.w	r1, r7, #12
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	2200      	movs	r2, #0
 800213a:	f007 fa59 	bl	80095f0 <osMessageQueuePut>

	  dht.data_ID = dht_humidity;
 800213e:	2303      	movs	r3, #3
 8002140:	733b      	strb	r3, [r7, #12]
	  dht.value = humidity;
 8002142:	7dbb      	ldrb	r3, [r7, #22]
 8002144:	613b      	str	r3, [r7, #16]
	  osMessageQueuePut(QueueToSendHandle, (Measured_t*) &dht,  0, osWaitForever);
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <StartDHT11Task+0x68>)
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	f107 010c 	add.w	r1, r7, #12
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	2200      	movs	r2, #0
 8002154:	f007 fa4c 	bl	80095f0 <osMessageQueuePut>

	  osDelay(MEASURING_INTERVAL);
 8002158:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800215c:	f007 f8ac 	bl	80092b8 <osDelay>
	  DHT11_Start();
 8002160:	e7d2      	b.n	8002108 <StartDHT11Task+0xc>
 8002162:	bf00      	nop
 8002164:	2000007c 	.word	0x2000007c

08002168 <StartSenderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSenderTask */
void StartSenderTask(void *argument)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af02      	add	r7, sp, #8
 800216e:	6078      	str	r0, [r7, #4]
	uint32_t pressure_afterComa;
	int8_t temperature_DHT;
	uint8_t humidity_DHT;
	uint32_t light_BH;

	uint8_t dataReady_status = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	74fb      	strb	r3, [r7, #19]


  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(QueueToSendHandle, &received, 0, osWaitForever);
 8002174:	4b46      	ldr	r3, [pc, #280]	; (8002290 <StartSenderTask+0x128>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f107 0108 	add.w	r1, r7, #8
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	2200      	movs	r2, #0
 8002182:	f007 fa95 	bl	80096b0 <osMessageQueueGet>

		switch (received.data_ID)
 8002186:	7a3b      	ldrb	r3, [r7, #8]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d841      	bhi.n	8002210 <StartSenderTask+0xa8>
 800218c:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <StartSenderTask+0x2c>)
 800218e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002192:	bf00      	nop
 8002194:	080021a9 	.word	0x080021a9
 8002198:	080021b9 	.word	0x080021b9
 800219c:	080021f5 	.word	0x080021f5
 80021a0:	080021e7 	.word	0x080021e7
 80021a4:	08002203 	.word	0x08002203
		{
		case bmp_temp:
			temperature_BMP = received.value;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			dataReady_status |=(1<<bmp_temp);
 80021ae:	7cfb      	ldrb	r3, [r7, #19]
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	74fb      	strb	r3, [r7, #19]
			break;
 80021b6:	e02e      	b.n	8002216 <StartSenderTask+0xae>

		case bmp_pressure:
			pressure_afterComa = received.value;	//to use less variables
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	61fb      	str	r3, [r7, #28]
			pressure_BMP = pressure_afterComa / 100;
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	4a35      	ldr	r2, [pc, #212]	; (8002294 <StartSenderTask+0x12c>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	623b      	str	r3, [r7, #32]
			pressure_afterComa = pressure_afterComa %100;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	4a32      	ldr	r2, [pc, #200]	; (8002294 <StartSenderTask+0x12c>)
 80021cc:	fba2 1203 	umull	r1, r2, r2, r3
 80021d0:	0952      	lsrs	r2, r2, #5
 80021d2:	2164      	movs	r1, #100	; 0x64
 80021d4:	fb01 f202 	mul.w	r2, r1, r2
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	61fb      	str	r3, [r7, #28]

			dataReady_status |=(1<<bmp_pressure);
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	f043 0302 	orr.w	r3, r3, #2
 80021e2:	74fb      	strb	r3, [r7, #19]
			break;
 80021e4:	e017      	b.n	8002216 <StartSenderTask+0xae>

		case dht_humidity:
			humidity_DHT = received.value;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	76fb      	strb	r3, [r7, #27]

			dataReady_status |=(1<<dht_humidity);
 80021ea:	7cfb      	ldrb	r3, [r7, #19]
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	74fb      	strb	r3, [r7, #19]
			break;
 80021f2:	e010      	b.n	8002216 <StartSenderTask+0xae>

		case dht_temp:
			temperature_DHT = received.value;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	74bb      	strb	r3, [r7, #18]

			dataReady_status |=(1<<dht_temp);
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	74fb      	strb	r3, [r7, #19]
			break;
 8002200:	e009      	b.n	8002216 <StartSenderTask+0xae>

		case bh_light:
			light_BH = received.value;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	617b      	str	r3, [r7, #20]

			dataReady_status |=(1<<bh_light);
 8002206:	7cfb      	ldrb	r3, [r7, #19]
 8002208:	f043 0310 	orr.w	r3, r3, #16
 800220c:	74fb      	strb	r3, [r7, #19]
			break;
 800220e:	e002      	b.n	8002216 <StartSenderTask+0xae>

		default:
			printf("\nError in switch case!!\n\r");
 8002210:	4821      	ldr	r0, [pc, #132]	; (8002298 <StartSenderTask+0x130>)
 8002212:	f001 fec9 	bl	8003fa8 <printf_>
		}

		if (dataReady_status == SUM_OF_ID)
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	2b1f      	cmp	r3, #31
 800221a:	d1ab      	bne.n	8002174 <StartSenderTask+0xc>
		{

			if (GPIO_PIN_SET == HAL_GPIO_ReadPin(RAIN_GPIO_Port, RAIN_Pin))
 800221c:	2108      	movs	r1, #8
 800221e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002222:	f002 fb93 	bl	800494c <HAL_GPIO_ReadPin>
 8002226:	4603      	mov	r3, r0
 8002228:	2b01      	cmp	r3, #1
 800222a:	d117      	bne.n	800225c <StartSenderTask+0xf4>
			{
			osMutexAcquire(MutexPrintHandle,osWaitForever);
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <StartSenderTask+0x134>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	4618      	mov	r0, r3
 8002236:	f007 f8e0 	bl	80093fa <osMutexAcquire>
			printf("{\"temp\":%d, \"hum\":%d, \"press\":%d.%d,"
 800223a:	f997 1027 	ldrsb.w	r1, [r7, #39]	; 0x27
 800223e:	7efa      	ldrb	r2, [r7, #27]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	4815      	ldr	r0, [pc, #84]	; (80022a0 <StartSenderTask+0x138>)
 800224c:	f001 feac 	bl	8003fa8 <printf_>
					"\"light\":%d, \"batt\":4.58, \"rain\":1}\n\r",
					temperature_BMP, humidity_DHT,
					pressure_BMP, pressure_afterComa,
					light_BH);
			osMutexRelease(MutexPrintHandle);
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <StartSenderTask+0x134>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f007 f91b 	bl	8009490 <osMutexRelease>
 800225a:	e016      	b.n	800228a <StartSenderTask+0x122>
			} else
			{
			osMutexAcquire(MutexPrintHandle,osWaitForever);
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <StartSenderTask+0x134>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	4618      	mov	r0, r3
 8002266:	f007 f8c8 	bl	80093fa <osMutexAcquire>
			printf("{\"temp\":%d, \"hum\":%d, \"press\":%d.%d,"
 800226a:	f997 1027 	ldrsb.w	r1, [r7, #39]	; 0x27
 800226e:	7efa      	ldrb	r2, [r7, #27]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	480a      	ldr	r0, [pc, #40]	; (80022a4 <StartSenderTask+0x13c>)
 800227c:	f001 fe94 	bl	8003fa8 <printf_>
					"\"light\":%d, \"batt\":4.58, \"rain\":0}\n\r",
					temperature_BMP, humidity_DHT,
					pressure_BMP, pressure_afterComa,
					light_BH);
			osMutexRelease(MutexPrintHandle);
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <StartSenderTask+0x134>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f007 f903 	bl	8009490 <osMutexRelease>
			}
			dataReady_status = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	74fb      	strb	r3, [r7, #19]
	osMessageQueueGet(QueueToSendHandle, &received, 0, osWaitForever);
 800228e:	e771      	b.n	8002174 <StartSenderTask+0xc>
 8002290:	2000007c 	.word	0x2000007c
 8002294:	51eb851f 	.word	0x51eb851f
 8002298:	0800c8f0 	.word	0x0800c8f0
 800229c:	20000080 	.word	0x20000080
 80022a0:	0800c90c 	.word	0x0800c90c
 80022a4:	0800c958 	.word	0x0800c958

080022a8 <StartIWDGTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIWDGTask */
void StartIWDGTask(void *argument)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIWDGTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1800);
 80022b0:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80022b4:	f007 f800 	bl	80092b8 <osDelay>
	  HAL_IWDG_Refresh(&hiwdg);
 80022b8:	4801      	ldr	r0, [pc, #4]	; (80022c0 <StartIWDGTask+0x18>)
 80022ba:	f003 fc61 	bl	8005b80 <HAL_IWDG_Refresh>
	  osDelay(1800);
 80022be:	e7f7      	b.n	80022b0 <StartIWDGTask+0x8>
 80022c0:	200000d8 	.word	0x200000d8

080022c4 <StartNRF24Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNRF24Task */
void StartNRF24Task(void *argument)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNRF24Task */
	nrf24_CE_enable();
 80022cc:	f7ff f84e 	bl	800136c <nrf24_CE_enable>
	uint8_t pipes[2];

	nrf24_WriteReg(CONFIG,PWR_UP);
 80022d0:	2101      	movs	r1, #1
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7ff f86e 	bl	80013b4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR,PIPE4_EN);
 80022d8:	2104      	movs	r1, #4
 80022da:	2002      	movs	r0, #2
 80022dc:	f7ff f86a 	bl	80013b4 <nrf24_WriteReg>

  /* Infinite loop */
  for(;;)
  {
	  if(HAL_OK != nrf24_ReadReg(CONFIG, pipes))
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	2000      	movs	r0, #0
 80022e8:	f7ff f88a 	bl	8001400 <nrf24_ReadReg>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <StartNRF24Task+0x36>
	  {
		  printf("siuuuuuuuuuuu\n\r");
 80022f2:	480f      	ldr	r0, [pc, #60]	; (8002330 <StartNRF24Task+0x6c>)
 80022f4:	f001 fe58 	bl	8003fa8 <printf_>
 80022f8:	e015      	b.n	8002326 <StartNRF24Task+0x62>
	  } else
	  {
		  osMutexAcquire(MutexPrintHandle, osWaitForever);
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <StartNRF24Task+0x70>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002302:	4618      	mov	r0, r3
 8002304:	f007 f879 	bl	80093fa <osMutexAcquire>
		  printf("NRF24 enabled pipes1: %d\n\r",pipes[0]);
 8002308:	7b3b      	ldrb	r3, [r7, #12]
 800230a:	4619      	mov	r1, r3
 800230c:	480a      	ldr	r0, [pc, #40]	; (8002338 <StartNRF24Task+0x74>)
 800230e:	f001 fe4b 	bl	8003fa8 <printf_>
		  printf("NRF24 enabled pipes2: %d\n\r",pipes[1]);
 8002312:	7b7b      	ldrb	r3, [r7, #13]
 8002314:	4619      	mov	r1, r3
 8002316:	4809      	ldr	r0, [pc, #36]	; (800233c <StartNRF24Task+0x78>)
 8002318:	f001 fe46 	bl	8003fa8 <printf_>
		  osMutexRelease(MutexPrintHandle);
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <StartNRF24Task+0x70>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f007 f8b5 	bl	8009490 <osMutexRelease>
	  }

	  osDelay(1000);
 8002326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800232a:	f006 ffc5 	bl	80092b8 <osDelay>
	  if(HAL_OK != nrf24_ReadReg(CONFIG, pipes))
 800232e:	e7d7      	b.n	80022e0 <StartNRF24Task+0x1c>
 8002330:	0800c9a4 	.word	0x0800c9a4
 8002334:	20000080 	.word	0x20000080
 8002338:	0800c9b4 	.word	0x0800c9b4
 800233c:	0800c9d0 	.word	0x0800c9d0

08002340 <_putchar>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *) &character, 1, 1000);
 800234a:	1df9      	adds	r1, r7, #7
 800234c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002350:	2201      	movs	r2, #1
 8002352:	4803      	ldr	r0, [pc, #12]	; (8002360 <_putchar+0x20>)
 8002354:	f006 f994 	bl	8008680 <HAL_UART_Transmit>
  // send char to console etc.
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000198 	.word	0x20000198

08002364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b48      	ldr	r3, [pc, #288]	; (800249c <MX_GPIO_Init+0x138>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	4a47      	ldr	r2, [pc, #284]	; (800249c <MX_GPIO_Init+0x138>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002386:	4b45      	ldr	r3, [pc, #276]	; (800249c <MX_GPIO_Init+0x138>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	4b42      	ldr	r3, [pc, #264]	; (800249c <MX_GPIO_Init+0x138>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	4a41      	ldr	r2, [pc, #260]	; (800249c <MX_GPIO_Init+0x138>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800239e:	4b3f      	ldr	r3, [pc, #252]	; (800249c <MX_GPIO_Init+0x138>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023aa:	4b3c      	ldr	r3, [pc, #240]	; (800249c <MX_GPIO_Init+0x138>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	4a3b      	ldr	r2, [pc, #236]	; (800249c <MX_GPIO_Init+0x138>)
 80023b0:	f043 0310 	orr.w	r3, r3, #16
 80023b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b6:	4b39      	ldr	r3, [pc, #228]	; (800249c <MX_GPIO_Init+0x138>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c2:	4b36      	ldr	r3, [pc, #216]	; (800249c <MX_GPIO_Init+0x138>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	4a35      	ldr	r2, [pc, #212]	; (800249c <MX_GPIO_Init+0x138>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ce:	4b33      	ldr	r3, [pc, #204]	; (800249c <MX_GPIO_Init+0x138>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Red_GPIO_Port, Led_Red_Pin, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	2104      	movs	r1, #4
 80023de:	4830      	ldr	r0, [pc, #192]	; (80024a0 <MX_GPIO_Init+0x13c>)
 80023e0:	f002 facc 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ea:	482e      	ldr	r0, [pc, #184]	; (80024a4 <MX_GPIO_Init+0x140>)
 80023ec:	f002 fac6 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CS_GPIO_Port, NRF24_CS_Pin, GPIO_PIN_RESET);
 80023f0:	2200      	movs	r2, #0
 80023f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f6:	482b      	ldr	r0, [pc, #172]	; (80024a4 <MX_GPIO_Init+0x140>)
 80023f8:	f002 fac0 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80023fc:	2301      	movs	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	4619      	mov	r1, r3
 800240e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002412:	f002 f8f1 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RAIN_Pin;
 8002416:	2308      	movs	r3, #8
 8002418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800241a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800241e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242e:	f002 f8e3 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Led_Red_Pin;
 8002432:	2304      	movs	r3, #4
 8002434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002436:	2301      	movs	r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led_Red_GPIO_Port, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	4815      	ldr	r0, [pc, #84]	; (80024a0 <MX_GPIO_Init+0x13c>)
 800244a:	f002 f8d5 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CS_Pin;
 800244e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	2301      	movs	r3, #1
 8002456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	480f      	ldr	r0, [pc, #60]	; (80024a4 <MX_GPIO_Init+0x140>)
 8002468:	f002 f8c6 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800246c:	2301      	movs	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	480a      	ldr	r0, [pc, #40]	; (80024a8 <MX_GPIO_Init+0x144>)
 8002480:	f002 f8ba 	bl	80045f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2105      	movs	r1, #5
 8002488:	2009      	movs	r0, #9
 800248a:	f002 f88b 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800248e:	2009      	movs	r0, #9
 8002490:	f002 f8a4 	bl	80045dc <HAL_NVIC_EnableIRQ>

}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	48000400 	.word	0x48000400
 80024a4:	48001000 	.word	0x48001000
 80024a8:	48000c00 	.word	0x48000c00

080024ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <MX_I2C1_Init+0x74>)
 80024b2:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <MX_I2C1_Init+0x78>)
 80024b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <MX_I2C1_Init+0x74>)
 80024b8:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <MX_I2C1_Init+0x7c>)
 80024ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <MX_I2C1_Init+0x74>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <MX_I2C1_Init+0x74>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <MX_I2C1_Init+0x74>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <MX_I2C1_Init+0x74>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <MX_I2C1_Init+0x74>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <MX_I2C1_Init+0x74>)
 80024dc:	2200      	movs	r2, #0
 80024de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <MX_I2C1_Init+0x74>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024e6:	480e      	ldr	r0, [pc, #56]	; (8002520 <MX_I2C1_Init+0x74>)
 80024e8:	f002 fa9d 	bl	8004a26 <HAL_I2C_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80024f2:	f000 f915 	bl	8002720 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024f6:	2100      	movs	r1, #0
 80024f8:	4809      	ldr	r0, [pc, #36]	; (8002520 <MX_I2C1_Init+0x74>)
 80024fa:	f003 fa5b 	bl	80059b4 <HAL_I2CEx_ConfigAnalogFilter>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002504:	f000 f90c 	bl	8002720 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002508:	2100      	movs	r1, #0
 800250a:	4805      	ldr	r0, [pc, #20]	; (8002520 <MX_I2C1_Init+0x74>)
 800250c:	f003 fa9d 	bl	8005a4a <HAL_I2CEx_ConfigDigitalFilter>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002516:	f000 f903 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000008c 	.word	0x2000008c
 8002524:	40005400 	.word	0x40005400
 8002528:	10909cec 	.word	0x10909cec

0800252c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b0ac      	sub	sp, #176	; 0xb0
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2288      	movs	r2, #136	; 0x88
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f00a f963 	bl	800c818 <memset>
  if(i2cHandle->Instance==I2C1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a21      	ldr	r2, [pc, #132]	; (80025dc <HAL_I2C_MspInit+0xb0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d13a      	bne.n	80025d2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800255c:	2340      	movs	r3, #64	; 0x40
 800255e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002560:	2300      	movs	r3, #0
 8002562:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	4618      	mov	r0, r3
 800256a:	f004 f99d 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002574:	f000 f8d4 	bl	8002720 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_I2C_MspInit+0xb4>)
 800257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257c:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <HAL_I2C_MspInit+0xb4>)
 800257e:	f043 0302 	orr.w	r3, r3, #2
 8002582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_I2C_MspInit+0xb4>)
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002590:	23c0      	movs	r3, #192	; 0xc0
 8002592:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002596:	2312      	movs	r3, #18
 8002598:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a2:	2303      	movs	r3, #3
 80025a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025a8:	2304      	movs	r3, #4
 80025aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025b2:	4619      	mov	r1, r3
 80025b4:	480b      	ldr	r0, [pc, #44]	; (80025e4 <HAL_I2C_MspInit+0xb8>)
 80025b6:	f002 f81f 	bl	80045f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_I2C_MspInit+0xb4>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	4a08      	ldr	r2, [pc, #32]	; (80025e0 <HAL_I2C_MspInit+0xb4>)
 80025c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025c4:	6593      	str	r3, [r2, #88]	; 0x58
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_I2C_MspInit+0xb4>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025d2:	bf00      	nop
 80025d4:	37b0      	adds	r7, #176	; 0xb0
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40005400 	.word	0x40005400
 80025e0:	40021000 	.word	0x40021000
 80025e4:	48000400 	.word	0x48000400

080025e8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <MX_IWDG_Init+0x34>)
 80025ee:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <MX_IWDG_Init+0x38>)
 80025f0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <MX_IWDG_Init+0x34>)
 80025f4:	2202      	movs	r2, #2
 80025f6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <MX_IWDG_Init+0x34>)
 80025fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80025fe:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4000;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_IWDG_Init+0x34>)
 8002602:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002606:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	; (800261c <MX_IWDG_Init+0x34>)
 800260a:	f003 fa6a 	bl	8005ae2 <HAL_IWDG_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002614:	f000 f884 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200000d8 	.word	0x200000d8
 8002620:	40003000 	.word	0x40003000

08002624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002628:	f001 fecb 	bl	80043c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800262c:	f000 f811 	bl	8002652 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002630:	f7ff fe98 	bl	8002364 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002634:	f7ff ff3a 	bl	80024ac <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002638:	f001 fe0c 	bl	8004254 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 800263c:	f7ff ffd4 	bl	80025e8 <MX_IWDG_Init>
  MX_SPI1_Init();
 8002640:	f001 fcce 	bl	8003fe0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
//HAL_GetTick();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002644:	f006 fd5c 	bl	8009100 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002648:	f7ff fbf8 	bl	8001e3c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800264c:	f006 fd7c 	bl	8009148 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002650:	e7fe      	b.n	8002650 <main+0x2c>

08002652 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b096      	sub	sp, #88	; 0x58
 8002656:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	2244      	movs	r2, #68	; 0x44
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f00a f8d9 	bl	800c818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002666:	463b      	mov	r3, r7
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002674:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002678:	f003 faa0 	bl	8005bbc <HAL_PWREx_ControlVoltageScaling>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002682:	f000 f84d 	bl	8002720 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8002686:	2318      	movs	r3, #24
 8002688:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800268a:	2301      	movs	r3, #1
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800268e:	2301      	movs	r3, #1
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002696:	2360      	movs	r3, #96	; 0x60
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800269a:	2302      	movs	r3, #2
 800269c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800269e:	2301      	movs	r3, #1
 80026a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80026a6:	2328      	movs	r3, #40	; 0x28
 80026a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80026aa:	2307      	movs	r3, #7
 80026ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026ae:	2302      	movs	r3, #2
 80026b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026b2:	2302      	movs	r3, #2
 80026b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 fad4 	bl	8005c68 <HAL_RCC_OscConfig>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <SystemClock_Config+0x78>
  {
    Error_Handler();
 80026c6:	f000 f82b 	bl	8002720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ca:	230f      	movs	r3, #15
 80026cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ce:	2303      	movs	r3, #3
 80026d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80026de:	463b      	mov	r3, r7
 80026e0:	2104      	movs	r1, #4
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fea8 	bl	8006438 <HAL_RCC_ClockConfig>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80026ee:	f000 f817 	bl	8002720 <Error_Handler>
  }
}
 80026f2:	bf00      	nop
 80026f4:	3758      	adds	r7, #88	; 0x58
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800270e:	f001 fe71 	bl	80043f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40001400 	.word	0x40001400

08002720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002724:	b672      	cpsid	i
}
 8002726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002728:	e7fe      	b.n	8002728 <Error_Handler+0x8>

0800272a <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	4603      	mov	r3, r0
 8002754:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <_out_char+0x1e>
    _putchar(character);
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fdee 	bl	8002340 <_putchar>
  }
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e002      	b.n	8002782 <_strnlen_s+0x16>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3301      	adds	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <_strnlen_s+0x28>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	603a      	str	r2, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f3      	bne.n	800277c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	1ad3      	subs	r3, r2, r3
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	2b2f      	cmp	r3, #47	; 0x2f
 80027b4:	d904      	bls.n	80027c0 <_is_digit+0x1a>
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2b39      	cmp	r3, #57	; 0x39
 80027ba:	d801      	bhi.n	80027c0 <_is_digit+0x1a>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <_is_digit+0x1c>
 80027c0:	2300      	movs	r3, #0
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	b2db      	uxtb	r3, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80027e0:	e00e      	b.n	8002800 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	1c59      	adds	r1, r3, #1
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6011      	str	r1, [r2, #0]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	4403      	add	r3, r0
 80027fc:	3b30      	subs	r3, #48	; 0x30
 80027fe:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ffcd 	bl	80027a6 <_is_digit>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e7      	bne.n	80027e2 <_atoi+0xe>
  }
  return i;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d125      	bne.n	8002884 <_out_rev+0x68>
 8002838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d120      	bne.n	8002884 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	e00a      	b.n	800285e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	1c53      	adds	r3, r2, #1
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	68fc      	ldr	r4, [r7, #12]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	2020      	movs	r0, #32
 8002856:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3301      	adds	r3, #1
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	429a      	cmp	r2, r3
 8002864:	d3f0      	bcc.n	8002848 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002866:	e00d      	b.n	8002884 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	3b01      	subs	r3, #1
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	4413      	add	r3, r2
 8002874:	7818      	ldrb	r0, [r3, #0]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	1c53      	adds	r3, r2, #1
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	68fc      	ldr	r4, [r7, #12]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	47a0      	blx	r4
  while (len) {
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ee      	bne.n	8002868 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00e      	beq.n	80028b2 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002894:	e007      	b.n	80028a6 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	1c53      	adds	r3, r2, #1
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	68fc      	ldr	r4, [r7, #12]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	2020      	movs	r0, #32
 80028a4:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d8f1      	bhi.n	8002896 <_out_rev+0x7a>
    }
  }

  return idx;
 80028b2:	687b      	ldr	r3, [r7, #4]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd90      	pop	{r4, r7, pc}

080028bc <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af04      	add	r7, sp, #16
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80028ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d136      	bne.n	8002942 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d018      	beq.n	800290c <_ntoa_format+0x50>
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <_ntoa_format+0x50>
 80028e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <_ntoa_format+0x3a>
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <_ntoa_format+0x50>
      width--;
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	3b01      	subs	r3, #1
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80028fc:	e006      	b.n	800290c <_ntoa_format+0x50>
      buf[len++] = '0';
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	61fa      	str	r2, [r7, #28]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4413      	add	r3, r2
 8002908:	2230      	movs	r2, #48	; 0x30
 800290a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	429a      	cmp	r2, r3
 8002912:	d20a      	bcs.n	800292a <_ntoa_format+0x6e>
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b1f      	cmp	r3, #31
 8002918:	d9f1      	bls.n	80028fe <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800291a:	e006      	b.n	800292a <_ntoa_format+0x6e>
      buf[len++] = '0';
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	61fa      	str	r2, [r7, #28]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4413      	add	r3, r2
 8002926:	2230      	movs	r2, #48	; 0x30
 8002928:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <_ntoa_format+0x86>
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	429a      	cmp	r2, r3
 800293a:	d202      	bcs.n	8002942 <_ntoa_format+0x86>
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b1f      	cmp	r3, #31
 8002940:	d9ec      	bls.n	800291c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	d058      	beq.n	80029fe <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002952:	2b00      	cmp	r3, #0
 8002954:	d116      	bne.n	8002984 <_ntoa_format+0xc8>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d013      	beq.n	8002984 <_ntoa_format+0xc8>
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	429a      	cmp	r2, r3
 8002962:	d003      	beq.n	800296c <_ntoa_format+0xb0>
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	429a      	cmp	r2, r3
 800296a:	d10b      	bne.n	8002984 <_ntoa_format+0xc8>
      len--;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	3b01      	subs	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <_ntoa_format+0xc8>
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	2b10      	cmp	r3, #16
 800297c:	d102      	bne.n	8002984 <_ntoa_format+0xc8>
        len--;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b01      	subs	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	2b10      	cmp	r3, #16
 8002988:	d10f      	bne.n	80029aa <_ntoa_format+0xee>
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <_ntoa_format+0xee>
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	2b1f      	cmp	r3, #31
 8002998:	d807      	bhi.n	80029aa <_ntoa_format+0xee>
      buf[len++] = 'x';
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	61fa      	str	r2, [r7, #28]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	2278      	movs	r2, #120	; 0x78
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e01f      	b.n	80029ea <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	2b10      	cmp	r3, #16
 80029ae:	d10f      	bne.n	80029d0 <_ntoa_format+0x114>
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <_ntoa_format+0x114>
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	2b1f      	cmp	r3, #31
 80029be:	d807      	bhi.n	80029d0 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	61fa      	str	r2, [r7, #28]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4413      	add	r3, r2
 80029ca:	2258      	movs	r2, #88	; 0x58
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e00c      	b.n	80029ea <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d109      	bne.n	80029ea <_ntoa_format+0x12e>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	2b1f      	cmp	r3, #31
 80029da:	d806      	bhi.n	80029ea <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	61fa      	str	r2, [r7, #28]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4413      	add	r3, r2
 80029e6:	2262      	movs	r2, #98	; 0x62
 80029e8:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2b1f      	cmp	r3, #31
 80029ee:	d806      	bhi.n	80029fe <_ntoa_format+0x142>
      buf[len++] = '0';
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	61fa      	str	r2, [r7, #28]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4413      	add	r3, r2
 80029fa:	2230      	movs	r2, #48	; 0x30
 80029fc:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	2b1f      	cmp	r3, #31
 8002a02:	d824      	bhi.n	8002a4e <_ntoa_format+0x192>
    if (negative) {
 8002a04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <_ntoa_format+0x160>
      buf[len++] = '-';
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	61fa      	str	r2, [r7, #28]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	222d      	movs	r2, #45	; 0x2d
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e018      	b.n	8002a4e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	61fa      	str	r2, [r7, #28]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	222b      	movs	r2, #43	; 0x2b
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e00b      	b.n	8002a4e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	61fa      	str	r2, [r7, #28]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4413      	add	r3, r2
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	9303      	str	r3, [sp, #12]
 8002a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7ff fed9 	bl	800281c <_out_rev>
 8002a6a:	4603      	mov	r3, r0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b096      	sub	sp, #88	; 0x58
 8002a78:	af08      	add	r7, sp, #32
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8e:	f023 0310 	bic.w	r3, r3, #16
 8002a92:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <_ntoa_long+0x30>
 8002a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d032      	beq.n	8002b0a <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aa8:	fbb3 f2f2 	udiv	r2, r3, r2
 8002aac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002aae:	fb01 f202 	mul.w	r2, r1, r2
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002abc:	2b09      	cmp	r3, #9
 8002abe:	d804      	bhi.n	8002aca <_ntoa_long+0x56>
 8002ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ac4:	3330      	adds	r3, #48	; 0x30
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	e00d      	b.n	8002ae6 <_ntoa_long+0x72>
 8002aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <_ntoa_long+0x64>
 8002ad4:	2241      	movs	r2, #65	; 0x41
 8002ad6:	e000      	b.n	8002ada <_ntoa_long+0x66>
 8002ad8:	2261      	movs	r2, #97	; 0x61
 8002ada:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ade:	4413      	add	r3, r2
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	3b0a      	subs	r3, #10
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae8:	1c59      	adds	r1, r3, #1
 8002aea:	6379      	str	r1, [r7, #52]	; 0x34
 8002aec:	3338      	adds	r3, #56	; 0x38
 8002aee:	443b      	add	r3, r7
 8002af0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002af4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <_ntoa_long+0x96>
 8002b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b06:	2b1f      	cmp	r3, #31
 8002b08:	d9cc      	bls.n	8002aa4 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0c:	9306      	str	r3, [sp, #24]
 8002b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b10:	9305      	str	r3, [sp, #20]
 8002b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b14:	9304      	str	r3, [sp, #16]
 8002b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b18:	9303      	str	r3, [sp, #12]
 8002b1a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002b1e:	9302      	str	r3, [sp, #8]
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff fec3 	bl	80028bc <_ntoa_format>
 8002b36:	4603      	mov	r3, r0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3738      	adds	r7, #56	; 0x38
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b096      	sub	sp, #88	; 0x58
 8002b44:	af08      	add	r7, sp, #32
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b56:	4313      	orrs	r3, r2
 8002b58:	d103      	bne.n	8002b62 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b5c:	f023 0310 	bic.w	r3, r3, #16
 8002b60:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <_ntoa_long_long+0x34>
 8002b6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b70:	4313      	orrs	r3, r2
 8002b72:	d037      	beq.n	8002be4 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8002b74:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002b78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b7c:	f7fe f816 	bl	8000bac <__aeabi_uldivmod>
 8002b80:	4613      	mov	r3, r2
 8002b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002b86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b8a:	2b09      	cmp	r3, #9
 8002b8c:	d804      	bhi.n	8002b98 <_ntoa_long_long+0x58>
 8002b8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b92:	3330      	adds	r3, #48	; 0x30
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	e00d      	b.n	8002bb4 <_ntoa_long_long+0x74>
 8002b98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <_ntoa_long_long+0x66>
 8002ba2:	2241      	movs	r2, #65	; 0x41
 8002ba4:	e000      	b.n	8002ba8 <_ntoa_long_long+0x68>
 8002ba6:	2261      	movs	r2, #97	; 0x61
 8002ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bac:	4413      	add	r3, r2
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3b0a      	subs	r3, #10
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	1c59      	adds	r1, r3, #1
 8002bb8:	6379      	str	r1, [r7, #52]	; 0x34
 8002bba:	3338      	adds	r3, #56	; 0x38
 8002bbc:	443b      	add	r3, r7
 8002bbe:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002bc2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bc6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002bca:	f7fd ffef 	bl	8000bac <__aeabi_uldivmod>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002bd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	d002      	beq.n	8002be4 <_ntoa_long_long+0xa4>
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	2b1f      	cmp	r3, #31
 8002be2:	d9c7      	bls.n	8002b74 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002be8:	9206      	str	r2, [sp, #24]
 8002bea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bec:	9205      	str	r2, [sp, #20]
 8002bee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bf0:	9204      	str	r2, [sp, #16]
 8002bf2:	9303      	str	r3, [sp, #12]
 8002bf4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002bf8:	9302      	str	r3, [sp, #8]
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	f107 0310 	add.w	r3, r7, #16
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff fe56 	bl	80028bc <_ntoa_format>
 8002c10:	4603      	mov	r3, r0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3738      	adds	r7, #56	; 0x38
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	0000      	movs	r0, r0
 8002c1c:	0000      	movs	r0, r0
	...

08002c20 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b09d      	sub	sp, #116	; 0x74
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	6178      	str	r0, [r7, #20]
 8002c28:	6139      	str	r1, [r7, #16]
 8002c2a:	60fa      	str	r2, [r7, #12]
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c4a:	f7fd fee5 	bl	8000a18 <__aeabi_dcmpeq>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10f      	bne.n	8002c74 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c56:	9303      	str	r3, [sp, #12]
 8002c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	4ba7      	ldr	r3, [pc, #668]	; (8002f00 <_ftoa+0x2e0>)
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	6939      	ldr	r1, [r7, #16]
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f7ff fdd6 	bl	800281c <_out_rev>
 8002c70:	4603      	mov	r3, r0
 8002c72:	e222      	b.n	80030ba <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002c7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c80:	f7fd fed4 	bl	8000a2c <__aeabi_dcmplt>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00f      	beq.n	8002caa <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c8c:	9303      	str	r3, [sp, #12]
 8002c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c90:	9302      	str	r3, [sp, #8]
 8002c92:	2304      	movs	r3, #4
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	4b9b      	ldr	r3, [pc, #620]	; (8002f04 <_ftoa+0x2e4>)
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	6939      	ldr	r1, [r7, #16]
 8002ca0:	6978      	ldr	r0, [r7, #20]
 8002ca2:	f7ff fdbb 	bl	800281c <_out_rev>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	e207      	b.n	80030ba <_ftoa+0x49a>
  if (value > DBL_MAX)
 8002caa:	f04f 32ff 	mov.w	r2, #4294967295
 8002cae:	4b96      	ldr	r3, [pc, #600]	; (8002f08 <_ftoa+0x2e8>)
 8002cb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cb4:	f7fd fed8 	bl	8000a68 <__aeabi_dcmpgt>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01d      	beq.n	8002cfa <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002cbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <_ftoa+0xac>
 8002cc8:	4b90      	ldr	r3, [pc, #576]	; (8002f0c <_ftoa+0x2ec>)
 8002cca:	e000      	b.n	8002cce <_ftoa+0xae>
 8002ccc:	4b90      	ldr	r3, [pc, #576]	; (8002f10 <_ftoa+0x2f0>)
 8002cce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002cd0:	f002 0204 	and.w	r2, r2, #4
 8002cd4:	2a00      	cmp	r2, #0
 8002cd6:	d001      	beq.n	8002cdc <_ftoa+0xbc>
 8002cd8:	2204      	movs	r2, #4
 8002cda:	e000      	b.n	8002cde <_ftoa+0xbe>
 8002cdc:	2203      	movs	r2, #3
 8002cde:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002ce0:	9103      	str	r1, [sp, #12]
 8002ce2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002ce4:	9102      	str	r1, [sp, #8]
 8002ce6:	9201      	str	r2, [sp, #4]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	6939      	ldr	r1, [r7, #16]
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f7ff fd93 	bl	800281c <_out_rev>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	e1df      	b.n	80030ba <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002cfa:	a37d      	add	r3, pc, #500	; (adr r3, 8002ef0 <_ftoa+0x2d0>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d04:	f7fd feb0 	bl	8000a68 <__aeabi_dcmpgt>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <_ftoa+0x102>
 8002d0e:	a37a      	add	r3, pc, #488	; (adr r3, 8002ef8 <_ftoa+0x2d8>)
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d18:	f7fd fe88 	bl	8000a2c <__aeabi_dcmplt>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00f      	beq.n	8002d42 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d24:	9302      	str	r3, [sp, #8]
 8002d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	ed97 0b00 	vldr	d0, [r7]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	6939      	ldr	r1, [r7, #16]
 8002d38:	6978      	ldr	r0, [r7, #20]
 8002d3a:	f000 f9c9 	bl	80030d0 <_etoa>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	e1bb      	b.n	80030ba <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d54:	f7fd fe6a 	bl	8000a2c <__aeabi_dcmplt>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00e      	beq.n	8002d7c <_ftoa+0x15c>
    negative = true;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8002d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d68:	f04f 0000 	mov.w	r0, #0
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	f7fd fa32 	bl	80001d8 <__aeabi_dsub>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10d      	bne.n	8002da2 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002d86:	2306      	movs	r3, #6
 8002d88:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002d8a:	e00a      	b.n	8002da2 <_ftoa+0x182>
    buf[len++] = '0';
 8002d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d92:	3360      	adds	r3, #96	; 0x60
 8002d94:	443b      	add	r3, r7
 8002d96:	2230      	movs	r2, #48	; 0x30
 8002d98:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da4:	2b1f      	cmp	r3, #31
 8002da6:	d802      	bhi.n	8002dae <_ftoa+0x18e>
 8002da8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002daa:	2b09      	cmp	r3, #9
 8002dac:	d8ee      	bhi.n	8002d8c <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002dae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002db2:	f7fd fe63 	bl	8000a7c <__aeabi_d2iz>
 8002db6:	4603      	mov	r3, r0
 8002db8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8002dba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002dbc:	f7fd fb5a 	bl	8000474 <__aeabi_i2d>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dc8:	f7fd fa06 	bl	80001d8 <__aeabi_dsub>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4a4f      	ldr	r2, [pc, #316]	; (8002f14 <_ftoa+0x2f4>)
 8002dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	f7fd fbb2 	bl	8000548 <__aeabi_dmul>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8002dec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002df0:	f7fd fe6c 	bl	8000acc <__aeabi_d2uiz>
 8002df4:	4603      	mov	r3, r0
 8002df6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8002df8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002dfa:	f7fd fb2b 	bl	8000454 <__aeabi_ui2d>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e06:	f7fd f9e7 	bl	80001d8 <__aeabi_dsub>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	4b40      	ldr	r3, [pc, #256]	; (8002f18 <_ftoa+0x2f8>)
 8002e18:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002e1c:	f7fd fe24 	bl	8000a68 <__aeabi_dcmpgt>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <_ftoa+0x234>
    ++frac;
 8002e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e28:	3301      	adds	r3, #1
 8002e2a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002e2c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002e2e:	f7fd fb11 	bl	8000454 <__aeabi_ui2d>
 8002e32:	4a38      	ldr	r2, [pc, #224]	; (8002f14 <_ftoa+0x2f4>)
 8002e34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	f7fd fe09 	bl	8000a54 <__aeabi_dcmpge>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01a      	beq.n	8002e7e <_ftoa+0x25e>
      frac = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8002e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4e:	3301      	adds	r3, #1
 8002e50:	657b      	str	r3, [r7, #84]	; 0x54
 8002e52:	e014      	b.n	8002e7e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <_ftoa+0x2f8>)
 8002e5a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002e5e:	f7fd fde5 	bl	8000a2c <__aeabi_dcmplt>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <_ftoa+0x258>
 8002e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8002e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d14b      	bne.n	8002f1c <_ftoa+0x2fc>
    diff = value - (double)whole;
 8002e84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002e86:	f7fd faf5 	bl	8000474 <__aeabi_i2d>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e92:	f7fd f9a1 	bl	80001d8 <__aeabi_dsub>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	461c      	mov	r4, r3
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <_ftoa+0x2f8>)
 8002ea8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002eac:	f7fd fdbe 	bl	8000a2c <__aeabi_dcmplt>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <_ftoa+0x29a>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	461c      	mov	r4, r3
 8002eba:	b2e3      	uxtb	r3, r4
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <_ftoa+0x2ba>
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <_ftoa+0x2f8>)
 8002ecc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002ed0:	f7fd fdca 	bl	8000a68 <__aeabi_dcmpgt>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d064      	beq.n	8002fa4 <_ftoa+0x384>
 8002eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8081 	beq.w	8002fe8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee8:	3301      	adds	r3, #1
 8002eea:	657b      	str	r3, [r7, #84]	; 0x54
 8002eec:	e07c      	b.n	8002fe8 <_ftoa+0x3c8>
 8002eee:	bf00      	nop
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	41cdcd65 	.word	0x41cdcd65
 8002ef8:	00000000 	.word	0x00000000
 8002efc:	c1cdcd65 	.word	0xc1cdcd65
 8002f00:	0800c9ec 	.word	0x0800c9ec
 8002f04:	0800c9f0 	.word	0x0800c9f0
 8002f08:	7fefffff 	.word	0x7fefffff
 8002f0c:	0800c9f8 	.word	0x0800c9f8
 8002f10:	0800ca00 	.word	0x0800ca00
 8002f14:	0800cb60 	.word	0x0800cb60
 8002f18:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8002f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002f20:	e01f      	b.n	8002f62 <_ftoa+0x342>
      --count;
 8002f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f24:	3b01      	subs	r3, #1
 8002f26:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002f28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f2a:	4b66      	ldr	r3, [pc, #408]	; (80030c4 <_ftoa+0x4a4>)
 8002f2c:	fba3 2301 	umull	r2, r3, r3, r1
 8002f30:	08da      	lsrs	r2, r3, #3
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	1aca      	subs	r2, r1, r3
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f40:	1c59      	adds	r1, r3, #1
 8002f42:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002f44:	3230      	adds	r2, #48	; 0x30
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	3360      	adds	r3, #96	; 0x60
 8002f4a:	443b      	add	r3, r7
 8002f4c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f52:	4a5c      	ldr	r2, [pc, #368]	; (80030c4 <_ftoa+0x4a4>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	08db      	lsrs	r3, r3, #3
 8002f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f64:	2b1f      	cmp	r3, #31
 8002f66:	d9dc      	bls.n	8002f22 <_ftoa+0x302>
 8002f68:	e009      	b.n	8002f7e <_ftoa+0x35e>
        break;
 8002f6a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002f6c:	e007      	b.n	8002f7e <_ftoa+0x35e>
      buf[len++] = '0';
 8002f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f74:	3360      	adds	r3, #96	; 0x60
 8002f76:	443b      	add	r3, r7
 8002f78:	2230      	movs	r2, #48	; 0x30
 8002f7a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f80:	2b1f      	cmp	r3, #31
 8002f82:	d804      	bhi.n	8002f8e <_ftoa+0x36e>
 8002f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f86:	1e5a      	subs	r2, r3, #1
 8002f88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ef      	bne.n	8002f6e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f90:	2b1f      	cmp	r3, #31
 8002f92:	d829      	bhi.n	8002fe8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8002f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f9a:	3360      	adds	r3, #96	; 0x60
 8002f9c:	443b      	add	r3, r7
 8002f9e:	222e      	movs	r2, #46	; 0x2e
 8002fa0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002fa4:	e020      	b.n	8002fe8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8002fa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fa8:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <_ftoa+0x4a8>)
 8002faa:	fb83 1302 	smull	r1, r3, r3, r2
 8002fae:	1099      	asrs	r1, r3, #2
 8002fb0:	17d3      	asrs	r3, r2, #31
 8002fb2:	1ac9      	subs	r1, r1, r3
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	1ad1      	subs	r1, r2, r3
 8002fbe:	b2ca      	uxtb	r2, r1
 8002fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002fc6:	3230      	adds	r2, #48	; 0x30
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	3360      	adds	r3, #96	; 0x60
 8002fcc:	443b      	add	r3, r7
 8002fce:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd4:	4a3c      	ldr	r2, [pc, #240]	; (80030c8 <_ftoa+0x4a8>)
 8002fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8002fda:	1092      	asrs	r2, r2, #2
 8002fdc:	17db      	asrs	r3, r3, #31
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8002fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fea:	2b1f      	cmp	r3, #31
 8002fec:	d9db      	bls.n	8002fa6 <_ftoa+0x386>
 8002fee:	e000      	b.n	8002ff2 <_ftoa+0x3d2>
      break;
 8002ff0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d123      	bne.n	8003044 <_ftoa+0x424>
 8002ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01e      	beq.n	8003044 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003008:	2b00      	cmp	r3, #0
 800300a:	d014      	beq.n	8003036 <_ftoa+0x416>
 800300c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003010:	2b00      	cmp	r3, #0
 8003012:	d104      	bne.n	800301e <_ftoa+0x3fe>
 8003014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <_ftoa+0x416>
      width--;
 800301e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003020:	3b01      	subs	r3, #1
 8003022:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003024:	e007      	b.n	8003036 <_ftoa+0x416>
      buf[len++] = '0';
 8003026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800302c:	3360      	adds	r3, #96	; 0x60
 800302e:	443b      	add	r3, r7
 8003030:	2230      	movs	r2, #48	; 0x30
 8003032:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003036:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303a:	429a      	cmp	r2, r3
 800303c:	d202      	bcs.n	8003044 <_ftoa+0x424>
 800303e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003040:	2b1f      	cmp	r3, #31
 8003042:	d9f0      	bls.n	8003026 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003046:	2b1f      	cmp	r3, #31
 8003048:	d827      	bhi.n	800309a <_ftoa+0x47a>
    if (negative) {
 800304a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <_ftoa+0x444>
      buf[len++] = '-';
 8003052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003058:	3360      	adds	r3, #96	; 0x60
 800305a:	443b      	add	r3, r7
 800305c:	222d      	movs	r2, #45	; 0x2d
 800305e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003062:	e01a      	b.n	800309a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8003064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800306e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003074:	3360      	adds	r3, #96	; 0x60
 8003076:	443b      	add	r3, r7
 8003078:	222b      	movs	r2, #43	; 0x2b
 800307a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800307e:	e00c      	b.n	800309a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <_ftoa+0x47a>
      buf[len++] = ' ';
 800308a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003090:	3360      	adds	r3, #96	; 0x60
 8003092:	443b      	add	r3, r7
 8003094:	2220      	movs	r2, #32
 8003096:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800309a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800309c:	9303      	str	r3, [sp, #12]
 800309e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a0:	9302      	str	r3, [sp, #8]
 80030a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	f107 0318 	add.w	r3, r7, #24
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	6939      	ldr	r1, [r7, #16]
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7ff fbb2 	bl	800281c <_out_rev>
 80030b8:	4603      	mov	r3, r0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3764      	adds	r7, #100	; 0x64
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	cccccccd 	.word	0xcccccccd
 80030c8:	66666667 	.word	0x66666667
 80030cc:	00000000 	.word	0x00000000

080030d0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80030d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d4:	b09f      	sub	sp, #124	; 0x7c
 80030d6:	af06      	add	r7, sp, #24
 80030d8:	6278      	str	r0, [r7, #36]	; 0x24
 80030da:	6239      	str	r1, [r7, #32]
 80030dc:	61fa      	str	r2, [r7, #28]
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80030e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030ec:	f7fd fc94 	bl	8000a18 <__aeabi_dcmpeq>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d014      	beq.n	8003120 <_etoa+0x50>
 80030f6:	f04f 32ff 	mov.w	r2, #4294967295
 80030fa:	4bc1      	ldr	r3, [pc, #772]	; (8003400 <_etoa+0x330>)
 80030fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003100:	f7fd fcb2 	bl	8000a68 <__aeabi_dcmpgt>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <_etoa+0x50>
 800310a:	f04f 32ff 	mov.w	r2, #4294967295
 800310e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003112:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003116:	f7fd fc89 	bl	8000a2c <__aeabi_dcmplt>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003120:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003124:	9302      	str	r3, [sp, #8]
 8003126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	ed97 0b04 	vldr	d0, [r7, #16]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	6a39      	ldr	r1, [r7, #32]
 800313c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800313e:	f7ff fd6f 	bl	8002c20 <_ftoa>
 8003142:	4603      	mov	r3, r0
 8003144:	e23f      	b.n	80035c6 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8003146:	2301      	movs	r3, #1
 8003148:	461e      	mov	r6, r3
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003156:	f7fd fc69 	bl	8000a2c <__aeabi_dcmplt>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <_etoa+0x94>
 8003160:	2300      	movs	r3, #0
 8003162:	461e      	mov	r6, r3
 8003164:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8003168:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800316c:	2b00      	cmp	r3, #0
 800316e:	d009      	beq.n	8003184 <_etoa+0xb4>
    value = -value;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	ed97 7b00 	vldr	d7, [r7]
 8003180:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003184:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003190:	2306      	movs	r3, #6
 8003192:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003196:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800319a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800319e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	0d0a      	lsrs	r2, r1, #20
 80031ac:	2300      	movs	r3, #0
 80031ae:	4613      	mov	r3, r2
 80031b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80031b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80031ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031be:	4690      	mov	r8, r2
 80031c0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80031c4:	4644      	mov	r4, r8
 80031c6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 80031ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80031ce:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80031d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80031d4:	f7fd f94e 	bl	8000474 <__aeabi_i2d>
 80031d8:	a37d      	add	r3, pc, #500	; (adr r3, 80033d0 <_etoa+0x300>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f7fd f9b3 	bl	8000548 <__aeabi_dmul>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	a37b      	add	r3, pc, #492	; (adr r3, 80033d8 <_etoa+0x308>)
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	f7fc fff4 	bl	80001dc <__adddf3>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4614      	mov	r4, r2
 80031fa:	461d      	mov	r5, r3
 80031fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <_etoa+0x334>)
 8003206:	f7fc ffe7 	bl	80001d8 <__aeabi_dsub>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	a373      	add	r3, pc, #460	; (adr r3, 80033e0 <_etoa+0x310>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f7fd f996 	bl	8000548 <__aeabi_dmul>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4620      	mov	r0, r4
 8003222:	4629      	mov	r1, r5
 8003224:	f7fc ffda 	bl	80001dc <__adddf3>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	f7fd fc24 	bl	8000a7c <__aeabi_d2iz>
 8003234:	4603      	mov	r3, r0
 8003236:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003238:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800323a:	f7fd f91b 	bl	8000474 <__aeabi_i2d>
 800323e:	a36a      	add	r3, pc, #424	; (adr r3, 80033e8 <_etoa+0x318>)
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	f7fd f980 	bl	8000548 <__aeabi_dmul>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	4b6c      	ldr	r3, [pc, #432]	; (8003408 <_etoa+0x338>)
 8003256:	f7fc ffc1 	bl	80001dc <__adddf3>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	f7fd fc0b 	bl	8000a7c <__aeabi_d2iz>
 8003266:	4603      	mov	r3, r0
 8003268:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800326a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800326c:	f7fd f902 	bl	8000474 <__aeabi_i2d>
 8003270:	a35f      	add	r3, pc, #380	; (adr r3, 80033f0 <_etoa+0x320>)
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f7fd f967 	bl	8000548 <__aeabi_dmul>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4614      	mov	r4, r2
 8003280:	461d      	mov	r5, r3
 8003282:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003284:	f7fd f8f6 	bl	8000474 <__aeabi_i2d>
 8003288:	a35b      	add	r3, pc, #364	; (adr r3, 80033f8 <_etoa+0x328>)
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f7fd f95b 	bl	8000548 <__aeabi_dmul>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4620      	mov	r0, r4
 8003298:	4629      	mov	r1, r5
 800329a:	f7fc ff9d 	bl	80001d8 <__aeabi_dsub>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 80032a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032aa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80032ae:	f7fd f94b 	bl	8000548 <__aeabi_dmul>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80032ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032bc:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80032c0:	17da      	asrs	r2, r3, #31
 80032c2:	469a      	mov	sl, r3
 80032c4:	4693      	mov	fp, r2
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80032d2:	2200      	movs	r2, #0
 80032d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80032d8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80032dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	f7fc ff7a 	bl	80001dc <__adddf3>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4690      	mov	r8, r2
 80032ee:	4699      	mov	r9, r3
 80032f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032f4:	f04f 0000 	mov.w	r0, #0
 80032f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80032fc:	f7fc ff6c 	bl	80001d8 <__aeabi_dsub>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4692      	mov	sl, r2
 8003306:	469b      	mov	fp, r3
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	4b3f      	ldr	r3, [pc, #252]	; (800340c <_etoa+0x33c>)
 800330e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003312:	f7fd fa43 	bl	800079c <__aeabi_ddiv>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <_etoa+0x340>)
 8003324:	f7fc ff5a 	bl	80001dc <__adddf3>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003330:	f7fd fa34 	bl	800079c <__aeabi_ddiv>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	4b34      	ldr	r3, [pc, #208]	; (8003414 <_etoa+0x344>)
 8003342:	f7fc ff4b 	bl	80001dc <__adddf3>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800334e:	f7fd fa25 	bl	800079c <__aeabi_ddiv>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4650      	mov	r0, sl
 8003358:	4659      	mov	r1, fp
 800335a:	f7fc ff3f 	bl	80001dc <__adddf3>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4640      	mov	r0, r8
 8003364:	4649      	mov	r1, r9
 8003366:	f7fd fa19 	bl	800079c <__aeabi_ddiv>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	4b28      	ldr	r3, [pc, #160]	; (8003418 <_etoa+0x348>)
 8003378:	f7fc ff30 	bl	80001dc <__adddf3>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4620      	mov	r0, r4
 8003382:	4629      	mov	r1, r5
 8003384:	f7fd f8e0 	bl	8000548 <__aeabi_dmul>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8003390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003394:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003398:	f7fd fb48 	bl	8000a2c <__aeabi_dcmplt>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <_etoa+0x2ee>
    expval--;
 80033a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a4:	3b01      	subs	r3, #1
 80033a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 80033a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <_etoa+0x340>)
 80033b2:	f7fd f9f3 	bl	800079c <__aeabi_ddiv>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	2b63      	cmp	r3, #99	; 0x63
 80033c2:	dc2b      	bgt.n	800341c <_etoa+0x34c>
 80033c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80033ca:	db27      	blt.n	800341c <_etoa+0x34c>
 80033cc:	2304      	movs	r3, #4
 80033ce:	e026      	b.n	800341e <_etoa+0x34e>
 80033d0:	509f79fb 	.word	0x509f79fb
 80033d4:	3fd34413 	.word	0x3fd34413
 80033d8:	8b60c8b3 	.word	0x8b60c8b3
 80033dc:	3fc68a28 	.word	0x3fc68a28
 80033e0:	636f4361 	.word	0x636f4361
 80033e4:	3fd287a7 	.word	0x3fd287a7
 80033e8:	0979a371 	.word	0x0979a371
 80033ec:	400a934f 	.word	0x400a934f
 80033f0:	bbb55516 	.word	0xbbb55516
 80033f4:	40026bb1 	.word	0x40026bb1
 80033f8:	fefa39ef 	.word	0xfefa39ef
 80033fc:	3fe62e42 	.word	0x3fe62e42
 8003400:	7fefffff 	.word	0x7fefffff
 8003404:	3ff80000 	.word	0x3ff80000
 8003408:	3fe00000 	.word	0x3fe00000
 800340c:	402c0000 	.word	0x402c0000
 8003410:	40240000 	.word	0x40240000
 8003414:	40180000 	.word	0x40180000
 8003418:	3ff00000 	.word	0x3ff00000
 800341c:	2305      	movs	r3, #5
 800341e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003420:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003428:	2b00      	cmp	r3, #0
 800342a:	d03d      	beq.n	80034a8 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800342c:	a368      	add	r3, pc, #416	; (adr r3, 80035d0 <_etoa+0x500>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003436:	f7fd fb0d 	bl	8000a54 <__aeabi_dcmpge>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d024      	beq.n	800348a <_etoa+0x3ba>
 8003440:	a365      	add	r3, pc, #404	; (adr r3, 80035d8 <_etoa+0x508>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800344a:	f7fd faef 	bl	8000a2c <__aeabi_dcmplt>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01a      	beq.n	800348a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8003454:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003458:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800345a:	429a      	cmp	r2, r3
 800345c:	da07      	bge.n	800346e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800345e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800346c:	e002      	b.n	8003474 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003474:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800347c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003488:	e00e      	b.n	80034a8 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800348a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <_etoa+0x3d8>
 8003492:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <_etoa+0x3d8>
        --prec;
 800349e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034a2:	3b01      	subs	r3, #1
 80034a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80034a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 80034ae:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80034b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d904      	bls.n	80034c2 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80034b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	657b      	str	r3, [r7, #84]	; 0x54
 80034c0:	e001      	b.n	80034c6 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80034c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <_etoa+0x40c>
 80034d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 80034dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <_etoa+0x426>
    value /= conv.F;
 80034e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034ea:	f7fd f957 	bl	800079c <__aeabi_ddiv>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80034fa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <_etoa+0x440>
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	e003      	b.n	8003518 <_etoa+0x448>
 8003510:	ed97 7b04 	vldr	d7, [r7, #16]
 8003514:	ed87 7b02 	vstr	d7, [r7, #8]
 8003518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800351c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003520:	9302      	str	r3, [sp, #8]
 8003522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	ed97 0b02 	vldr	d0, [r7, #8]
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	6a39      	ldr	r1, [r7, #32]
 8003536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003538:	f7ff fb72 	bl	8002c20 <_ftoa>
 800353c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800353e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003540:	2b00      	cmp	r3, #0
 8003542:	d03f      	beq.n	80035c4 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003544:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <_etoa+0x484>
 8003550:	2045      	movs	r0, #69	; 0x45
 8003552:	e000      	b.n	8003556 <_etoa+0x486>
 8003554:	2065      	movs	r0, #101	; 0x65
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	1c53      	adds	r3, r2, #1
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	6a39      	ldr	r1, [r7, #32]
 8003562:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003566:	2b00      	cmp	r3, #0
 8003568:	bfb8      	it	lt
 800356a:	425b      	neglt	r3, r3
 800356c:	4618      	mov	r0, r3
 800356e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003570:	0fdb      	lsrs	r3, r3, #31
 8003572:	b2db      	uxtb	r3, r3
 8003574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003576:	3a01      	subs	r2, #1
 8003578:	2105      	movs	r1, #5
 800357a:	9105      	str	r1, [sp, #20]
 800357c:	9204      	str	r2, [sp, #16]
 800357e:	2200      	movs	r2, #0
 8003580:	9203      	str	r2, [sp, #12]
 8003582:	220a      	movs	r2, #10
 8003584:	9202      	str	r2, [sp, #8]
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	9000      	str	r0, [sp, #0]
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	6a39      	ldr	r1, [r7, #32]
 8003590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003592:	f7ff fa6f 	bl	8002a74 <_ntoa_long>
 8003596:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003598:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00f      	beq.n	80035c4 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80035a4:	e007      	b.n	80035b6 <_etoa+0x4e6>
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	1c53      	adds	r3, r2, #1
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	6a39      	ldr	r1, [r7, #32]
 80035b2:	2020      	movs	r0, #32
 80035b4:	47a0      	blx	r4
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d8f0      	bhi.n	80035a6 <_etoa+0x4d6>
    }
  }
  return idx;
 80035c4:	69fb      	ldr	r3, [r7, #28]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3764      	adds	r7, #100	; 0x64
 80035ca:	46bd      	mov	sp, r7
 80035cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d0:	eb1c432d 	.word	0xeb1c432d
 80035d4:	3f1a36e2 	.word	0x3f1a36e2
 80035d8:	00000000 	.word	0x00000000
 80035dc:	412e8480 	.word	0x412e8480

080035e0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80035e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e4:	b0a3      	sub	sp, #140	; 0x8c
 80035e6:	af0a      	add	r7, sp, #40	; 0x28
 80035e8:	6178      	str	r0, [r7, #20]
 80035ea:	6139      	str	r1, [r7, #16]
 80035ec:	60fa      	str	r2, [r7, #12]
 80035ee:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 84be 	bne.w	8003f78 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 80035fc:	4ba3      	ldr	r3, [pc, #652]	; (800388c <_vsnprintf+0x2ac>)
 80035fe:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003600:	f000 bcba 	b.w	8003f78 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b25      	cmp	r3, #37	; 0x25
 800360a:	d00d      	beq.n	8003628 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	7818      	ldrb	r0, [r3, #0]
 8003610:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003612:	1c53      	adds	r3, r2, #1
 8003614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003616:	697c      	ldr	r4, [r7, #20]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6939      	ldr	r1, [r7, #16]
 800361c:	47a0      	blx	r4
      format++;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3301      	adds	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
      continue;
 8003624:	f000 bca8 	b.w	8003f78 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	3301      	adds	r3, #1
 800362c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	3b20      	subs	r3, #32
 8003638:	2b10      	cmp	r3, #16
 800363a:	d857      	bhi.n	80036ec <_vsnprintf+0x10c>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <_vsnprintf+0x64>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	080036c5 	.word	0x080036c5
 8003648:	080036ed 	.word	0x080036ed
 800364c:	080036ed 	.word	0x080036ed
 8003650:	080036d9 	.word	0x080036d9
 8003654:	080036ed 	.word	0x080036ed
 8003658:	080036ed 	.word	0x080036ed
 800365c:	080036ed 	.word	0x080036ed
 8003660:	080036ed 	.word	0x080036ed
 8003664:	080036ed 	.word	0x080036ed
 8003668:	080036ed 	.word	0x080036ed
 800366c:	080036ed 	.word	0x080036ed
 8003670:	080036b1 	.word	0x080036b1
 8003674:	080036ed 	.word	0x080036ed
 8003678:	0800369d 	.word	0x0800369d
 800367c:	080036ed 	.word	0x080036ed
 8003680:	080036ed 	.word	0x080036ed
 8003684:	08003689 	.word	0x08003689
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	3301      	adds	r3, #1
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	2301      	movs	r3, #1
 8003698:	653b      	str	r3, [r7, #80]	; 0x50
 800369a:	e02a      	b.n	80036f2 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800369c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369e:	f043 0302 	orr.w	r3, r3, #2
 80036a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	3301      	adds	r3, #1
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	2301      	movs	r3, #1
 80036ac:	653b      	str	r3, [r7, #80]	; 0x50
 80036ae:	e020      	b.n	80036f2 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80036b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	3301      	adds	r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	2301      	movs	r3, #1
 80036c0:	653b      	str	r3, [r7, #80]	; 0x50
 80036c2:	e016      	b.n	80036f2 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80036c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c6:	f043 0308 	orr.w	r3, r3, #8
 80036ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	3301      	adds	r3, #1
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	2301      	movs	r3, #1
 80036d4:	653b      	str	r3, [r7, #80]	; 0x50
 80036d6:	e00c      	b.n	80036f2 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80036d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036da:	f043 0310 	orr.w	r3, r3, #16
 80036de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	3301      	adds	r3, #1
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	2301      	movs	r3, #1
 80036e8:	653b      	str	r3, [r7, #80]	; 0x50
 80036ea:	e002      	b.n	80036f2 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80036ec:	2300      	movs	r3, #0
 80036ee:	653b      	str	r3, [r7, #80]	; 0x50
 80036f0:	bf00      	nop
      }
    } while (n);
 80036f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d19c      	bne.n	8003632 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff f850 	bl	80027a6 <_is_digit>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <_vsnprintf+0x13a>
      width = _atoi(&format);
 800370c:	f107 0308 	add.w	r3, r7, #8
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff f85f 	bl	80027d4 <_atoi>
 8003716:	65b8      	str	r0, [r7, #88]	; 0x58
 8003718:	e01a      	b.n	8003750 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b2a      	cmp	r3, #42	; 0x2a
 8003720:	d116      	bne.n	8003750 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8003722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003726:	1d1a      	adds	r2, r3, #4
 8003728:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8003730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003732:	2b00      	cmp	r3, #0
 8003734:	da07      	bge.n	8003746 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8003736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	425b      	negs	r3, r3
 8003742:	65bb      	str	r3, [r7, #88]	; 0x58
 8003744:	e001      	b.n	800374a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3301      	adds	r3, #1
 800374e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b2e      	cmp	r3, #46	; 0x2e
 800375a:	d127      	bne.n	80037ac <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800375c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800375e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003762:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	3301      	adds	r3, #1
 8003768:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff f819 	bl	80027a6 <_is_digit>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800377a:	f107 0308 	add.w	r3, r7, #8
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff f828 	bl	80027d4 <_atoi>
 8003784:	6578      	str	r0, [r7, #84]	; 0x54
 8003786:	e011      	b.n	80037ac <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b2a      	cmp	r3, #42	; 0x2a
 800378e:	d10d      	bne.n	80037ac <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003794:	1d1a      	adds	r2, r3, #4
 8003796:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80037a4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	3301      	adds	r3, #1
 80037aa:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	3b68      	subs	r3, #104	; 0x68
 80037b2:	2b12      	cmp	r3, #18
 80037b4:	d866      	bhi.n	8003884 <_vsnprintf+0x2a4>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <_vsnprintf+0x1dc>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	0800382f 	.word	0x0800382f
 80037c0:	08003885 	.word	0x08003885
 80037c4:	08003865 	.word	0x08003865
 80037c8:	08003885 	.word	0x08003885
 80037cc:	08003809 	.word	0x08003809
 80037d0:	08003885 	.word	0x08003885
 80037d4:	08003885 	.word	0x08003885
 80037d8:	08003885 	.word	0x08003885
 80037dc:	08003885 	.word	0x08003885
 80037e0:	08003885 	.word	0x08003885
 80037e4:	08003885 	.word	0x08003885
 80037e8:	08003885 	.word	0x08003885
 80037ec:	08003855 	.word	0x08003855
 80037f0:	08003885 	.word	0x08003885
 80037f4:	08003885 	.word	0x08003885
 80037f8:	08003885 	.word	0x08003885
 80037fc:	08003885 	.word	0x08003885
 8003800:	08003885 	.word	0x08003885
 8003804:	08003875 	.word	0x08003875
      case 'l' :
        flags |= FLAGS_LONG;
 8003808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	3301      	adds	r3, #1
 8003814:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b6c      	cmp	r3, #108	; 0x6c
 800381c:	d134      	bne.n	8003888 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800381e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003824:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3301      	adds	r3, #1
 800382a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800382c:	e02c      	b.n	8003888 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800382e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003834:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3301      	adds	r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b68      	cmp	r3, #104	; 0x68
 8003842:	d125      	bne.n	8003890 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8003844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800384a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	3301      	adds	r3, #1
 8003850:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003852:	e01d      	b.n	8003890 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3301      	adds	r3, #1
 8003860:	60bb      	str	r3, [r7, #8]
        break;
 8003862:	e016      	b.n	8003892 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800386a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3301      	adds	r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
        break;
 8003872:	e00e      	b.n	8003892 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	3301      	adds	r3, #1
 8003880:	60bb      	str	r3, [r7, #8]
        break;
 8003882:	e006      	b.n	8003892 <_vsnprintf+0x2b2>
      default :
        break;
 8003884:	bf00      	nop
 8003886:	e004      	b.n	8003892 <_vsnprintf+0x2b2>
        break;
 8003888:	bf00      	nop
 800388a:	e002      	b.n	8003892 <_vsnprintf+0x2b2>
 800388c:	0800272b 	.word	0x0800272b
        break;
 8003890:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	3b25      	subs	r3, #37	; 0x25
 8003898:	2b53      	cmp	r3, #83	; 0x53
 800389a:	f200 8360 	bhi.w	8003f5e <_vsnprintf+0x97e>
 800389e:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <_vsnprintf+0x2c4>)
 80038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a4:	08003f47 	.word	0x08003f47
 80038a8:	08003f5f 	.word	0x08003f5f
 80038ac:	08003f5f 	.word	0x08003f5f
 80038b0:	08003f5f 	.word	0x08003f5f
 80038b4:	08003f5f 	.word	0x08003f5f
 80038b8:	08003f5f 	.word	0x08003f5f
 80038bc:	08003f5f 	.word	0x08003f5f
 80038c0:	08003f5f 	.word	0x08003f5f
 80038c4:	08003f5f 	.word	0x08003f5f
 80038c8:	08003f5f 	.word	0x08003f5f
 80038cc:	08003f5f 	.word	0x08003f5f
 80038d0:	08003f5f 	.word	0x08003f5f
 80038d4:	08003f5f 	.word	0x08003f5f
 80038d8:	08003f5f 	.word	0x08003f5f
 80038dc:	08003f5f 	.word	0x08003f5f
 80038e0:	08003f5f 	.word	0x08003f5f
 80038e4:	08003f5f 	.word	0x08003f5f
 80038e8:	08003f5f 	.word	0x08003f5f
 80038ec:	08003f5f 	.word	0x08003f5f
 80038f0:	08003f5f 	.word	0x08003f5f
 80038f4:	08003f5f 	.word	0x08003f5f
 80038f8:	08003f5f 	.word	0x08003f5f
 80038fc:	08003f5f 	.word	0x08003f5f
 8003900:	08003f5f 	.word	0x08003f5f
 8003904:	08003f5f 	.word	0x08003f5f
 8003908:	08003f5f 	.word	0x08003f5f
 800390c:	08003f5f 	.word	0x08003f5f
 8003910:	08003f5f 	.word	0x08003f5f
 8003914:	08003f5f 	.word	0x08003f5f
 8003918:	08003f5f 	.word	0x08003f5f
 800391c:	08003f5f 	.word	0x08003f5f
 8003920:	08003f5f 	.word	0x08003f5f
 8003924:	08003cfb 	.word	0x08003cfb
 8003928:	08003cab 	.word	0x08003cab
 800392c:	08003cfb 	.word	0x08003cfb
 8003930:	08003f5f 	.word	0x08003f5f
 8003934:	08003f5f 	.word	0x08003f5f
 8003938:	08003f5f 	.word	0x08003f5f
 800393c:	08003f5f 	.word	0x08003f5f
 8003940:	08003f5f 	.word	0x08003f5f
 8003944:	08003f5f 	.word	0x08003f5f
 8003948:	08003f5f 	.word	0x08003f5f
 800394c:	08003f5f 	.word	0x08003f5f
 8003950:	08003f5f 	.word	0x08003f5f
 8003954:	08003f5f 	.word	0x08003f5f
 8003958:	08003f5f 	.word	0x08003f5f
 800395c:	08003f5f 	.word	0x08003f5f
 8003960:	08003f5f 	.word	0x08003f5f
 8003964:	08003f5f 	.word	0x08003f5f
 8003968:	08003f5f 	.word	0x08003f5f
 800396c:	08003f5f 	.word	0x08003f5f
 8003970:	080039f5 	.word	0x080039f5
 8003974:	08003f5f 	.word	0x08003f5f
 8003978:	08003f5f 	.word	0x08003f5f
 800397c:	08003f5f 	.word	0x08003f5f
 8003980:	08003f5f 	.word	0x08003f5f
 8003984:	08003f5f 	.word	0x08003f5f
 8003988:	08003f5f 	.word	0x08003f5f
 800398c:	08003f5f 	.word	0x08003f5f
 8003990:	08003f5f 	.word	0x08003f5f
 8003994:	08003f5f 	.word	0x08003f5f
 8003998:	080039f5 	.word	0x080039f5
 800399c:	08003d6b 	.word	0x08003d6b
 80039a0:	080039f5 	.word	0x080039f5
 80039a4:	08003cfb 	.word	0x08003cfb
 80039a8:	08003cab 	.word	0x08003cab
 80039ac:	08003cfb 	.word	0x08003cfb
 80039b0:	08003f5f 	.word	0x08003f5f
 80039b4:	080039f5 	.word	0x080039f5
 80039b8:	08003f5f 	.word	0x08003f5f
 80039bc:	08003f5f 	.word	0x08003f5f
 80039c0:	08003f5f 	.word	0x08003f5f
 80039c4:	08003f5f 	.word	0x08003f5f
 80039c8:	08003f5f 	.word	0x08003f5f
 80039cc:	080039f5 	.word	0x080039f5
 80039d0:	08003eab 	.word	0x08003eab
 80039d4:	08003f5f 	.word	0x08003f5f
 80039d8:	08003f5f 	.word	0x08003f5f
 80039dc:	08003de3 	.word	0x08003de3
 80039e0:	08003f5f 	.word	0x08003f5f
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003f5f 	.word	0x08003f5f
 80039ec:	08003f5f 	.word	0x08003f5f
 80039f0:	080039f5 	.word	0x080039f5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b78      	cmp	r3, #120	; 0x78
 80039fa:	d003      	beq.n	8003a04 <_vsnprintf+0x424>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b58      	cmp	r3, #88	; 0x58
 8003a02:	d102      	bne.n	8003a0a <_vsnprintf+0x42a>
          base = 16U;
 8003a04:	2310      	movs	r3, #16
 8003a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a08:	e013      	b.n	8003a32 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b6f      	cmp	r3, #111	; 0x6f
 8003a10:	d102      	bne.n	8003a18 <_vsnprintf+0x438>
          base =  8U;
 8003a12:	2308      	movs	r3, #8
 8003a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a16:	e00c      	b.n	8003a32 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b62      	cmp	r3, #98	; 0x62
 8003a1e:	d102      	bne.n	8003a26 <_vsnprintf+0x446>
          base =  2U;
 8003a20:	2302      	movs	r3, #2
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a24:	e005      	b.n	8003a32 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8003a26:	230a      	movs	r3, #10
 8003a28:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2c:	f023 0310 	bic.w	r3, r3, #16
 8003a30:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b58      	cmp	r3, #88	; 0x58
 8003a38:	d103      	bne.n	8003a42 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8003a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a3c:	f043 0320 	orr.w	r3, r3, #32
 8003a40:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b69      	cmp	r3, #105	; 0x69
 8003a48:	d007      	beq.n	8003a5a <_vsnprintf+0x47a>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d003      	beq.n	8003a5a <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a54:	f023 030c 	bic.w	r3, r3, #12
 8003a58:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8003a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b69      	cmp	r3, #105	; 0x69
 8003a72:	d004      	beq.n	8003a7e <_vsnprintf+0x49e>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b64      	cmp	r3, #100	; 0x64
 8003a7a:	f040 8098 	bne.w	8003bae <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d031      	beq.n	8003aec <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a8c:	3307      	adds	r3, #7
 8003a8e:	f023 0307 	bic.w	r3, r3, #7
 8003a92:	f103 0208 	add.w	r2, r3, #8
 8003a96:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	da06      	bge.n	8003ab8 <_vsnprintf+0x4d8>
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f1d2 0800 	rsbs	r8, r2, #0
 8003ab0:	eb61 0903 	sbc.w	r9, r1, r3
 8003ab4:	4642      	mov	r2, r8
 8003ab6:	464b      	mov	r3, r9
 8003ab8:	69f9      	ldr	r1, [r7, #28]
 8003aba:	0fc9      	lsrs	r1, r1, #31
 8003abc:	b2c9      	uxtb	r1, r1
 8003abe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ac0:	2400      	movs	r4, #0
 8003ac2:	4682      	mov	sl, r0
 8003ac4:	46a3      	mov	fp, r4
 8003ac6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003ac8:	9008      	str	r0, [sp, #32]
 8003aca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003acc:	9007      	str	r0, [sp, #28]
 8003ace:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003ad0:	9006      	str	r0, [sp, #24]
 8003ad2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003ad6:	9102      	str	r1, [sp, #8]
 8003ad8:	e9cd 2300 	strd	r2, r3, [sp]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ae0:	6939      	ldr	r1, [r7, #16]
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7ff f82c 	bl	8002b40 <_ntoa_long_long>
 8003ae8:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003aea:	e0da      	b.n	8003ca2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d020      	beq.n	8003b38 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8003af6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003afa:	1d1a      	adds	r2, r3, #4
 8003afc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bfb8      	it	lt
 8003b0a:	425b      	neglt	r3, r3
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	0fdb      	lsrs	r3, r3, #31
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b16:	9205      	str	r2, [sp, #20]
 8003b18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b1a:	9204      	str	r2, [sp, #16]
 8003b1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b1e:	9203      	str	r2, [sp, #12]
 8003b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b22:	9202      	str	r2, [sp, #8]
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	9100      	str	r1, [sp, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b2c:	6939      	ldr	r1, [r7, #16]
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7fe ffa0 	bl	8002a74 <_ntoa_long>
 8003b34:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003b36:	e0b4      	b.n	8003ca2 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <_vsnprintf+0x572>
 8003b42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b46:	1d1a      	adds	r2, r3, #4
 8003b48:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	e012      	b.n	8003b78 <_vsnprintf+0x598>
 8003b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <_vsnprintf+0x58c>
 8003b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b60:	1d1a      	adds	r2, r3, #4
 8003b62:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	b21b      	sxth	r3, r3
 8003b6a:	e005      	b.n	8003b78 <_vsnprintf+0x598>
 8003b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b70:	1d1a      	adds	r2, r3, #4
 8003b72:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bfb8      	it	lt
 8003b80:	425b      	neglt	r3, r3
 8003b82:	4619      	mov	r1, r3
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	0fdb      	lsrs	r3, r3, #31
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b8c:	9205      	str	r2, [sp, #20]
 8003b8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b90:	9204      	str	r2, [sp, #16]
 8003b92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b94:	9203      	str	r2, [sp, #12]
 8003b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b98:	9202      	str	r2, [sp, #8]
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	9100      	str	r1, [sp, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ba2:	6939      	ldr	r1, [r7, #16]
 8003ba4:	6978      	ldr	r0, [r7, #20]
 8003ba6:	f7fe ff65 	bl	8002a74 <_ntoa_long>
 8003baa:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003bac:	e079      	b.n	8003ca2 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d022      	beq.n	8003bfe <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bbc:	3307      	adds	r3, #7
 8003bbe:	f023 0307 	bic.w	r3, r3, #7
 8003bc2:	f103 0208 	add.w	r2, r3, #8
 8003bc6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	460d      	mov	r5, r1
 8003bd4:	4606      	mov	r6, r0
 8003bd6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003bd8:	9108      	str	r1, [sp, #32]
 8003bda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bdc:	9107      	str	r1, [sp, #28]
 8003bde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003be0:	9106      	str	r1, [sp, #24]
 8003be2:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003be6:	2100      	movs	r1, #0
 8003be8:	9102      	str	r1, [sp, #8]
 8003bea:	e9cd 2300 	strd	r2, r3, [sp]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bf2:	6939      	ldr	r1, [r7, #16]
 8003bf4:	6978      	ldr	r0, [r7, #20]
 8003bf6:	f7fe ffa3 	bl	8002b40 <_ntoa_long_long>
 8003bfa:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003bfc:	e051      	b.n	8003ca2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d018      	beq.n	8003c3a <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c0c:	1d1a      	adds	r2, r3, #4
 8003c0e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c16:	9205      	str	r2, [sp, #20]
 8003c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c1a:	9204      	str	r2, [sp, #16]
 8003c1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c1e:	9203      	str	r2, [sp, #12]
 8003c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c22:	9202      	str	r2, [sp, #8]
 8003c24:	2200      	movs	r2, #0
 8003c26:	9201      	str	r2, [sp, #4]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c2e:	6939      	ldr	r1, [r7, #16]
 8003c30:	6978      	ldr	r0, [r7, #20]
 8003c32:	f7fe ff1f 	bl	8002a74 <_ntoa_long>
 8003c36:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003c38:	e033      	b.n	8003ca2 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <_vsnprintf+0x674>
 8003c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c48:	1d1a      	adds	r2, r3, #4
 8003c4a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e012      	b.n	8003c7a <_vsnprintf+0x69a>
 8003c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <_vsnprintf+0x68e>
 8003c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c62:	1d1a      	adds	r2, r3, #4
 8003c64:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	e005      	b.n	8003c7a <_vsnprintf+0x69a>
 8003c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c72:	1d1a      	adds	r2, r3, #4
 8003c74:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c7e:	9305      	str	r3, [sp, #20]
 8003c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c82:	9304      	str	r3, [sp, #16]
 8003c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c86:	9303      	str	r3, [sp, #12]
 8003c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8a:	9302      	str	r3, [sp, #8]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c98:	6939      	ldr	r1, [r7, #16]
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7fe feea 	bl	8002a74 <_ntoa_long>
 8003ca0:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	60bb      	str	r3, [r7, #8]
        break;
 8003ca8:	e166      	b.n	8003f78 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b46      	cmp	r3, #70	; 0x46
 8003cb0:	d103      	bne.n	8003cba <_vsnprintf+0x6da>
 8003cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb4:	f043 0320 	orr.w	r3, r3, #32
 8003cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cbe:	3307      	adds	r3, #7
 8003cc0:	f023 0307 	bic.w	r3, r3, #7
 8003cc4:	f103 0208 	add.w	r2, r3, #8
 8003cc8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003ccc:	ed93 7b00 	vldr	d7, [r3]
 8003cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd2:	9302      	str	r3, [sp, #8]
 8003cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ce0:	eef0 0a67 	vmov.f32	s1, s15
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ce8:	6939      	ldr	r1, [r7, #16]
 8003cea:	6978      	ldr	r0, [r7, #20]
 8003cec:	f7fe ff98 	bl	8002c20 <_ftoa>
 8003cf0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60bb      	str	r3, [r7, #8]
        break;
 8003cf8:	e13e      	b.n	8003f78 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b67      	cmp	r3, #103	; 0x67
 8003d00:	d003      	beq.n	8003d0a <_vsnprintf+0x72a>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b47      	cmp	r3, #71	; 0x47
 8003d08:	d103      	bne.n	8003d12 <_vsnprintf+0x732>
 8003d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d10:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b45      	cmp	r3, #69	; 0x45
 8003d18:	d003      	beq.n	8003d22 <_vsnprintf+0x742>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b47      	cmp	r3, #71	; 0x47
 8003d20:	d103      	bne.n	8003d2a <_vsnprintf+0x74a>
 8003d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d24:	f043 0320 	orr.w	r3, r3, #32
 8003d28:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d2e:	3307      	adds	r3, #7
 8003d30:	f023 0307 	bic.w	r3, r3, #7
 8003d34:	f103 0208 	add.w	r2, r3, #8
 8003d38:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003d3c:	ed93 7b00 	vldr	d7, [r3]
 8003d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d42:	9302      	str	r3, [sp, #8]
 8003d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d50:	eef0 0a67 	vmov.f32	s1, s15
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d58:	6939      	ldr	r1, [r7, #16]
 8003d5a:	6978      	ldr	r0, [r7, #20]
 8003d5c:	f7ff f9b8 	bl	80030d0 <_etoa>
 8003d60:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	3301      	adds	r3, #1
 8003d66:	60bb      	str	r3, [r7, #8]
        break;
 8003d68:	e106      	b.n	8003f78 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10e      	bne.n	8003d96 <_vsnprintf+0x7b6>
          while (l++ < width) {
 8003d78:	e007      	b.n	8003d8a <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8003d7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d7c:	1c53      	adds	r3, r2, #1
 8003d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d80:	697c      	ldr	r4, [r7, #20]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6939      	ldr	r1, [r7, #16]
 8003d86:	2020      	movs	r0, #32
 8003d88:	47a0      	blx	r4
          while (l++ < width) {
 8003d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	647a      	str	r2, [r7, #68]	; 0x44
 8003d90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d8f1      	bhi.n	8003d7a <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d9a:	1d1a      	adds	r2, r3, #4
 8003d9c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	b2d8      	uxtb	r0, r3
 8003da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003da6:	1c53      	adds	r3, r2, #1
 8003da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003daa:	697c      	ldr	r4, [r7, #20]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6939      	ldr	r1, [r7, #16]
 8003db0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00e      	beq.n	8003dda <_vsnprintf+0x7fa>
          while (l++ < width) {
 8003dbc:	e007      	b.n	8003dce <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 8003dbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dc0:	1c53      	adds	r3, r2, #1
 8003dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc4:	697c      	ldr	r4, [r7, #20]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6939      	ldr	r1, [r7, #16]
 8003dca:	2020      	movs	r0, #32
 8003dcc:	47a0      	blx	r4
          while (l++ < width) {
 8003dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	647a      	str	r2, [r7, #68]	; 0x44
 8003dd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d8f1      	bhi.n	8003dbe <_vsnprintf+0x7de>
          }
        }
        format++;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
        break;
 8003de0:	e0ca      	b.n	8003f78 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003de6:	1d1a      	adds	r2, r3, #4
 8003de8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <_vsnprintf+0x81a>
 8003df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df8:	e001      	b.n	8003dfe <_vsnprintf+0x81e>
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003e02:	f7fe fcb3 	bl	800276c <_strnlen_s>
 8003e06:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 8003e12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e16:	4293      	cmp	r3, r2
 8003e18:	bf28      	it	cs
 8003e1a:	4613      	movcs	r3, r2
 8003e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d11a      	bne.n	8003e5e <_vsnprintf+0x87e>
          while (l++ < width) {
 8003e28:	e007      	b.n	8003e3a <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 8003e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e2c:	1c53      	adds	r3, r2, #1
 8003e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e30:	697c      	ldr	r4, [r7, #20]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6939      	ldr	r1, [r7, #16]
 8003e36:	2020      	movs	r0, #32
 8003e38:	47a0      	blx	r4
          while (l++ < width) {
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d8f1      	bhi.n	8003e2a <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003e46:	e00a      	b.n	8003e5e <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8003e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	643a      	str	r2, [r7, #64]	; 0x40
 8003e4e:	7818      	ldrb	r0, [r3, #0]
 8003e50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e52:	1c53      	adds	r3, r2, #1
 8003e54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e56:	697c      	ldr	r4, [r7, #20]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6939      	ldr	r1, [r7, #16]
 8003e5c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <_vsnprintf+0x89a>
 8003e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0eb      	beq.n	8003e48 <_vsnprintf+0x868>
 8003e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e72:	1e5a      	subs	r2, r3, #1
 8003e74:	657a      	str	r2, [r7, #84]	; 0x54
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e6      	bne.n	8003e48 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00e      	beq.n	8003ea2 <_vsnprintf+0x8c2>
          while (l++ < width) {
 8003e84:	e007      	b.n	8003e96 <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 8003e86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e88:	1c53      	adds	r3, r2, #1
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e8c:	697c      	ldr	r4, [r7, #20]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6939      	ldr	r1, [r7, #16]
 8003e92:	2020      	movs	r0, #32
 8003e94:	47a0      	blx	r4
          while (l++ < width) {
 8003e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d8f1      	bhi.n	8003e86 <_vsnprintf+0x8a6>
          }
        }
        format++;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	60bb      	str	r3, [r7, #8]
        break;
 8003ea8:	e066      	b.n	8003f78 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003eaa:	2308      	movs	r3, #8
 8003eac:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8003ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d023      	beq.n	8003f0c <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ec8:	1d1a      	adds	r2, r3, #4
 8003eca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	603a      	str	r2, [r7, #0]
 8003ed6:	607b      	str	r3, [r7, #4]
 8003ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eda:	9308      	str	r3, [sp, #32]
 8003edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ede:	9307      	str	r3, [sp, #28]
 8003ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee2:	9306      	str	r3, [sp, #24]
 8003ee4:	f04f 0210 	mov.w	r2, #16
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	9302      	str	r3, [sp, #8]
 8003ef4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ef8:	e9cd 3400 	strd	r3, r4, [sp]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f00:	6939      	ldr	r1, [r7, #16]
 8003f02:	6978      	ldr	r0, [r7, #20]
 8003f04:	f7fe fe1c 	bl	8002b40 <_ntoa_long_long>
 8003f08:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003f0a:	e018      	b.n	8003f3e <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f10:	1d1a      	adds	r2, r3, #4
 8003f12:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f1c:	9305      	str	r3, [sp, #20]
 8003f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f20:	9304      	str	r3, [sp, #16]
 8003f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f24:	9303      	str	r3, [sp, #12]
 8003f26:	2310      	movs	r3, #16
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	9200      	str	r2, [sp, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f34:	6939      	ldr	r1, [r7, #16]
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7fe fd9c 	bl	8002a74 <_ntoa_long>
 8003f3c:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	3301      	adds	r3, #1
 8003f42:	60bb      	str	r3, [r7, #8]
        break;
 8003f44:	e018      	b.n	8003f78 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003f46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f48:	1c53      	adds	r3, r2, #1
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f4c:	697c      	ldr	r4, [r7, #20]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6939      	ldr	r1, [r7, #16]
 8003f52:	2025      	movs	r0, #37	; 0x25
 8003f54:	47a0      	blx	r4
        format++;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	60bb      	str	r3, [r7, #8]
        break;
 8003f5c:	e00c      	b.n	8003f78 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	7818      	ldrb	r0, [r3, #0]
 8003f62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f64:	1c53      	adds	r3, r2, #1
 8003f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f68:	697c      	ldr	r4, [r7, #20]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6939      	ldr	r1, [r7, #16]
 8003f6e:	47a0      	blx	r4
        format++;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3301      	adds	r3, #1
 8003f74:	60bb      	str	r3, [r7, #8]
        break;
 8003f76:	bf00      	nop
  while (*format)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f47f ab41 	bne.w	8003604 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003f82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d302      	bcc.n	8003f90 <_vsnprintf+0x9b0>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1e5a      	subs	r2, r3, #1
 8003f8e:	e000      	b.n	8003f92 <_vsnprintf+0x9b2>
 8003f90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f92:	697c      	ldr	r4, [r7, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6939      	ldr	r1, [r7, #16]
 8003f98:	2000      	movs	r0, #0
 8003f9a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3764      	adds	r7, #100	; 0x64
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003fa8 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003fa8:	b40f      	push	{r0, r1, r2, r3}
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b086      	sub	sp, #24
 8003fae:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8003fb0:	f107 031c 	add.w	r3, r7, #28
 8003fb4:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003fb6:	1d39      	adds	r1, r7, #4
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc2:	4806      	ldr	r0, [pc, #24]	; (8003fdc <printf_+0x34>)
 8003fc4:	f7ff fb0c 	bl	80035e0 <_vsnprintf>
 8003fc8:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003fca:	68fb      	ldr	r3, [r7, #12]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fd6:	b004      	add	sp, #16
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	08002747 	.word	0x08002747

08003fe0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <MX_SPI1_Init+0x74>)
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <MX_SPI1_Init+0x78>)
 8003fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fea:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <MX_SPI1_Init+0x74>)
 8003fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ff2:	4b18      	ldr	r3, [pc, #96]	; (8004054 <MX_SPI1_Init+0x74>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ff8:	4b16      	ldr	r3, [pc, #88]	; (8004054 <MX_SPI1_Init+0x74>)
 8003ffa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ffe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <MX_SPI1_Init+0x74>)
 8004002:	2200      	movs	r2, #0
 8004004:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <MX_SPI1_Init+0x74>)
 8004008:	2200      	movs	r2, #0
 800400a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <MX_SPI1_Init+0x74>)
 800400e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004012:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <MX_SPI1_Init+0x74>)
 8004016:	2218      	movs	r2, #24
 8004018:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <MX_SPI1_Init+0x74>)
 800401c:	2200      	movs	r2, #0
 800401e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <MX_SPI1_Init+0x74>)
 8004022:	2200      	movs	r2, #0
 8004024:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <MX_SPI1_Init+0x74>)
 8004028:	2200      	movs	r2, #0
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <MX_SPI1_Init+0x74>)
 800402e:	2207      	movs	r2, #7
 8004030:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <MX_SPI1_Init+0x74>)
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <MX_SPI1_Init+0x74>)
 800403a:	2208      	movs	r2, #8
 800403c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800403e:	4805      	ldr	r0, [pc, #20]	; (8004054 <MX_SPI1_Init+0x74>)
 8004040:	f003 f8ee 	bl	8007220 <HAL_SPI_Init>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800404a:	f7fe fb69 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	200000e8 	.word	0x200000e8
 8004058:	40013000 	.word	0x40013000

0800405c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_SPI_MspInit+0x7c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d128      	bne.n	80040d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800407e:	4b17      	ldr	r3, [pc, #92]	; (80040dc <HAL_SPI_MspInit+0x80>)
 8004080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004082:	4a16      	ldr	r2, [pc, #88]	; (80040dc <HAL_SPI_MspInit+0x80>)
 8004084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004088:	6613      	str	r3, [r2, #96]	; 0x60
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <HAL_SPI_MspInit+0x80>)
 800408c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <HAL_SPI_MspInit+0x80>)
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	4a10      	ldr	r2, [pc, #64]	; (80040dc <HAL_SPI_MspInit+0x80>)
 800409c:	f043 0310 	orr.w	r3, r3, #16
 80040a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <HAL_SPI_MspInit+0x80>)
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80040ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80040b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b4:	2302      	movs	r3, #2
 80040b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040bc:	2303      	movs	r3, #3
 80040be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040c0:	2305      	movs	r3, #5
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040c4:	f107 0314 	add.w	r3, r7, #20
 80040c8:	4619      	mov	r1, r3
 80040ca:	4805      	ldr	r0, [pc, #20]	; (80040e0 <HAL_SPI_MspInit+0x84>)
 80040cc:	f000 fa94 	bl	80045f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80040d0:	bf00      	nop
 80040d2:	3728      	adds	r7, #40	; 0x28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40013000 	.word	0x40013000
 80040dc:	40021000 	.word	0x40021000
 80040e0:	48001000 	.word	0x48001000

080040e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ea:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_MspInit+0x4c>)
 80040ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ee:	4a10      	ldr	r2, [pc, #64]	; (8004130 <HAL_MspInit+0x4c>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	6613      	str	r3, [r2, #96]	; 0x60
 80040f6:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_MspInit+0x4c>)
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_MspInit+0x4c>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	4a0a      	ldr	r2, [pc, #40]	; (8004130 <HAL_MspInit+0x4c>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410c:	6593      	str	r3, [r2, #88]	; 0x58
 800410e:	4b08      	ldr	r3, [pc, #32]	; (8004130 <HAL_MspInit+0x4c>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800411a:	2200      	movs	r2, #0
 800411c:	210f      	movs	r1, #15
 800411e:	f06f 0001 	mvn.w	r0, #1
 8004122:	f000 fa3f 	bl	80045a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000

08004134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08c      	sub	sp, #48	; 0x30
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8004144:	2200      	movs	r2, #0
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	2037      	movs	r0, #55	; 0x37
 800414a:	f000 fa2b 	bl	80045a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800414e:	2037      	movs	r0, #55	; 0x37
 8004150:	f000 fa44 	bl	80045dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004154:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_InitTick+0x9c>)
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <HAL_InitTick+0x9c>)
 800415a:	f043 0320 	orr.w	r3, r3, #32
 800415e:	6593      	str	r3, [r2, #88]	; 0x58
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <HAL_InitTick+0x9c>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800416c:	f107 0210 	add.w	r2, r7, #16
 8004170:	f107 0314 	add.w	r3, r7, #20
 8004174:	4611      	mov	r1, r2
 8004176:	4618      	mov	r0, r3
 8004178:	f002 fb04 	bl	8006784 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800417c:	f002 fad6 	bl	800672c <HAL_RCC_GetPCLK1Freq>
 8004180:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <HAL_InitTick+0xa0>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0c9b      	lsrs	r3, r3, #18
 800418c:	3b01      	subs	r3, #1
 800418e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8004190:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <HAL_InitTick+0xa4>)
 8004192:	4a12      	ldr	r2, [pc, #72]	; (80041dc <HAL_InitTick+0xa8>)
 8004194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8004196:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <HAL_InitTick+0xa4>)
 8004198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800419c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800419e:	4a0e      	ldr	r2, [pc, #56]	; (80041d8 <HAL_InitTick+0xa4>)
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <HAL_InitTick+0xa4>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_InitTick+0xa4>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80041b0:	4809      	ldr	r0, [pc, #36]	; (80041d8 <HAL_InitTick+0xa4>)
 80041b2:	f003 ff45 	bl	8008040 <HAL_TIM_Base_Init>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80041bc:	4806      	ldr	r0, [pc, #24]	; (80041d8 <HAL_InitTick+0xa4>)
 80041be:	f003 ffa1 	bl	8008104 <HAL_TIM_Base_Start_IT>
 80041c2:	4603      	mov	r3, r0
 80041c4:	e000      	b.n	80041c8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3730      	adds	r7, #48	; 0x30
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40021000 	.word	0x40021000
 80041d4:	431bde83 	.word	0x431bde83
 80041d8:	2000014c 	.word	0x2000014c
 80041dc:	40001400 	.word	0x40001400

080041e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041e4:	e7fe      	b.n	80041e4 <NMI_Handler+0x4>

080041e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041e6:	b480      	push	{r7}
 80041e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ea:	e7fe      	b.n	80041ea <HardFault_Handler+0x4>

080041ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041f0:	e7fe      	b.n	80041f0 <MemManage_Handler+0x4>

080041f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041f2:	b480      	push	{r7}
 80041f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041f6:	e7fe      	b.n	80041f6 <BusFault_Handler+0x4>

080041f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041fc:	e7fe      	b.n	80041fc <UsageFault_Handler+0x4>

080041fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041fe:	b480      	push	{r7}
 8004200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RAIN_Pin);
 8004210:	2008      	movs	r0, #8
 8004212:	f000 fbe5 	bl	80049e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004220:	4802      	ldr	r0, [pc, #8]	; (800422c <TIM7_IRQHandler+0x10>)
 8004222:	f003 ffdf 	bl	80081e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	2000014c 	.word	0x2000014c

08004230 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <SystemInit+0x20>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <SystemInit+0x20>)
 800423c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000ed00 	.word	0xe000ed00

08004254 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004258:	4b14      	ldr	r3, [pc, #80]	; (80042ac <MX_USART2_UART_Init+0x58>)
 800425a:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <MX_USART2_UART_Init+0x5c>)
 800425c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <MX_USART2_UART_Init+0x58>)
 8004260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <MX_USART2_UART_Init+0x58>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <MX_USART2_UART_Init+0x58>)
 800426e:	2200      	movs	r2, #0
 8004270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004272:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <MX_USART2_UART_Init+0x58>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <MX_USART2_UART_Init+0x58>)
 800427a:	220c      	movs	r2, #12
 800427c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <MX_USART2_UART_Init+0x58>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <MX_USART2_UART_Init+0x58>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800428a:	4b08      	ldr	r3, [pc, #32]	; (80042ac <MX_USART2_UART_Init+0x58>)
 800428c:	2200      	movs	r2, #0
 800428e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <MX_USART2_UART_Init+0x58>)
 8004292:	2200      	movs	r2, #0
 8004294:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004296:	4805      	ldr	r0, [pc, #20]	; (80042ac <MX_USART2_UART_Init+0x58>)
 8004298:	f004 f9a4 	bl	80085e4 <HAL_UART_Init>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80042a2:	f7fe fa3d 	bl	8002720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000198 	.word	0x20000198
 80042b0:	40004400 	.word	0x40004400

080042b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b0ac      	sub	sp, #176	; 0xb0
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042cc:	f107 0314 	add.w	r3, r7, #20
 80042d0:	2288      	movs	r2, #136	; 0x88
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f008 fa9f 	bl	800c818 <memset>
  if(uartHandle->Instance==USART2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a21      	ldr	r2, [pc, #132]	; (8004364 <HAL_UART_MspInit+0xb0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d13a      	bne.n	800435a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80042e4:	2302      	movs	r3, #2
 80042e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80042e8:	2300      	movs	r3, #0
 80042ea:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042ec:	f107 0314 	add.w	r3, r7, #20
 80042f0:	4618      	mov	r0, r3
 80042f2:	f002 fad9 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80042fc:	f7fe fa10 	bl	8002720 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <HAL_UART_MspInit+0xb4>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	4a18      	ldr	r2, [pc, #96]	; (8004368 <HAL_UART_MspInit+0xb4>)
 8004306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430a:	6593      	str	r3, [r2, #88]	; 0x58
 800430c:	4b16      	ldr	r3, [pc, #88]	; (8004368 <HAL_UART_MspInit+0xb4>)
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004318:	4b13      	ldr	r3, [pc, #76]	; (8004368 <HAL_UART_MspInit+0xb4>)
 800431a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431c:	4a12      	ldr	r2, [pc, #72]	; (8004368 <HAL_UART_MspInit+0xb4>)
 800431e:	f043 0308 	orr.w	r3, r3, #8
 8004322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004324:	4b10      	ldr	r3, [pc, #64]	; (8004368 <HAL_UART_MspInit+0xb4>)
 8004326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004330:	2360      	movs	r3, #96	; 0x60
 8004332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004336:	2302      	movs	r3, #2
 8004338:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004342:	2303      	movs	r3, #3
 8004344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004348:	2307      	movs	r3, #7
 800434a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800434e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004352:	4619      	mov	r1, r3
 8004354:	4805      	ldr	r0, [pc, #20]	; (800436c <HAL_UART_MspInit+0xb8>)
 8004356:	f000 f94f 	bl	80045f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800435a:	bf00      	nop
 800435c:	37b0      	adds	r7, #176	; 0xb0
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40004400 	.word	0x40004400
 8004368:	40021000 	.word	0x40021000
 800436c:	48000c00 	.word	0x48000c00

08004370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004374:	f7ff ff5c 	bl	8004230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004378:	480c      	ldr	r0, [pc, #48]	; (80043ac <LoopForever+0x6>)
  ldr r1, =_edata
 800437a:	490d      	ldr	r1, [pc, #52]	; (80043b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800437c:	4a0d      	ldr	r2, [pc, #52]	; (80043b4 <LoopForever+0xe>)
  movs r3, #0
 800437e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004380:	e002      	b.n	8004388 <LoopCopyDataInit>

08004382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004386:	3304      	adds	r3, #4

08004388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800438a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800438c:	d3f9      	bcc.n	8004382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004390:	4c0a      	ldr	r4, [pc, #40]	; (80043bc <LoopForever+0x16>)
  movs r3, #0
 8004392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004394:	e001      	b.n	800439a <LoopFillZerobss>

08004396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004398:	3204      	adds	r2, #4

0800439a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800439a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800439c:	d3fb      	bcc.n	8004396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800439e:	f008 fa09 	bl	800c7b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043a2:	f7fe f93f 	bl	8002624 <main>

080043a6 <LoopForever>:

LoopForever:
    b LoopForever
 80043a6:	e7fe      	b.n	80043a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80043a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80043ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80043b4:	0800cc08 	.word	0x0800cc08
  ldr r2, =_sbss
 80043b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80043bc:	20004df0 	.word	0x20004df0

080043c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80043c0:	e7fe      	b.n	80043c0 <ADC1_2_IRQHandler>

080043c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043cc:	2003      	movs	r0, #3
 80043ce:	f000 f8de 	bl	800458e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043d2:	200f      	movs	r0, #15
 80043d4:	f7ff feae 	bl	8004134 <HAL_InitTick>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	71fb      	strb	r3, [r7, #7]
 80043e2:	e001      	b.n	80043e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043e4:	f7ff fe7e 	bl	80040e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043e8:	79fb      	ldrb	r3, [r7, #7]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_IncTick+0x20>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_IncTick+0x24>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4413      	add	r3, r2
 8004404:	4a04      	ldr	r2, [pc, #16]	; (8004418 <HAL_IncTick+0x24>)
 8004406:	6013      	str	r3, [r2, #0]
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000008 	.word	0x20000008
 8004418:	2000021c 	.word	0x2000021c

0800441c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return uwTick;
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <HAL_GetTick+0x14>)
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	2000021c 	.word	0x2000021c

08004434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004444:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <__NVIC_SetPriorityGrouping+0x44>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004450:	4013      	ands	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800445c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004466:	4a04      	ldr	r2, [pc, #16]	; (8004478 <__NVIC_SetPriorityGrouping+0x44>)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	60d3      	str	r3, [r2, #12]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	e000ed00 	.word	0xe000ed00

0800447c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004480:	4b04      	ldr	r3, [pc, #16]	; (8004494 <__NVIC_GetPriorityGrouping+0x18>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	0a1b      	lsrs	r3, r3, #8
 8004486:	f003 0307 	and.w	r3, r3, #7
}
 800448a:	4618      	mov	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	db0b      	blt.n	80044c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	f003 021f 	and.w	r2, r3, #31
 80044b0:	4907      	ldr	r1, [pc, #28]	; (80044d0 <__NVIC_EnableIRQ+0x38>)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2001      	movs	r0, #1
 80044ba:	fa00 f202 	lsl.w	r2, r0, r2
 80044be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	e000e100 	.word	0xe000e100

080044d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	6039      	str	r1, [r7, #0]
 80044de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	db0a      	blt.n	80044fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	490c      	ldr	r1, [pc, #48]	; (8004520 <__NVIC_SetPriority+0x4c>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	0112      	lsls	r2, r2, #4
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	440b      	add	r3, r1
 80044f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044fc:	e00a      	b.n	8004514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4908      	ldr	r1, [pc, #32]	; (8004524 <__NVIC_SetPriority+0x50>)
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	3b04      	subs	r3, #4
 800450c:	0112      	lsls	r2, r2, #4
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	440b      	add	r3, r1
 8004512:	761a      	strb	r2, [r3, #24]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	e000e100 	.word	0xe000e100
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	; 0x24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f1c3 0307 	rsb	r3, r3, #7
 8004542:	2b04      	cmp	r3, #4
 8004544:	bf28      	it	cs
 8004546:	2304      	movcs	r3, #4
 8004548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3304      	adds	r3, #4
 800454e:	2b06      	cmp	r3, #6
 8004550:	d902      	bls.n	8004558 <NVIC_EncodePriority+0x30>
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3b03      	subs	r3, #3
 8004556:	e000      	b.n	800455a <NVIC_EncodePriority+0x32>
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800455c:	f04f 32ff 	mov.w	r2, #4294967295
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43da      	mvns	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	401a      	ands	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004570:	f04f 31ff 	mov.w	r1, #4294967295
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	fa01 f303 	lsl.w	r3, r1, r3
 800457a:	43d9      	mvns	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004580:	4313      	orrs	r3, r2
         );
}
 8004582:	4618      	mov	r0, r3
 8004584:	3724      	adds	r7, #36	; 0x24
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff ff4c 	bl	8004434 <__NVIC_SetPriorityGrouping>
}
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045b6:	f7ff ff61 	bl	800447c <__NVIC_GetPriorityGrouping>
 80045ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	6978      	ldr	r0, [r7, #20]
 80045c2:	f7ff ffb1 	bl	8004528 <NVIC_EncodePriority>
 80045c6:	4602      	mov	r2, r0
 80045c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045cc:	4611      	mov	r1, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ff80 	bl	80044d4 <__NVIC_SetPriority>
}
 80045d4:	bf00      	nop
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff ff54 	bl	8004498 <__NVIC_EnableIRQ>
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004606:	e17f      	b.n	8004908 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	2101      	movs	r1, #1
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	4013      	ands	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8171 	beq.w	8004902 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	2b01      	cmp	r3, #1
 800462a:	d005      	beq.n	8004638 <HAL_GPIO_Init+0x40>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d130      	bne.n	800469a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	2203      	movs	r2, #3
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	43db      	mvns	r3, r3
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800466e:	2201      	movs	r2, #1
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	f003 0201 	and.w	r2, r3, #1
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d118      	bne.n	80046d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80046ac:	2201      	movs	r2, #1
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	08db      	lsrs	r3, r3, #3
 80046c2:	f003 0201 	and.w	r2, r3, #1
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d017      	beq.n	8004714 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	2203      	movs	r2, #3
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4013      	ands	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d123      	bne.n	8004768 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	08da      	lsrs	r2, r3, #3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3208      	adds	r2, #8
 8004728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800472c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	220f      	movs	r2, #15
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	08da      	lsrs	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3208      	adds	r2, #8
 8004762:	6939      	ldr	r1, [r7, #16]
 8004764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2203      	movs	r2, #3
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4013      	ands	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0203 	and.w	r2, r3, #3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80ac 	beq.w	8004902 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047aa:	4b5f      	ldr	r3, [pc, #380]	; (8004928 <HAL_GPIO_Init+0x330>)
 80047ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ae:	4a5e      	ldr	r2, [pc, #376]	; (8004928 <HAL_GPIO_Init+0x330>)
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	6613      	str	r3, [r2, #96]	; 0x60
 80047b6:	4b5c      	ldr	r3, [pc, #368]	; (8004928 <HAL_GPIO_Init+0x330>)
 80047b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80047c2:	4a5a      	ldr	r2, [pc, #360]	; (800492c <HAL_GPIO_Init+0x334>)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	3302      	adds	r3, #2
 80047ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	220f      	movs	r2, #15
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4013      	ands	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047ec:	d025      	beq.n	800483a <HAL_GPIO_Init+0x242>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a4f      	ldr	r2, [pc, #316]	; (8004930 <HAL_GPIO_Init+0x338>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d01f      	beq.n	8004836 <HAL_GPIO_Init+0x23e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a4e      	ldr	r2, [pc, #312]	; (8004934 <HAL_GPIO_Init+0x33c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d019      	beq.n	8004832 <HAL_GPIO_Init+0x23a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a4d      	ldr	r2, [pc, #308]	; (8004938 <HAL_GPIO_Init+0x340>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <HAL_GPIO_Init+0x236>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a4c      	ldr	r2, [pc, #304]	; (800493c <HAL_GPIO_Init+0x344>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00d      	beq.n	800482a <HAL_GPIO_Init+0x232>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a4b      	ldr	r2, [pc, #300]	; (8004940 <HAL_GPIO_Init+0x348>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d007      	beq.n	8004826 <HAL_GPIO_Init+0x22e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a4a      	ldr	r2, [pc, #296]	; (8004944 <HAL_GPIO_Init+0x34c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d101      	bne.n	8004822 <HAL_GPIO_Init+0x22a>
 800481e:	2306      	movs	r3, #6
 8004820:	e00c      	b.n	800483c <HAL_GPIO_Init+0x244>
 8004822:	2307      	movs	r3, #7
 8004824:	e00a      	b.n	800483c <HAL_GPIO_Init+0x244>
 8004826:	2305      	movs	r3, #5
 8004828:	e008      	b.n	800483c <HAL_GPIO_Init+0x244>
 800482a:	2304      	movs	r3, #4
 800482c:	e006      	b.n	800483c <HAL_GPIO_Init+0x244>
 800482e:	2303      	movs	r3, #3
 8004830:	e004      	b.n	800483c <HAL_GPIO_Init+0x244>
 8004832:	2302      	movs	r3, #2
 8004834:	e002      	b.n	800483c <HAL_GPIO_Init+0x244>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <HAL_GPIO_Init+0x244>
 800483a:	2300      	movs	r3, #0
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	f002 0203 	and.w	r2, r2, #3
 8004842:	0092      	lsls	r2, r2, #2
 8004844:	4093      	lsls	r3, r2
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800484c:	4937      	ldr	r1, [pc, #220]	; (800492c <HAL_GPIO_Init+0x334>)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	089b      	lsrs	r3, r3, #2
 8004852:	3302      	adds	r3, #2
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800485a:	4b3b      	ldr	r3, [pc, #236]	; (8004948 <HAL_GPIO_Init+0x350>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	43db      	mvns	r3, r3
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800487e:	4a32      	ldr	r2, [pc, #200]	; (8004948 <HAL_GPIO_Init+0x350>)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004884:	4b30      	ldr	r3, [pc, #192]	; (8004948 <HAL_GPIO_Init+0x350>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	43db      	mvns	r3, r3
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048a8:	4a27      	ldr	r2, [pc, #156]	; (8004948 <HAL_GPIO_Init+0x350>)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80048ae:	4b26      	ldr	r3, [pc, #152]	; (8004948 <HAL_GPIO_Init+0x350>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4013      	ands	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048d2:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <HAL_GPIO_Init+0x350>)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80048d8:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <HAL_GPIO_Init+0x350>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4013      	ands	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048fc:	4a12      	ldr	r2, [pc, #72]	; (8004948 <HAL_GPIO_Init+0x350>)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	3301      	adds	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	f47f ae78 	bne.w	8004608 <HAL_GPIO_Init+0x10>
  }
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	40010000 	.word	0x40010000
 8004930:	48000400 	.word	0x48000400
 8004934:	48000800 	.word	0x48000800
 8004938:	48000c00 	.word	0x48000c00
 800493c:	48001000 	.word	0x48001000
 8004940:	48001400 	.word	0x48001400
 8004944:	48001800 	.word	0x48001800
 8004948:	40010400 	.word	0x40010400

0800494c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	887b      	ldrh	r3, [r7, #2]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
 8004968:	e001      	b.n	800496e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800496e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	807b      	strh	r3, [r7, #2]
 8004988:	4613      	mov	r3, r2
 800498a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800498c:	787b      	ldrb	r3, [r7, #1]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004992:	887a      	ldrh	r2, [r7, #2]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004998:	e002      	b.n	80049a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800499a:	887a      	ldrh	r2, [r7, #2]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4013      	ands	r3, r2
 80049c4:	041a      	lsls	r2, r3, #16
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	43d9      	mvns	r1, r3
 80049ca:	887b      	ldrh	r3, [r7, #2]
 80049cc:	400b      	ands	r3, r1
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	619a      	str	r2, [r3, #24]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049ea:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049f6:	4a05      	ldr	r2, [pc, #20]	; (8004a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f806 	bl	8004a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40010400 	.word	0x40010400

08004a10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e081      	b.n	8004b3c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d106      	bne.n	8004a52 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7fd fd6d 	bl	800252c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2224      	movs	r2, #36	; 0x24
 8004a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0201 	bic.w	r2, r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d107      	bne.n	8004aa0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a9c:	609a      	str	r2, [r3, #8]
 8004a9e:	e006      	b.n	8004aae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004aac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d104      	bne.n	8004ac0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004abe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ae2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69d9      	ldr	r1, [r3, #28]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1a      	ldr	r2, [r3, #32]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	460b      	mov	r3, r1
 8004b52:	817b      	strh	r3, [r7, #10]
 8004b54:	4613      	mov	r3, r2
 8004b56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	f040 80da 	bne.w	8004d1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_I2C_Master_Transmit+0x30>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e0d3      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b7c:	f7ff fc4e 	bl	800441c <HAL_GetTick>
 8004b80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	2319      	movs	r3, #25
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fcbc 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e0be      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2221      	movs	r2, #33	; 0x21
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	893a      	ldrh	r2, [r7, #8]
 8004bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2bff      	cmp	r3, #255	; 0xff
 8004bce:	d90e      	bls.n	8004bee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	22ff      	movs	r2, #255	; 0xff
 8004bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	8979      	ldrh	r1, [r7, #10]
 8004bde:	4b51      	ldr	r3, [pc, #324]	; (8004d24 <HAL_I2C_Master_Transmit+0x1e0>)
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 feb2 	bl	8005950 <I2C_TransferConfig>
 8004bec:	e06c      	b.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	8979      	ldrh	r1, [r7, #10]
 8004c00:	4b48      	ldr	r3, [pc, #288]	; (8004d24 <HAL_I2C_Master_Transmit+0x1e0>)
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fea1 	bl	8005950 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004c0e:	e05b      	b.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	6a39      	ldr	r1, [r7, #32]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fcb9 	bl	800558c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e07b      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d034      	beq.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d130      	bne.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2180      	movs	r1, #128	; 0x80
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fc4b 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e04d      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2bff      	cmp	r3, #255	; 0xff
 8004c88:	d90e      	bls.n	8004ca8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	22ff      	movs	r2, #255	; 0xff
 8004c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	8979      	ldrh	r1, [r7, #10]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fe55 	bl	8005950 <I2C_TransferConfig>
 8004ca6:	e00f      	b.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	8979      	ldrh	r1, [r7, #10]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fe44 	bl	8005950 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d19e      	bne.n	8004c10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	6a39      	ldr	r1, [r7, #32]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fc98 	bl	800560c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e01a      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2220      	movs	r2, #32
 8004cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6859      	ldr	r1, [r3, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_I2C_Master_Transmit+0x1e4>)
 8004cfa:	400b      	ands	r3, r1
 8004cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e000      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004d1a:	2302      	movs	r3, #2
  }
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	80002000 	.word	0x80002000
 8004d28:	fe00e800 	.word	0xfe00e800

08004d2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	461a      	mov	r2, r3
 8004d38:	460b      	mov	r3, r1
 8004d3a:	817b      	strh	r3, [r7, #10]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	f040 80db 	bne.w	8004f04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_I2C_Master_Receive+0x30>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e0d4      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d64:	f7ff fb5a 	bl	800441c <HAL_GetTick>
 8004d68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2319      	movs	r3, #25
 8004d70:	2201      	movs	r2, #1
 8004d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fbc8 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0bf      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2222      	movs	r2, #34	; 0x22
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2210      	movs	r2, #16
 8004d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	893a      	ldrh	r2, [r7, #8]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2bff      	cmp	r3, #255	; 0xff
 8004db6:	d90e      	bls.n	8004dd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	22ff      	movs	r2, #255	; 0xff
 8004dbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	8979      	ldrh	r1, [r7, #10]
 8004dc6:	4b52      	ldr	r3, [pc, #328]	; (8004f10 <HAL_I2C_Master_Receive+0x1e4>)
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 fdbe 	bl	8005950 <I2C_TransferConfig>
 8004dd4:	e06d      	b.n	8004eb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	8979      	ldrh	r1, [r7, #10]
 8004de8:	4b49      	ldr	r3, [pc, #292]	; (8004f10 <HAL_I2C_Master_Receive+0x1e4>)
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fdad 	bl	8005950 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004df6:	e05c      	b.n	8004eb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	6a39      	ldr	r1, [r7, #32]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fc41 	bl	8005684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e07c      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d034      	beq.n	8004eb2 <HAL_I2C_Master_Receive+0x186>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d130      	bne.n	8004eb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	2200      	movs	r2, #0
 8004e58:	2180      	movs	r1, #128	; 0x80
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fb56 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e04d      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2bff      	cmp	r3, #255	; 0xff
 8004e72:	d90e      	bls.n	8004e92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	22ff      	movs	r2, #255	; 0xff
 8004e78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	8979      	ldrh	r1, [r7, #10]
 8004e82:	2300      	movs	r3, #0
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fd60 	bl	8005950 <I2C_TransferConfig>
 8004e90:	e00f      	b.n	8004eb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	8979      	ldrh	r1, [r7, #10]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fd4f 	bl	8005950 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d19d      	bne.n	8004df8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	6a39      	ldr	r1, [r7, #32]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fba3 	bl	800560c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e01a      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <HAL_I2C_Master_Receive+0x1e8>)
 8004ee4:	400b      	ands	r3, r1
 8004ee6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	80002400 	.word	0x80002400
 8004f14:	fe00e800 	.word	0xfe00e800

08004f18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	4608      	mov	r0, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	461a      	mov	r2, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	817b      	strh	r3, [r7, #10]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	813b      	strh	r3, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	f040 80f9 	bne.w	8005132 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_I2C_Mem_Write+0x34>
 8004f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0ed      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_I2C_Mem_Write+0x4e>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e0e6      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f6e:	f7ff fa55 	bl	800441c <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2319      	movs	r3, #25
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fac3 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0d1      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2221      	movs	r2, #33	; 0x21
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2240      	movs	r2, #64	; 0x40
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a3a      	ldr	r2, [r7, #32]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fb8:	88f8      	ldrh	r0, [r7, #6]
 8004fba:	893a      	ldrh	r2, [r7, #8]
 8004fbc:	8979      	ldrh	r1, [r7, #10]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f9d3 	bl	8005374 <I2C_RequestMemoryWrite>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0a9      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2bff      	cmp	r3, #255	; 0xff
 8004fe8:	d90e      	bls.n	8005008 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	22ff      	movs	r2, #255	; 0xff
 8004fee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	8979      	ldrh	r1, [r7, #10]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 fca5 	bl	8005950 <I2C_TransferConfig>
 8005006:	e00f      	b.n	8005028 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005016:	b2da      	uxtb	r2, r3
 8005018:	8979      	ldrh	r1, [r7, #10]
 800501a:	2300      	movs	r3, #0
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fc94 	bl	8005950 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 faad 	bl	800558c <I2C_WaitOnTXISFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e07b      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	781a      	ldrb	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d034      	beq.n	80050e0 <HAL_I2C_Mem_Write+0x1c8>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d130      	bne.n	80050e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	2200      	movs	r2, #0
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fa3f 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e04d      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2bff      	cmp	r3, #255	; 0xff
 80050a0:	d90e      	bls.n	80050c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	8979      	ldrh	r1, [r7, #10]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fc49 	bl	8005950 <I2C_TransferConfig>
 80050be:	e00f      	b.n	80050e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	8979      	ldrh	r1, [r7, #10]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fc38 	bl	8005950 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d19e      	bne.n	8005028 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fa8c 	bl	800560c <I2C_WaitOnSTOPFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e01a      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2220      	movs	r2, #32
 8005104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <HAL_I2C_Mem_Write+0x224>)
 8005112:	400b      	ands	r3, r1
 8005114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	fe00e800 	.word	0xfe00e800

08005140 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	4608      	mov	r0, r1
 800514a:	4611      	mov	r1, r2
 800514c:	461a      	mov	r2, r3
 800514e:	4603      	mov	r3, r0
 8005150:	817b      	strh	r3, [r7, #10]
 8005152:	460b      	mov	r3, r1
 8005154:	813b      	strh	r3, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b20      	cmp	r3, #32
 8005164:	f040 80fd 	bne.w	8005362 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_I2C_Mem_Read+0x34>
 800516e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	d105      	bne.n	8005180 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0f1      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_I2C_Mem_Read+0x4e>
 800518a:	2302      	movs	r3, #2
 800518c:	e0ea      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005196:	f7ff f941 	bl	800441c <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	2319      	movs	r3, #25
 80051a2:	2201      	movs	r2, #1
 80051a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f9af 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0d5      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2222      	movs	r2, #34	; 0x22
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2240      	movs	r2, #64	; 0x40
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a3a      	ldr	r2, [r7, #32]
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051e0:	88f8      	ldrh	r0, [r7, #6]
 80051e2:	893a      	ldrh	r2, [r7, #8]
 80051e4:	8979      	ldrh	r1, [r7, #10]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	4603      	mov	r3, r0
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f913 	bl	800541c <I2C_RequestMemoryRead>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0ad      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	2bff      	cmp	r3, #255	; 0xff
 8005210:	d90e      	bls.n	8005230 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	22ff      	movs	r2, #255	; 0xff
 8005216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	b2da      	uxtb	r2, r3
 800521e:	8979      	ldrh	r1, [r7, #10]
 8005220:	4b52      	ldr	r3, [pc, #328]	; (800536c <HAL_I2C_Mem_Read+0x22c>)
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fb91 	bl	8005950 <I2C_TransferConfig>
 800522e:	e00f      	b.n	8005250 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523e:	b2da      	uxtb	r2, r3
 8005240:	8979      	ldrh	r1, [r7, #10]
 8005242:	4b4a      	ldr	r3, [pc, #296]	; (800536c <HAL_I2C_Mem_Read+0x22c>)
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 fb80 	bl	8005950 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	2200      	movs	r2, #0
 8005258:	2104      	movs	r1, #4
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f956 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e07c      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d034      	beq.n	8005310 <HAL_I2C_Mem_Read+0x1d0>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d130      	bne.n	8005310 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	2200      	movs	r2, #0
 80052b6:	2180      	movs	r1, #128	; 0x80
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f927 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e04d      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2bff      	cmp	r3, #255	; 0xff
 80052d0:	d90e      	bls.n	80052f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	22ff      	movs	r2, #255	; 0xff
 80052d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	8979      	ldrh	r1, [r7, #10]
 80052e0:	2300      	movs	r3, #0
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fb31 	bl	8005950 <I2C_TransferConfig>
 80052ee:	e00f      	b.n	8005310 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	8979      	ldrh	r1, [r7, #10]
 8005302:	2300      	movs	r3, #0
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fb20 	bl	8005950 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d19a      	bne.n	8005250 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f974 	bl	800560c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e01a      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2220      	movs	r2, #32
 8005334:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6859      	ldr	r1, [r3, #4]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_I2C_Mem_Read+0x230>)
 8005342:	400b      	ands	r3, r1
 8005344:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	80002400 	.word	0x80002400
 8005370:	fe00e800 	.word	0xfe00e800

08005374 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	461a      	mov	r2, r3
 8005382:	4603      	mov	r3, r0
 8005384:	817b      	strh	r3, [r7, #10]
 8005386:	460b      	mov	r3, r1
 8005388:	813b      	strh	r3, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	b2da      	uxtb	r2, r3
 8005392:	8979      	ldrh	r1, [r7, #10]
 8005394:	4b20      	ldr	r3, [pc, #128]	; (8005418 <I2C_RequestMemoryWrite+0xa4>)
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fad7 	bl	8005950 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	69b9      	ldr	r1, [r7, #24]
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 f8f0 	bl	800558c <I2C_WaitOnTXISFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e02c      	b.n	8005410 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d105      	bne.n	80053c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053bc:	893b      	ldrh	r3, [r7, #8]
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	629a      	str	r2, [r3, #40]	; 0x28
 80053c6:	e015      	b.n	80053f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053c8:	893b      	ldrh	r3, [r7, #8]
 80053ca:	0a1b      	lsrs	r3, r3, #8
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	69b9      	ldr	r1, [r7, #24]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f8d6 	bl	800558c <I2C_WaitOnTXISFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e012      	b.n	8005410 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053ea:	893b      	ldrh	r3, [r7, #8]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2200      	movs	r2, #0
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f884 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	80002000 	.word	0x80002000

0800541c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	4608      	mov	r0, r1
 8005426:	4611      	mov	r1, r2
 8005428:	461a      	mov	r2, r3
 800542a:	4603      	mov	r3, r0
 800542c:	817b      	strh	r3, [r7, #10]
 800542e:	460b      	mov	r3, r1
 8005430:	813b      	strh	r3, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	b2da      	uxtb	r2, r3
 800543a:	8979      	ldrh	r1, [r7, #10]
 800543c:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <I2C_RequestMemoryRead+0xa4>)
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2300      	movs	r3, #0
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fa84 	bl	8005950 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	69b9      	ldr	r1, [r7, #24]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f89d 	bl	800558c <I2C_WaitOnTXISFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e02c      	b.n	80054b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800545c:	88fb      	ldrh	r3, [r7, #6]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d105      	bne.n	800546e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005462:	893b      	ldrh	r3, [r7, #8]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	629a      	str	r2, [r3, #40]	; 0x28
 800546c:	e015      	b.n	800549a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800546e:	893b      	ldrh	r3, [r7, #8]
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	b29b      	uxth	r3, r3
 8005474:	b2da      	uxtb	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	69b9      	ldr	r1, [r7, #24]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f883 	bl	800558c <I2C_WaitOnTXISFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e012      	b.n	80054b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005490:	893b      	ldrh	r3, [r7, #8]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2200      	movs	r2, #0
 80054a2:	2140      	movs	r1, #64	; 0x40
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f831 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	80002000 	.word	0x80002000

080054c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d103      	bne.n	80054e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2200      	movs	r2, #0
 80054e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d007      	beq.n	8005500 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	619a      	str	r2, [r3, #24]
  }
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800551c:	e022      	b.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d01e      	beq.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7fe ff79 	bl	800441c <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d113      	bne.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005540:	f043 0220 	orr.w	r2, r3, #32
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e00f      	b.n	8005584 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4013      	ands	r3, r2
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	429a      	cmp	r2, r3
 8005580:	d0cd      	beq.n	800551e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005598:	e02c      	b.n	80055f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f8ea 	bl	8005778 <I2C_IsErrorOccurred>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e02a      	b.n	8005604 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d01e      	beq.n	80055f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b6:	f7fe ff31 	bl	800441c <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d302      	bcc.n	80055cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d113      	bne.n	80055f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d0:	f043 0220 	orr.w	r2, r3, #32
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e007      	b.n	8005604 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d1cb      	bne.n	800559a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005618:	e028      	b.n	800566c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f8aa 	bl	8005778 <I2C_IsErrorOccurred>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e026      	b.n	800567c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fe fef5 	bl	800441c <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d113      	bne.n	800566c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005648:	f043 0220 	orr.w	r2, r3, #32
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e007      	b.n	800567c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b20      	cmp	r3, #32
 8005678:	d1cf      	bne.n	800561a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005690:	e064      	b.n	800575c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f86e 	bl	8005778 <I2C_IsErrorOccurred>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e062      	b.n	800576c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d138      	bne.n	8005726 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d105      	bne.n	80056ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e04e      	b.n	800576c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d107      	bne.n	80056ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2210      	movs	r2, #16
 80056e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2204      	movs	r2, #4
 80056e8:	645a      	str	r2, [r3, #68]	; 0x44
 80056ea:	e002      	b.n	80056f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2220      	movs	r2, #32
 80056f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6859      	ldr	r1, [r3, #4]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	4b1b      	ldr	r3, [pc, #108]	; (8005774 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005706:	400b      	ands	r3, r1
 8005708:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e022      	b.n	800576c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005726:	f7fe fe79 	bl	800441c <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	429a      	cmp	r2, r3
 8005734:	d302      	bcc.n	800573c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10f      	bne.n	800575c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e007      	b.n	800576c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b04      	cmp	r3, #4
 8005768:	d193      	bne.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	fe00e800 	.word	0xfe00e800

08005778 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d075      	beq.n	8005890 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2210      	movs	r2, #16
 80057aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057ac:	e056      	b.n	800585c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d052      	beq.n	800585c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057b6:	f7fe fe31 	bl	800441c <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d302      	bcc.n	80057cc <I2C_IsErrorOccurred+0x54>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d147      	bne.n	800585c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ee:	d12e      	bne.n	800584e <I2C_IsErrorOccurred+0xd6>
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057f6:	d02a      	beq.n	800584e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80057f8:	7cfb      	ldrb	r3, [r7, #19]
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d027      	beq.n	800584e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800580c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800580e:	f7fe fe05 	bl	800441c <HAL_GetTick>
 8005812:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005814:	e01b      	b.n	800584e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005816:	f7fe fe01 	bl	800441c <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b19      	cmp	r3, #25
 8005822:	d914      	bls.n	800584e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005828:	f043 0220 	orr.w	r2, r3, #32
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b20      	cmp	r3, #32
 800585a:	d1dc      	bne.n	8005816 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b20      	cmp	r3, #32
 8005868:	d003      	beq.n	8005872 <I2C_IsErrorOccurred+0xfa>
 800586a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800586e:	2b00      	cmp	r3, #0
 8005870:	d09d      	beq.n	80057ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005876:	2b00      	cmp	r3, #0
 8005878:	d103      	bne.n	8005882 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2220      	movs	r2, #32
 8005880:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f043 0304 	orr.w	r3, r3, #4
 8005888:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00b      	beq.n	80058dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	f043 0308 	orr.w	r3, r3, #8
 80058ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00b      	beq.n	80058fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	f043 0302 	orr.w	r3, r3, #2
 80058ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80058fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01c      	beq.n	8005940 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f7ff fddc 	bl	80054c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6859      	ldr	r1, [r3, #4]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b0d      	ldr	r3, [pc, #52]	; (800594c <I2C_IsErrorOccurred+0x1d4>)
 8005918:	400b      	ands	r3, r1
 800591a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	431a      	orrs	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005944:	4618      	mov	r0, r3
 8005946:	3728      	adds	r7, #40	; 0x28
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	fe00e800 	.word	0xfe00e800

08005950 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	607b      	str	r3, [r7, #4]
 800595a:	460b      	mov	r3, r1
 800595c:	817b      	strh	r3, [r7, #10]
 800595e:	4613      	mov	r3, r2
 8005960:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005962:	897b      	ldrh	r3, [r7, #10]
 8005964:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005968:	7a7b      	ldrb	r3, [r7, #9]
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005970:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	4313      	orrs	r3, r2
 800597a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800597e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	0d5b      	lsrs	r3, r3, #21
 800598a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800598e:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <I2C_TransferConfig+0x60>)
 8005990:	430b      	orrs	r3, r1
 8005992:	43db      	mvns	r3, r3
 8005994:	ea02 0103 	and.w	r1, r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	03ff63ff 	.word	0x03ff63ff

080059b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d138      	bne.n	8005a3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e032      	b.n	8005a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2224      	movs	r2, #36	; 0x24
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0201 	bic.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6819      	ldr	r1, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e000      	b.n	8005a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a3c:	2302      	movs	r3, #2
  }
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d139      	bne.n	8005ad4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e033      	b.n	8005ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2224      	movs	r2, #36	; 0x24
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e041      	b.n	8005b78 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005afc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f245 5255 	movw	r2, #21845	; 0x5555
 8005b06:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6852      	ldr	r2, [r2, #4]
 8005b10:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6892      	ldr	r2, [r2, #8]
 8005b1a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005b1c:	f7fe fc7e 	bl	800441c <HAL_GetTick>
 8005b20:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005b22:	e00f      	b.n	8005b44 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005b24:	f7fe fc7a 	bl	800441c <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b31      	cmp	r3, #49	; 0x31
 8005b30:	d908      	bls.n	8005b44 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e019      	b.n	8005b78 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e8      	bne.n	8005b24 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d005      	beq.n	8005b6c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	68d2      	ldr	r2, [r2, #12]
 8005b68:	611a      	str	r2, [r3, #16]
 8005b6a:	e004      	b.n	8005b76 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005b90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ba4:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40007000 	.word	0x40007000

08005bbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bca:	d130      	bne.n	8005c2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bcc:	4b23      	ldr	r3, [pc, #140]	; (8005c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd8:	d038      	beq.n	8005c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bda:	4b20      	ldr	r3, [pc, #128]	; (8005c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005be2:	4a1e      	ldr	r2, [pc, #120]	; (8005c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005be8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bea:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2232      	movs	r2, #50	; 0x32
 8005bf0:	fb02 f303 	mul.w	r3, r2, r3
 8005bf4:	4a1b      	ldr	r2, [pc, #108]	; (8005c64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfa:	0c9b      	lsrs	r3, r3, #18
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c00:	e002      	b.n	8005c08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c08:	4b14      	ldr	r3, [pc, #80]	; (8005c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c14:	d102      	bne.n	8005c1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f2      	bne.n	8005c02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c1c:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c28:	d110      	bne.n	8005c4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e00f      	b.n	8005c4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3a:	d007      	beq.n	8005c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c3c:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c44:	4a05      	ldr	r2, [pc, #20]	; (8005c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40007000 	.word	0x40007000
 8005c60:	20000000 	.word	0x20000000
 8005c64:	431bde83 	.word	0x431bde83

08005c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e3d8      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c7a:	4b97      	ldr	r3, [pc, #604]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
 8005c82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c84:	4b94      	ldr	r3, [pc, #592]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0310 	and.w	r3, r3, #16
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 80e4 	beq.w	8005e64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d007      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x4a>
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b0c      	cmp	r3, #12
 8005ca6:	f040 808b 	bne.w	8005dc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	f040 8087 	bne.w	8005dc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005cb2:	4b89      	ldr	r3, [pc, #548]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_RCC_OscConfig+0x62>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e3b0      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	4b82      	ldr	r3, [pc, #520]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x7c>
 8005cda:	4b7f      	ldr	r3, [pc, #508]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ce2:	e005      	b.n	8005cf0 <HAL_RCC_OscConfig+0x88>
 8005ce4:	4b7c      	ldr	r3, [pc, #496]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cea:	091b      	lsrs	r3, r3, #4
 8005cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d223      	bcs.n	8005d3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fd75 	bl	80067e8 <RCC_SetFlashLatencyFromMSIRange>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e391      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d08:	4b73      	ldr	r3, [pc, #460]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a72      	ldr	r2, [pc, #456]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d0e:	f043 0308 	orr.w	r3, r3, #8
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	4b70      	ldr	r3, [pc, #448]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	496d      	ldr	r1, [pc, #436]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d26:	4b6c      	ldr	r3, [pc, #432]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	4968      	ldr	r1, [pc, #416]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	604b      	str	r3, [r1, #4]
 8005d3a:	e025      	b.n	8005d88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d3c:	4b66      	ldr	r3, [pc, #408]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a65      	ldr	r2, [pc, #404]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d42:	f043 0308 	orr.w	r3, r3, #8
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	4b63      	ldr	r3, [pc, #396]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	4960      	ldr	r1, [pc, #384]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d5a:	4b5f      	ldr	r3, [pc, #380]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	495b      	ldr	r1, [pc, #364]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fd35 	bl	80067e8 <RCC_SetFlashLatencyFromMSIRange>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e351      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d88:	f000 fc38 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	4b52      	ldr	r3, [pc, #328]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	4950      	ldr	r1, [pc, #320]	; (8005edc <HAL_RCC_OscConfig+0x274>)
 8005d9a:	5ccb      	ldrb	r3, [r1, r3]
 8005d9c:	f003 031f 	and.w	r3, r3, #31
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
 8005da4:	4a4e      	ldr	r2, [pc, #312]	; (8005ee0 <HAL_RCC_OscConfig+0x278>)
 8005da6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005da8:	4b4e      	ldr	r3, [pc, #312]	; (8005ee4 <HAL_RCC_OscConfig+0x27c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe f9c1 	bl	8004134 <HAL_InitTick>
 8005db2:	4603      	mov	r3, r0
 8005db4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d052      	beq.n	8005e62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	e335      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d032      	beq.n	8005e2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005dc8:	4b43      	ldr	r3, [pc, #268]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a42      	ldr	r2, [pc, #264]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005dd4:	f7fe fb22 	bl	800441c <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ddc:	f7fe fb1e 	bl	800441c <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e31e      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dee:	4b3a      	ldr	r3, [pc, #232]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dfa:	4b37      	ldr	r3, [pc, #220]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a36      	ldr	r2, [pc, #216]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005e00:	f043 0308 	orr.w	r3, r3, #8
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	4b34      	ldr	r3, [pc, #208]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	4931      	ldr	r1, [pc, #196]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e18:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	492c      	ldr	r1, [pc, #176]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	604b      	str	r3, [r1, #4]
 8005e2c:	e01a      	b.n	8005e64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e2e:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a29      	ldr	r2, [pc, #164]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005e34:	f023 0301 	bic.w	r3, r3, #1
 8005e38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e3a:	f7fe faef 	bl	800441c <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e42:	f7fe faeb 	bl	800441c <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e2eb      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e54:	4b20      	ldr	r3, [pc, #128]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f0      	bne.n	8005e42 <HAL_RCC_OscConfig+0x1da>
 8005e60:	e000      	b.n	8005e64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d074      	beq.n	8005f5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d005      	beq.n	8005e82 <HAL_RCC_OscConfig+0x21a>
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b0c      	cmp	r3, #12
 8005e7a:	d10e      	bne.n	8005e9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d10b      	bne.n	8005e9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d064      	beq.n	8005f58 <HAL_RCC_OscConfig+0x2f0>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d160      	bne.n	8005f58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e2c8      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea2:	d106      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x24a>
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a0b      	ldr	r2, [pc, #44]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	e026      	b.n	8005f00 <HAL_RCC_OscConfig+0x298>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005eba:	d115      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x280>
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a05      	ldr	r2, [pc, #20]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	4b03      	ldr	r3, [pc, #12]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a02      	ldr	r2, [pc, #8]	; (8005ed8 <HAL_RCC_OscConfig+0x270>)
 8005ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	e014      	b.n	8005f00 <HAL_RCC_OscConfig+0x298>
 8005ed6:	bf00      	nop
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	0800cbb0 	.word	0x0800cbb0
 8005ee0:	20000000 	.word	0x20000000
 8005ee4:	20000004 	.word	0x20000004
 8005ee8:	4ba0      	ldr	r3, [pc, #640]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a9f      	ldr	r2, [pc, #636]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	4b9d      	ldr	r3, [pc, #628]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a9c      	ldr	r2, [pc, #624]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d013      	beq.n	8005f30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fe fa88 	bl	800441c <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f10:	f7fe fa84 	bl	800441c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	; 0x64
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e284      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f22:	4b92      	ldr	r3, [pc, #584]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f0      	beq.n	8005f10 <HAL_RCC_OscConfig+0x2a8>
 8005f2e:	e014      	b.n	8005f5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fe fa74 	bl	800441c <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f38:	f7fe fa70 	bl	800441c <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b64      	cmp	r3, #100	; 0x64
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e270      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f4a:	4b88      	ldr	r3, [pc, #544]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f0      	bne.n	8005f38 <HAL_RCC_OscConfig+0x2d0>
 8005f56:	e000      	b.n	8005f5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d060      	beq.n	8006028 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d005      	beq.n	8005f78 <HAL_RCC_OscConfig+0x310>
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	2b0c      	cmp	r3, #12
 8005f70:	d119      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d116      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f78:	4b7c      	ldr	r3, [pc, #496]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <HAL_RCC_OscConfig+0x328>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e24d      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f90:	4b76      	ldr	r3, [pc, #472]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	061b      	lsls	r3, r3, #24
 8005f9e:	4973      	ldr	r1, [pc, #460]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fa4:	e040      	b.n	8006028 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d023      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fae:	4b6f      	ldr	r3, [pc, #444]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a6e      	ldr	r2, [pc, #440]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fba:	f7fe fa2f 	bl	800441c <HAL_GetTick>
 8005fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc2:	f7fe fa2b 	bl	800441c <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e22b      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fd4:	4b65      	ldr	r3, [pc, #404]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0f0      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe0:	4b62      	ldr	r3, [pc, #392]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	061b      	lsls	r3, r3, #24
 8005fee:	495f      	ldr	r1, [pc, #380]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	604b      	str	r3, [r1, #4]
 8005ff4:	e018      	b.n	8006028 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ff6:	4b5d      	ldr	r3, [pc, #372]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a5c      	ldr	r2, [pc, #368]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8005ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006002:	f7fe fa0b 	bl	800441c <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800600a:	f7fe fa07 	bl	800441c <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e207      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800601c:	4b53      	ldr	r3, [pc, #332]	; (800616c <HAL_RCC_OscConfig+0x504>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1f0      	bne.n	800600a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d03c      	beq.n	80060ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01c      	beq.n	8006076 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800603c:	4b4b      	ldr	r3, [pc, #300]	; (800616c <HAL_RCC_OscConfig+0x504>)
 800603e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006042:	4a4a      	ldr	r2, [pc, #296]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8006044:	f043 0301 	orr.w	r3, r3, #1
 8006048:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604c:	f7fe f9e6 	bl	800441c <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006054:	f7fe f9e2 	bl	800441c <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e1e2      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006066:	4b41      	ldr	r3, [pc, #260]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8006068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0ef      	beq.n	8006054 <HAL_RCC_OscConfig+0x3ec>
 8006074:	e01b      	b.n	80060ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006076:	4b3d      	ldr	r3, [pc, #244]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8006078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800607c:	4a3b      	ldr	r2, [pc, #236]	; (800616c <HAL_RCC_OscConfig+0x504>)
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006086:	f7fe f9c9 	bl	800441c <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800608e:	f7fe f9c5 	bl	800441c <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e1c5      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060a0:	4b32      	ldr	r3, [pc, #200]	; (800616c <HAL_RCC_OscConfig+0x504>)
 80060a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1ef      	bne.n	800608e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 80a6 	beq.w	8006208 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060bc:	2300      	movs	r3, #0
 80060be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80060c0:	4b2a      	ldr	r3, [pc, #168]	; (800616c <HAL_RCC_OscConfig+0x504>)
 80060c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10d      	bne.n	80060e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060cc:	4b27      	ldr	r3, [pc, #156]	; (800616c <HAL_RCC_OscConfig+0x504>)
 80060ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d0:	4a26      	ldr	r2, [pc, #152]	; (800616c <HAL_RCC_OscConfig+0x504>)
 80060d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d6:	6593      	str	r3, [r2, #88]	; 0x58
 80060d8:	4b24      	ldr	r3, [pc, #144]	; (800616c <HAL_RCC_OscConfig+0x504>)
 80060da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e0:	60bb      	str	r3, [r7, #8]
 80060e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060e4:	2301      	movs	r3, #1
 80060e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060e8:	4b21      	ldr	r3, [pc, #132]	; (8006170 <HAL_RCC_OscConfig+0x508>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d118      	bne.n	8006126 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060f4:	4b1e      	ldr	r3, [pc, #120]	; (8006170 <HAL_RCC_OscConfig+0x508>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1d      	ldr	r2, [pc, #116]	; (8006170 <HAL_RCC_OscConfig+0x508>)
 80060fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006100:	f7fe f98c 	bl	800441c <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006108:	f7fe f988 	bl	800441c <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e188      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800611a:	4b15      	ldr	r3, [pc, #84]	; (8006170 <HAL_RCC_OscConfig+0x508>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d108      	bne.n	8006140 <HAL_RCC_OscConfig+0x4d8>
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8006130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006134:	4a0d      	ldr	r2, [pc, #52]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800613e:	e029      	b.n	8006194 <HAL_RCC_OscConfig+0x52c>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2b05      	cmp	r3, #5
 8006146:	d115      	bne.n	8006174 <HAL_RCC_OscConfig+0x50c>
 8006148:	4b08      	ldr	r3, [pc, #32]	; (800616c <HAL_RCC_OscConfig+0x504>)
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614e:	4a07      	ldr	r2, [pc, #28]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8006150:	f043 0304 	orr.w	r3, r3, #4
 8006154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006158:	4b04      	ldr	r3, [pc, #16]	; (800616c <HAL_RCC_OscConfig+0x504>)
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615e:	4a03      	ldr	r2, [pc, #12]	; (800616c <HAL_RCC_OscConfig+0x504>)
 8006160:	f043 0301 	orr.w	r3, r3, #1
 8006164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006168:	e014      	b.n	8006194 <HAL_RCC_OscConfig+0x52c>
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000
 8006170:	40007000 	.word	0x40007000
 8006174:	4b91      	ldr	r3, [pc, #580]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 8006176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617a:	4a90      	ldr	r2, [pc, #576]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 800617c:	f023 0301 	bic.w	r3, r3, #1
 8006180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006184:	4b8d      	ldr	r3, [pc, #564]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618a:	4a8c      	ldr	r2, [pc, #560]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 800618c:	f023 0304 	bic.w	r3, r3, #4
 8006190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d016      	beq.n	80061ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619c:	f7fe f93e 	bl	800441c <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061a2:	e00a      	b.n	80061ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061a4:	f7fe f93a 	bl	800441c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e138      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ba:	4b80      	ldr	r3, [pc, #512]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0ed      	beq.n	80061a4 <HAL_RCC_OscConfig+0x53c>
 80061c8:	e015      	b.n	80061f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ca:	f7fe f927 	bl	800441c <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061d0:	e00a      	b.n	80061e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d2:	f7fe f923 	bl	800441c <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e121      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061e8:	4b74      	ldr	r3, [pc, #464]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1ed      	bne.n	80061d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061f6:	7ffb      	ldrb	r3, [r7, #31]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d105      	bne.n	8006208 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061fc:	4b6f      	ldr	r3, [pc, #444]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 80061fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006200:	4a6e      	ldr	r2, [pc, #440]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 8006202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006206:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 810c 	beq.w	800642a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	2b02      	cmp	r3, #2
 8006218:	f040 80d4 	bne.w	80063c4 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800621c:	4b67      	ldr	r3, [pc, #412]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f003 0203 	and.w	r2, r3, #3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	429a      	cmp	r2, r3
 800622e:	d130      	bne.n	8006292 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	3b01      	subs	r3, #1
 800623c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800623e:	429a      	cmp	r2, r3
 8006240:	d127      	bne.n	8006292 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800624e:	429a      	cmp	r2, r3
 8006250:	d11f      	bne.n	8006292 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800625c:	2a07      	cmp	r2, #7
 800625e:	bf14      	ite	ne
 8006260:	2201      	movne	r2, #1
 8006262:	2200      	moveq	r2, #0
 8006264:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006266:	4293      	cmp	r3, r2
 8006268:	d113      	bne.n	8006292 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	3b01      	subs	r3, #1
 8006278:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800627a:	429a      	cmp	r2, r3
 800627c:	d109      	bne.n	8006292 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	085b      	lsrs	r3, r3, #1
 800628a:	3b01      	subs	r3, #1
 800628c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800628e:	429a      	cmp	r2, r3
 8006290:	d06e      	beq.n	8006370 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b0c      	cmp	r3, #12
 8006296:	d069      	beq.n	800636c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006298:	4b48      	ldr	r3, [pc, #288]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80062a4:	4b45      	ldr	r3, [pc, #276]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0bb      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80062b4:	4b41      	ldr	r3, [pc, #260]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a40      	ldr	r2, [pc, #256]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 80062ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80062c0:	f7fe f8ac 	bl	800441c <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c8:	f7fe f8a8 	bl	800441c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e0a8      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062da:	4b38      	ldr	r3, [pc, #224]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f0      	bne.n	80062c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062e6:	4b35      	ldr	r3, [pc, #212]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	4b35      	ldr	r3, [pc, #212]	; (80063c0 <HAL_RCC_OscConfig+0x758>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80062f6:	3a01      	subs	r2, #1
 80062f8:	0112      	lsls	r2, r2, #4
 80062fa:	4311      	orrs	r1, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006300:	0212      	lsls	r2, r2, #8
 8006302:	4311      	orrs	r1, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006308:	0852      	lsrs	r2, r2, #1
 800630a:	3a01      	subs	r2, #1
 800630c:	0552      	lsls	r2, r2, #21
 800630e:	4311      	orrs	r1, r2
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006314:	0852      	lsrs	r2, r2, #1
 8006316:	3a01      	subs	r2, #1
 8006318:	0652      	lsls	r2, r2, #25
 800631a:	4311      	orrs	r1, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006320:	0912      	lsrs	r2, r2, #4
 8006322:	0452      	lsls	r2, r2, #17
 8006324:	430a      	orrs	r2, r1
 8006326:	4925      	ldr	r1, [pc, #148]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 8006328:	4313      	orrs	r3, r2
 800632a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800632c:	4b23      	ldr	r3, [pc, #140]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a22      	ldr	r2, [pc, #136]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 8006332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006336:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006338:	4b20      	ldr	r3, [pc, #128]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4a1f      	ldr	r2, [pc, #124]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 800633e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006342:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006344:	f7fe f86a 	bl	800441c <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800634c:	f7fe f866 	bl	800441c <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e066      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800635e:	4b17      	ldr	r3, [pc, #92]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800636a:	e05e      	b.n	800642a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e05d      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d156      	bne.n	800642a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a0e      	ldr	r2, [pc, #56]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 8006382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006386:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	4a0b      	ldr	r2, [pc, #44]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 800638e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006392:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006394:	f7fe f842 	bl	800441c <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800639c:	f7fe f83e 	bl	800441c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e03e      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ae:	4b03      	ldr	r3, [pc, #12]	; (80063bc <HAL_RCC_OscConfig+0x754>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f0      	beq.n	800639c <HAL_RCC_OscConfig+0x734>
 80063ba:	e036      	b.n	800642a <HAL_RCC_OscConfig+0x7c2>
 80063bc:	40021000 	.word	0x40021000
 80063c0:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2b0c      	cmp	r3, #12
 80063c8:	d02d      	beq.n	8006426 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ca:	4b1a      	ldr	r3, [pc, #104]	; (8006434 <HAL_RCC_OscConfig+0x7cc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a19      	ldr	r2, [pc, #100]	; (8006434 <HAL_RCC_OscConfig+0x7cc>)
 80063d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80063d6:	4b17      	ldr	r3, [pc, #92]	; (8006434 <HAL_RCC_OscConfig+0x7cc>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d105      	bne.n	80063ee <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80063e2:	4b14      	ldr	r3, [pc, #80]	; (8006434 <HAL_RCC_OscConfig+0x7cc>)
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	4a13      	ldr	r2, [pc, #76]	; (8006434 <HAL_RCC_OscConfig+0x7cc>)
 80063e8:	f023 0303 	bic.w	r3, r3, #3
 80063ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80063ee:	4b11      	ldr	r3, [pc, #68]	; (8006434 <HAL_RCC_OscConfig+0x7cc>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	4a10      	ldr	r2, [pc, #64]	; (8006434 <HAL_RCC_OscConfig+0x7cc>)
 80063f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80063f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fe:	f7fe f80d 	bl	800441c <HAL_GetTick>
 8006402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006404:	e008      	b.n	8006418 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006406:	f7fe f809 	bl	800441c <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d901      	bls.n	8006418 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e009      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006418:	4b06      	ldr	r3, [pc, #24]	; (8006434 <HAL_RCC_OscConfig+0x7cc>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1f0      	bne.n	8006406 <HAL_RCC_OscConfig+0x79e>
 8006424:	e001      	b.n	800642a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3720      	adds	r7, #32
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	40021000 	.word	0x40021000

08006438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e0c8      	b.n	80065de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800644c:	4b66      	ldr	r3, [pc, #408]	; (80065e8 <HAL_RCC_ClockConfig+0x1b0>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d910      	bls.n	800647c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645a:	4b63      	ldr	r3, [pc, #396]	; (80065e8 <HAL_RCC_ClockConfig+0x1b0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f023 0207 	bic.w	r2, r3, #7
 8006462:	4961      	ldr	r1, [pc, #388]	; (80065e8 <HAL_RCC_ClockConfig+0x1b0>)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	4313      	orrs	r3, r2
 8006468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800646a:	4b5f      	ldr	r3, [pc, #380]	; (80065e8 <HAL_RCC_ClockConfig+0x1b0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e0b0      	b.n	80065de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d04c      	beq.n	8006522 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b03      	cmp	r3, #3
 800648e:	d107      	bne.n	80064a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006490:	4b56      	ldr	r3, [pc, #344]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d121      	bne.n	80064e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e09e      	b.n	80065de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d107      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064a8:	4b50      	ldr	r3, [pc, #320]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d115      	bne.n	80064e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e092      	b.n	80065de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d107      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064c0:	4b4a      	ldr	r3, [pc, #296]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e086      	b.n	80065de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064d0:	4b46      	ldr	r3, [pc, #280]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e07e      	b.n	80065de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064e0:	4b42      	ldr	r3, [pc, #264]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f023 0203 	bic.w	r2, r3, #3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	493f      	ldr	r1, [pc, #252]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f2:	f7fd ff93 	bl	800441c <HAL_GetTick>
 80064f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f8:	e00a      	b.n	8006510 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064fa:	f7fd ff8f 	bl	800441c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	f241 3288 	movw	r2, #5000	; 0x1388
 8006508:	4293      	cmp	r3, r2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e066      	b.n	80065de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006510:	4b36      	ldr	r3, [pc, #216]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 020c 	and.w	r2, r3, #12
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	429a      	cmp	r2, r3
 8006520:	d1eb      	bne.n	80064fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d008      	beq.n	8006540 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800652e:	4b2f      	ldr	r3, [pc, #188]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	492c      	ldr	r1, [pc, #176]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 800653c:	4313      	orrs	r3, r2
 800653e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006540:	4b29      	ldr	r3, [pc, #164]	; (80065e8 <HAL_RCC_ClockConfig+0x1b0>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d210      	bcs.n	8006570 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654e:	4b26      	ldr	r3, [pc, #152]	; (80065e8 <HAL_RCC_ClockConfig+0x1b0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f023 0207 	bic.w	r2, r3, #7
 8006556:	4924      	ldr	r1, [pc, #144]	; (80065e8 <HAL_RCC_ClockConfig+0x1b0>)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	4313      	orrs	r3, r2
 800655c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800655e:	4b22      	ldr	r3, [pc, #136]	; (80065e8 <HAL_RCC_ClockConfig+0x1b0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e036      	b.n	80065de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d008      	beq.n	800658e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800657c:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	4918      	ldr	r1, [pc, #96]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 800658a:	4313      	orrs	r3, r2
 800658c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0308 	and.w	r3, r3, #8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800659a:	4b14      	ldr	r3, [pc, #80]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4910      	ldr	r1, [pc, #64]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065ae:	f000 f825 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 80065b2:	4602      	mov	r2, r0
 80065b4:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <HAL_RCC_ClockConfig+0x1b4>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	091b      	lsrs	r3, r3, #4
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	490c      	ldr	r1, [pc, #48]	; (80065f0 <HAL_RCC_ClockConfig+0x1b8>)
 80065c0:	5ccb      	ldrb	r3, [r1, r3]
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ca:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80065ce:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <HAL_RCC_ClockConfig+0x1c0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fd fdae 	bl	8004134 <HAL_InitTick>
 80065d8:	4603      	mov	r3, r0
 80065da:	72fb      	strb	r3, [r7, #11]

  return status;
 80065dc:	7afb      	ldrb	r3, [r7, #11]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40022000 	.word	0x40022000
 80065ec:	40021000 	.word	0x40021000
 80065f0:	0800cbb0 	.word	0x0800cbb0
 80065f4:	20000000 	.word	0x20000000
 80065f8:	20000004 	.word	0x20000004

080065fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b089      	sub	sp, #36	; 0x24
 8006600:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	2300      	movs	r3, #0
 8006608:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800660a:	4b3e      	ldr	r3, [pc, #248]	; (8006704 <HAL_RCC_GetSysClockFreq+0x108>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 030c 	and.w	r3, r3, #12
 8006612:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006614:	4b3b      	ldr	r3, [pc, #236]	; (8006704 <HAL_RCC_GetSysClockFreq+0x108>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0303 	and.w	r3, r3, #3
 800661c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0x34>
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b0c      	cmp	r3, #12
 8006628:	d121      	bne.n	800666e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d11e      	bne.n	800666e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006630:	4b34      	ldr	r3, [pc, #208]	; (8006704 <HAL_RCC_GetSysClockFreq+0x108>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d107      	bne.n	800664c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800663c:	4b31      	ldr	r3, [pc, #196]	; (8006704 <HAL_RCC_GetSysClockFreq+0x108>)
 800663e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	e005      	b.n	8006658 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800664c:	4b2d      	ldr	r3, [pc, #180]	; (8006704 <HAL_RCC_GetSysClockFreq+0x108>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	091b      	lsrs	r3, r3, #4
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006658:	4a2b      	ldr	r2, [pc, #172]	; (8006708 <HAL_RCC_GetSysClockFreq+0x10c>)
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006660:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10d      	bne.n	8006684 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800666c:	e00a      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	2b04      	cmp	r3, #4
 8006672:	d102      	bne.n	800667a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006674:	4b25      	ldr	r3, [pc, #148]	; (800670c <HAL_RCC_GetSysClockFreq+0x110>)
 8006676:	61bb      	str	r3, [r7, #24]
 8006678:	e004      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b08      	cmp	r3, #8
 800667e:	d101      	bne.n	8006684 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006680:	4b23      	ldr	r3, [pc, #140]	; (8006710 <HAL_RCC_GetSysClockFreq+0x114>)
 8006682:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2b0c      	cmp	r3, #12
 8006688:	d134      	bne.n	80066f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800668a:	4b1e      	ldr	r3, [pc, #120]	; (8006704 <HAL_RCC_GetSysClockFreq+0x108>)
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d003      	beq.n	80066a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b03      	cmp	r3, #3
 800669e:	d003      	beq.n	80066a8 <HAL_RCC_GetSysClockFreq+0xac>
 80066a0:	e005      	b.n	80066ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80066a2:	4b1a      	ldr	r3, [pc, #104]	; (800670c <HAL_RCC_GetSysClockFreq+0x110>)
 80066a4:	617b      	str	r3, [r7, #20]
      break;
 80066a6:	e005      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80066a8:	4b19      	ldr	r3, [pc, #100]	; (8006710 <HAL_RCC_GetSysClockFreq+0x114>)
 80066aa:	617b      	str	r3, [r7, #20]
      break;
 80066ac:	e002      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	617b      	str	r3, [r7, #20]
      break;
 80066b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066b4:	4b13      	ldr	r3, [pc, #76]	; (8006704 <HAL_RCC_GetSysClockFreq+0x108>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	091b      	lsrs	r3, r3, #4
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	3301      	adds	r3, #1
 80066c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80066c2:	4b10      	ldr	r3, [pc, #64]	; (8006704 <HAL_RCC_GetSysClockFreq+0x108>)
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	fb03 f202 	mul.w	r2, r3, r2
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066da:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <HAL_RCC_GetSysClockFreq+0x108>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	0e5b      	lsrs	r3, r3, #25
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	3301      	adds	r3, #1
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80066f4:	69bb      	ldr	r3, [r7, #24]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3724      	adds	r7, #36	; 0x24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40021000 	.word	0x40021000
 8006708:	0800cbc8 	.word	0x0800cbc8
 800670c:	00f42400 	.word	0x00f42400
 8006710:	007a1200 	.word	0x007a1200

08006714 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006718:	4b03      	ldr	r3, [pc, #12]	; (8006728 <HAL_RCC_GetHCLKFreq+0x14>)
 800671a:	681b      	ldr	r3, [r3, #0]
}
 800671c:	4618      	mov	r0, r3
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20000000 	.word	0x20000000

0800672c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006730:	f7ff fff0 	bl	8006714 <HAL_RCC_GetHCLKFreq>
 8006734:	4602      	mov	r2, r0
 8006736:	4b06      	ldr	r3, [pc, #24]	; (8006750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	0a1b      	lsrs	r3, r3, #8
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	4904      	ldr	r1, [pc, #16]	; (8006754 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006742:	5ccb      	ldrb	r3, [r1, r3]
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800674c:	4618      	mov	r0, r3
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40021000 	.word	0x40021000
 8006754:	0800cbc0 	.word	0x0800cbc0

08006758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800675c:	f7ff ffda 	bl	8006714 <HAL_RCC_GetHCLKFreq>
 8006760:	4602      	mov	r2, r0
 8006762:	4b06      	ldr	r3, [pc, #24]	; (800677c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	0adb      	lsrs	r3, r3, #11
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	4904      	ldr	r1, [pc, #16]	; (8006780 <HAL_RCC_GetPCLK2Freq+0x28>)
 800676e:	5ccb      	ldrb	r3, [r1, r3]
 8006770:	f003 031f 	and.w	r3, r3, #31
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006778:	4618      	mov	r0, r3
 800677a:	bd80      	pop	{r7, pc}
 800677c:	40021000 	.word	0x40021000
 8006780:	0800cbc0 	.word	0x0800cbc0

08006784 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	220f      	movs	r2, #15
 8006792:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006794:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <HAL_RCC_GetClockConfig+0x5c>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 0203 	and.w	r2, r3, #3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <HAL_RCC_GetClockConfig+0x5c>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80067ac:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <HAL_RCC_GetClockConfig+0x5c>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80067b8:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <HAL_RCC_GetClockConfig+0x5c>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	08db      	lsrs	r3, r3, #3
 80067be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80067c6:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <HAL_RCC_GetClockConfig+0x60>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0207 	and.w	r2, r3, #7
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	601a      	str	r2, [r3, #0]
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	40021000 	.word	0x40021000
 80067e4:	40022000 	.word	0x40022000

080067e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80067f4:	4b2a      	ldr	r3, [pc, #168]	; (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006800:	f7ff f9ce 	bl	8005ba0 <HAL_PWREx_GetVoltageRange>
 8006804:	6178      	str	r0, [r7, #20]
 8006806:	e014      	b.n	8006832 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006808:	4b25      	ldr	r3, [pc, #148]	; (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800680a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680c:	4a24      	ldr	r2, [pc, #144]	; (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800680e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006812:	6593      	str	r3, [r2, #88]	; 0x58
 8006814:	4b22      	ldr	r3, [pc, #136]	; (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006820:	f7ff f9be 	bl	8005ba0 <HAL_PWREx_GetVoltageRange>
 8006824:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006826:	4b1e      	ldr	r3, [pc, #120]	; (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682a:	4a1d      	ldr	r2, [pc, #116]	; (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800682c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006830:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006838:	d10b      	bne.n	8006852 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b80      	cmp	r3, #128	; 0x80
 800683e:	d919      	bls.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2ba0      	cmp	r3, #160	; 0xa0
 8006844:	d902      	bls.n	800684c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006846:	2302      	movs	r3, #2
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	e013      	b.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800684c:	2301      	movs	r3, #1
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	e010      	b.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b80      	cmp	r3, #128	; 0x80
 8006856:	d902      	bls.n	800685e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006858:	2303      	movs	r3, #3
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	e00a      	b.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b80      	cmp	r3, #128	; 0x80
 8006862:	d102      	bne.n	800686a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006864:	2302      	movs	r3, #2
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	e004      	b.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b70      	cmp	r3, #112	; 0x70
 800686e:	d101      	bne.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006870:	2301      	movs	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f023 0207 	bic.w	r2, r3, #7
 800687c:	4909      	ldr	r1, [pc, #36]	; (80068a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006884:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	429a      	cmp	r2, r3
 8006890:	d001      	beq.n	8006896 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e000      	b.n	8006898 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40021000 	.word	0x40021000
 80068a4:	40022000 	.word	0x40022000

080068a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068b0:	2300      	movs	r3, #0
 80068b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068b4:	2300      	movs	r3, #0
 80068b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d041      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80068cc:	d02a      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80068ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80068d2:	d824      	bhi.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80068d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068d8:	d008      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80068da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068de:	d81e      	bhi.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80068e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e8:	d010      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80068ea:	e018      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80068ec:	4b86      	ldr	r3, [pc, #536]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	4a85      	ldr	r2, [pc, #532]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068f8:	e015      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	2100      	movs	r1, #0
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fabb 	bl	8006e7c <RCCEx_PLLSAI1_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800690a:	e00c      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3320      	adds	r3, #32
 8006910:	2100      	movs	r1, #0
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fba6 	bl	8007064 <RCCEx_PLLSAI2_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800691c:	e003      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	74fb      	strb	r3, [r7, #19]
      break;
 8006922:	e000      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006926:	7cfb      	ldrb	r3, [r7, #19]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10b      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800692c:	4b76      	ldr	r3, [pc, #472]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800692e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006932:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800693a:	4973      	ldr	r1, [pc, #460]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800693c:	4313      	orrs	r3, r2
 800693e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006942:	e001      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006944:	7cfb      	ldrb	r3, [r7, #19]
 8006946:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d041      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006958:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800695c:	d02a      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800695e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006962:	d824      	bhi.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006968:	d008      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800696a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800696e:	d81e      	bhi.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006978:	d010      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800697a:	e018      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800697c:	4b62      	ldr	r3, [pc, #392]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4a61      	ldr	r2, [pc, #388]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006986:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006988:	e015      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3304      	adds	r3, #4
 800698e:	2100      	movs	r1, #0
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fa73 	bl	8006e7c <RCCEx_PLLSAI1_Config>
 8006996:	4603      	mov	r3, r0
 8006998:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800699a:	e00c      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3320      	adds	r3, #32
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fb5e 	bl	8007064 <RCCEx_PLLSAI2_Config>
 80069a8:	4603      	mov	r3, r0
 80069aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80069ac:	e003      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	74fb      	strb	r3, [r7, #19]
      break;
 80069b2:	e000      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80069b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b6:	7cfb      	ldrb	r3, [r7, #19]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10b      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069bc:	4b52      	ldr	r3, [pc, #328]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ca:	494f      	ldr	r1, [pc, #316]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80069d2:	e001      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d4:	7cfb      	ldrb	r3, [r7, #19]
 80069d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 80a0 	beq.w	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069e6:	2300      	movs	r3, #0
 80069e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069ea:	4b47      	ldr	r3, [pc, #284]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00d      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a00:	4b41      	ldr	r3, [pc, #260]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a04:	4a40      	ldr	r2, [pc, #256]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8006a0c:	4b3e      	ldr	r3, [pc, #248]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a1c:	4b3b      	ldr	r3, [pc, #236]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a3a      	ldr	r2, [pc, #232]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a28:	f7fd fcf8 	bl	800441c <HAL_GetTick>
 8006a2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a2e:	e009      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a30:	f7fd fcf4 	bl	800441c <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d902      	bls.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	74fb      	strb	r3, [r7, #19]
        break;
 8006a42:	e005      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a44:	4b31      	ldr	r3, [pc, #196]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0ef      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006a50:	7cfb      	ldrb	r3, [r7, #19]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d15c      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a56:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01f      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d019      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a74:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a80:	4b21      	ldr	r3, [pc, #132]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	4a20      	ldr	r2, [pc, #128]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a90:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a96:	4a1c      	ldr	r2, [pc, #112]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006aa0:	4a19      	ldr	r2, [pc, #100]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d016      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab2:	f7fd fcb3 	bl	800441c <HAL_GetTick>
 8006ab6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ab8:	e00b      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aba:	f7fd fcaf 	bl	800441c <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d902      	bls.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	74fb      	strb	r3, [r7, #19]
            break;
 8006ad0:	e006      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ad2:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0ec      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006ae0:	7cfb      	ldrb	r3, [r7, #19]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10c      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ae6:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af6:	4904      	ldr	r1, [pc, #16]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006afe:	e009      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b00:	7cfb      	ldrb	r3, [r7, #19]
 8006b02:	74bb      	strb	r3, [r7, #18]
 8006b04:	e006      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006b06:	bf00      	nop
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b10:	7cfb      	ldrb	r3, [r7, #19]
 8006b12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b14:	7c7b      	ldrb	r3, [r7, #17]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d105      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b1a:	4b9e      	ldr	r3, [pc, #632]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1e:	4a9d      	ldr	r2, [pc, #628]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b32:	4b98      	ldr	r3, [pc, #608]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b38:	f023 0203 	bic.w	r2, r3, #3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	4994      	ldr	r1, [pc, #592]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b54:	4b8f      	ldr	r3, [pc, #572]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5a:	f023 020c 	bic.w	r2, r3, #12
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	498c      	ldr	r1, [pc, #560]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b76:	4b87      	ldr	r3, [pc, #540]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	4983      	ldr	r1, [pc, #524]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b98:	4b7e      	ldr	r3, [pc, #504]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	497b      	ldr	r1, [pc, #492]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0310 	and.w	r3, r3, #16
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bba:	4b76      	ldr	r3, [pc, #472]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc8:	4972      	ldr	r1, [pc, #456]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00a      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bdc:	4b6d      	ldr	r3, [pc, #436]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bea:	496a      	ldr	r1, [pc, #424]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bfe:	4b65      	ldr	r3, [pc, #404]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0c:	4961      	ldr	r1, [pc, #388]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c20:	4b5c      	ldr	r3, [pc, #368]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c2e:	4959      	ldr	r1, [pc, #356]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c42:	4b54      	ldr	r3, [pc, #336]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c50:	4950      	ldr	r1, [pc, #320]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c64:	4b4b      	ldr	r3, [pc, #300]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	4948      	ldr	r1, [pc, #288]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c86:	4b43      	ldr	r3, [pc, #268]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c94:	493f      	ldr	r1, [pc, #252]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d028      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ca8:	4b3a      	ldr	r3, [pc, #232]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb6:	4937      	ldr	r1, [pc, #220]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cc6:	d106      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cc8:	4b32      	ldr	r3, [pc, #200]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	4a31      	ldr	r2, [pc, #196]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cd2:	60d3      	str	r3, [r2, #12]
 8006cd4:	e011      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cde:	d10c      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 f8c8 	bl	8006e7c <RCCEx_PLLSAI1_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006cf0:	7cfb      	ldrb	r3, [r7, #19]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006cf6:	7cfb      	ldrb	r3, [r7, #19]
 8006cf8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d028      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006d06:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d14:	491f      	ldr	r1, [pc, #124]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d24:	d106      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d26:	4b1b      	ldr	r3, [pc, #108]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	4a1a      	ldr	r2, [pc, #104]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d30:	60d3      	str	r3, [r2, #12]
 8006d32:	e011      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d3c:	d10c      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3304      	adds	r3, #4
 8006d42:	2101      	movs	r1, #1
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 f899 	bl	8006e7c <RCCEx_PLLSAI1_Config>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d4e:	7cfb      	ldrb	r3, [r7, #19]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006d54:	7cfb      	ldrb	r3, [r7, #19]
 8006d56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d02b      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d64:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d72:	4908      	ldr	r1, [pc, #32]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d82:	d109      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d84:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	4a02      	ldr	r2, [pc, #8]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d8e:	60d3      	str	r3, [r2, #12]
 8006d90:	e014      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006d92:	bf00      	nop
 8006d94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006da0:	d10c      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3304      	adds	r3, #4
 8006da6:	2101      	movs	r1, #1
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 f867 	bl	8006e7c <RCCEx_PLLSAI1_Config>
 8006dae:	4603      	mov	r3, r0
 8006db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006db2:	7cfb      	ldrb	r3, [r7, #19]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006db8:	7cfb      	ldrb	r3, [r7, #19]
 8006dba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d02f      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dc8:	4b2b      	ldr	r3, [pc, #172]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dd6:	4928      	ldr	r1, [pc, #160]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006de6:	d10d      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	2102      	movs	r1, #2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 f844 	bl	8006e7c <RCCEx_PLLSAI1_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006df8:	7cfb      	ldrb	r3, [r7, #19]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d014      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006dfe:	7cfb      	ldrb	r3, [r7, #19]
 8006e00:	74bb      	strb	r3, [r7, #18]
 8006e02:	e011      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3320      	adds	r3, #32
 8006e12:	2102      	movs	r1, #2
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 f925 	bl	8007064 <RCCEx_PLLSAI2_Config>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e1e:	7cfb      	ldrb	r3, [r7, #19]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006e24:	7cfb      	ldrb	r3, [r7, #19]
 8006e26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e34:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e42:	490d      	ldr	r1, [pc, #52]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00b      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e56:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e66:	4904      	ldr	r1, [pc, #16]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006e6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40021000 	.word	0x40021000

08006e7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e8a:	4b75      	ldr	r3, [pc, #468]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d018      	beq.n	8006ec8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006e96:	4b72      	ldr	r3, [pc, #456]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f003 0203 	and.w	r2, r3, #3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d10d      	bne.n	8006ec2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d009      	beq.n	8006ec2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006eae:	4b6c      	ldr	r3, [pc, #432]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	091b      	lsrs	r3, r3, #4
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
       ||
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d047      	beq.n	8006f52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	73fb      	strb	r3, [r7, #15]
 8006ec6:	e044      	b.n	8006f52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d018      	beq.n	8006f02 <RCCEx_PLLSAI1_Config+0x86>
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d825      	bhi.n	8006f20 <RCCEx_PLLSAI1_Config+0xa4>
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d002      	beq.n	8006ede <RCCEx_PLLSAI1_Config+0x62>
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d009      	beq.n	8006ef0 <RCCEx_PLLSAI1_Config+0x74>
 8006edc:	e020      	b.n	8006f20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ede:	4b60      	ldr	r3, [pc, #384]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d11d      	bne.n	8006f26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006eee:	e01a      	b.n	8006f26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ef0:	4b5b      	ldr	r3, [pc, #364]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d116      	bne.n	8006f2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f00:	e013      	b.n	8006f2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f02:	4b57      	ldr	r3, [pc, #348]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10f      	bne.n	8006f2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f0e:	4b54      	ldr	r3, [pc, #336]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d109      	bne.n	8006f2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f1e:	e006      	b.n	8006f2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]
      break;
 8006f24:	e004      	b.n	8006f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f26:	bf00      	nop
 8006f28:	e002      	b.n	8006f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f2a:	bf00      	nop
 8006f2c:	e000      	b.n	8006f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10d      	bne.n	8006f52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f36:	4b4a      	ldr	r3, [pc, #296]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6819      	ldr	r1, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	430b      	orrs	r3, r1
 8006f4c:	4944      	ldr	r1, [pc, #272]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d17d      	bne.n	8007054 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006f58:	4b41      	ldr	r3, [pc, #260]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a40      	ldr	r2, [pc, #256]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f64:	f7fd fa5a 	bl	800441c <HAL_GetTick>
 8006f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006f6a:	e009      	b.n	8006f80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f6c:	f7fd fa56 	bl	800441c <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d902      	bls.n	8006f80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8006f7e:	e005      	b.n	8006f8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006f80:	4b37      	ldr	r3, [pc, #220]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1ef      	bne.n	8006f6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d160      	bne.n	8007054 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d111      	bne.n	8006fbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f98:	4b31      	ldr	r3, [pc, #196]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6892      	ldr	r2, [r2, #8]
 8006fa8:	0211      	lsls	r1, r2, #8
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	68d2      	ldr	r2, [r2, #12]
 8006fae:	0912      	lsrs	r2, r2, #4
 8006fb0:	0452      	lsls	r2, r2, #17
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	492a      	ldr	r1, [pc, #168]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	610b      	str	r3, [r1, #16]
 8006fba:	e027      	b.n	800700c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d112      	bne.n	8006fe8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006fc2:	4b27      	ldr	r3, [pc, #156]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006fca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6892      	ldr	r2, [r2, #8]
 8006fd2:	0211      	lsls	r1, r2, #8
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6912      	ldr	r2, [r2, #16]
 8006fd8:	0852      	lsrs	r2, r2, #1
 8006fda:	3a01      	subs	r2, #1
 8006fdc:	0552      	lsls	r2, r2, #21
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	491f      	ldr	r1, [pc, #124]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	610b      	str	r3, [r1, #16]
 8006fe6:	e011      	b.n	800700c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006fe8:	4b1d      	ldr	r3, [pc, #116]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ff0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6892      	ldr	r2, [r2, #8]
 8006ff8:	0211      	lsls	r1, r2, #8
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6952      	ldr	r2, [r2, #20]
 8006ffe:	0852      	lsrs	r2, r2, #1
 8007000:	3a01      	subs	r2, #1
 8007002:	0652      	lsls	r2, r2, #25
 8007004:	430a      	orrs	r2, r1
 8007006:	4916      	ldr	r1, [pc, #88]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007008:	4313      	orrs	r3, r2
 800700a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800700c:	4b14      	ldr	r3, [pc, #80]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a13      	ldr	r2, [pc, #76]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007018:	f7fd fa00 	bl	800441c <HAL_GetTick>
 800701c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800701e:	e009      	b.n	8007034 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007020:	f7fd f9fc 	bl	800441c <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d902      	bls.n	8007034 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	73fb      	strb	r3, [r7, #15]
          break;
 8007032:	e005      	b.n	8007040 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007034:	4b0a      	ldr	r3, [pc, #40]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0ef      	beq.n	8007020 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007046:	4b06      	ldr	r3, [pc, #24]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	4904      	ldr	r1, [pc, #16]	; (8007060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007050:	4313      	orrs	r3, r2
 8007052:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007054:	7bfb      	ldrb	r3, [r7, #15]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40021000 	.word	0x40021000

08007064 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007072:	4b6a      	ldr	r3, [pc, #424]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d018      	beq.n	80070b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800707e:	4b67      	ldr	r3, [pc, #412]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f003 0203 	and.w	r2, r3, #3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d10d      	bne.n	80070aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
       ||
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007096:	4b61      	ldr	r3, [pc, #388]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
       ||
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d047      	beq.n	800713a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	73fb      	strb	r3, [r7, #15]
 80070ae:	e044      	b.n	800713a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d018      	beq.n	80070ea <RCCEx_PLLSAI2_Config+0x86>
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d825      	bhi.n	8007108 <RCCEx_PLLSAI2_Config+0xa4>
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d002      	beq.n	80070c6 <RCCEx_PLLSAI2_Config+0x62>
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d009      	beq.n	80070d8 <RCCEx_PLLSAI2_Config+0x74>
 80070c4:	e020      	b.n	8007108 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80070c6:	4b55      	ldr	r3, [pc, #340]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d11d      	bne.n	800710e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070d6:	e01a      	b.n	800710e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80070d8:	4b50      	ldr	r3, [pc, #320]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d116      	bne.n	8007112 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070e8:	e013      	b.n	8007112 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80070ea:	4b4c      	ldr	r3, [pc, #304]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10f      	bne.n	8007116 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80070f6:	4b49      	ldr	r3, [pc, #292]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d109      	bne.n	8007116 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007106:	e006      	b.n	8007116 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
      break;
 800710c:	e004      	b.n	8007118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800710e:	bf00      	nop
 8007110:	e002      	b.n	8007118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007112:	bf00      	nop
 8007114:	e000      	b.n	8007118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007116:	bf00      	nop
    }

    if(status == HAL_OK)
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10d      	bne.n	800713a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800711e:	4b3f      	ldr	r3, [pc, #252]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6819      	ldr	r1, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	3b01      	subs	r3, #1
 8007130:	011b      	lsls	r3, r3, #4
 8007132:	430b      	orrs	r3, r1
 8007134:	4939      	ldr	r1, [pc, #228]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007136:	4313      	orrs	r3, r2
 8007138:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d167      	bne.n	8007210 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007140:	4b36      	ldr	r3, [pc, #216]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a35      	ldr	r2, [pc, #212]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800714a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800714c:	f7fd f966 	bl	800441c <HAL_GetTick>
 8007150:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007152:	e009      	b.n	8007168 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007154:	f7fd f962 	bl	800441c <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d902      	bls.n	8007168 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	73fb      	strb	r3, [r7, #15]
        break;
 8007166:	e005      	b.n	8007174 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007168:	4b2c      	ldr	r3, [pc, #176]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1ef      	bne.n	8007154 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d14a      	bne.n	8007210 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d111      	bne.n	80071a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007180:	4b26      	ldr	r3, [pc, #152]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6892      	ldr	r2, [r2, #8]
 8007190:	0211      	lsls	r1, r2, #8
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68d2      	ldr	r2, [r2, #12]
 8007196:	0912      	lsrs	r2, r2, #4
 8007198:	0452      	lsls	r2, r2, #17
 800719a:	430a      	orrs	r2, r1
 800719c:	491f      	ldr	r1, [pc, #124]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	614b      	str	r3, [r1, #20]
 80071a2:	e011      	b.n	80071c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80071a4:	4b1d      	ldr	r3, [pc, #116]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80071ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6892      	ldr	r2, [r2, #8]
 80071b4:	0211      	lsls	r1, r2, #8
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6912      	ldr	r2, [r2, #16]
 80071ba:	0852      	lsrs	r2, r2, #1
 80071bc:	3a01      	subs	r2, #1
 80071be:	0652      	lsls	r2, r2, #25
 80071c0:	430a      	orrs	r2, r1
 80071c2:	4916      	ldr	r1, [pc, #88]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80071c8:	4b14      	ldr	r3, [pc, #80]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a13      	ldr	r2, [pc, #76]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d4:	f7fd f922 	bl	800441c <HAL_GetTick>
 80071d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80071da:	e009      	b.n	80071f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80071dc:	f7fd f91e 	bl	800441c <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d902      	bls.n	80071f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	73fb      	strb	r3, [r7, #15]
          break;
 80071ee:	e005      	b.n	80071fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80071f0:	4b0a      	ldr	r3, [pc, #40]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0ef      	beq.n	80071dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007202:	4b06      	ldr	r3, [pc, #24]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007204:	695a      	ldr	r2, [r3, #20]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	4904      	ldr	r1, [pc, #16]	; (800721c <RCCEx_PLLSAI2_Config+0x1b8>)
 800720c:	4313      	orrs	r3, r2
 800720e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40021000 	.word	0x40021000

08007220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e095      	b.n	800735e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	2b00      	cmp	r3, #0
 8007238:	d108      	bne.n	800724c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007242:	d009      	beq.n	8007258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	61da      	str	r2, [r3, #28]
 800724a:	e005      	b.n	8007258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fc fef2 	bl	800405c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800728e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007298:	d902      	bls.n	80072a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	e002      	b.n	80072a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80072ae:	d007      	beq.n	80072c0 <HAL_SPI_Init+0xa0>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072b8:	d002      	beq.n	80072c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007302:	ea42 0103 	orr.w	r1, r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	f003 0204 	and.w	r2, r3, #4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	f003 0310 	and.w	r3, r3, #16
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800733c:	ea42 0103 	orr.w	r1, r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b088      	sub	sp, #32
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	4613      	mov	r3, r2
 8007374:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_SPI_Transmit+0x22>
 8007384:	2302      	movs	r3, #2
 8007386:	e158      	b.n	800763a <HAL_SPI_Transmit+0x2d4>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007390:	f7fd f844 	bl	800441c <HAL_GetTick>
 8007394:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d002      	beq.n	80073ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073a6:	2302      	movs	r3, #2
 80073a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073aa:	e13d      	b.n	8007628 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_SPI_Transmit+0x52>
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d102      	bne.n	80073be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073bc:	e134      	b.n	8007628 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2203      	movs	r2, #3
 80073c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	88fa      	ldrh	r2, [r7, #6]
 80073d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	88fa      	ldrh	r2, [r7, #6]
 80073dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007408:	d10f      	bne.n	800742a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007418:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007428:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007434:	2b40      	cmp	r3, #64	; 0x40
 8007436:	d007      	beq.n	8007448 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007450:	d94b      	bls.n	80074ea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <HAL_SPI_Transmit+0xfa>
 800745a:	8afb      	ldrh	r3, [r7, #22]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d13e      	bne.n	80074de <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	881a      	ldrh	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	1c9a      	adds	r2, r3, #2
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b01      	subs	r3, #1
 800747e:	b29a      	uxth	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007484:	e02b      	b.n	80074de <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b02      	cmp	r3, #2
 8007492:	d112      	bne.n	80074ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	881a      	ldrh	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	1c9a      	adds	r2, r3, #2
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074b8:	e011      	b.n	80074de <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074ba:	f7fc ffaf 	bl	800441c <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d803      	bhi.n	80074d2 <HAL_SPI_Transmit+0x16c>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d0:	d102      	bne.n	80074d8 <HAL_SPI_Transmit+0x172>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80074dc:	e0a4      	b.n	8007628 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1ce      	bne.n	8007486 <HAL_SPI_Transmit+0x120>
 80074e8:	e07c      	b.n	80075e4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <HAL_SPI_Transmit+0x192>
 80074f2:	8afb      	ldrh	r3, [r7, #22]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d170      	bne.n	80075da <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d912      	bls.n	8007528 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007506:	881a      	ldrh	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	1c9a      	adds	r2, r3, #2
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b02      	subs	r3, #2
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007526:	e058      	b.n	80075da <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	330c      	adds	r3, #12
 8007532:	7812      	ldrb	r2, [r2, #0]
 8007534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007544:	b29b      	uxth	r3, r3
 8007546:	3b01      	subs	r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800754e:	e044      	b.n	80075da <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b02      	cmp	r3, #2
 800755c:	d12b      	bne.n	80075b6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007562:	b29b      	uxth	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	d912      	bls.n	800758e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	881a      	ldrh	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	1c9a      	adds	r2, r3, #2
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b02      	subs	r3, #2
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800758c:	e025      	b.n	80075da <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	330c      	adds	r3, #12
 8007598:	7812      	ldrb	r2, [r2, #0]
 800759a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075b4:	e011      	b.n	80075da <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075b6:	f7fc ff31 	bl	800441c <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d803      	bhi.n	80075ce <HAL_SPI_Transmit+0x268>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d102      	bne.n	80075d4 <HAL_SPI_Transmit+0x26e>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075d8:	e026      	b.n	8007628 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1b5      	bne.n	8007550 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 fce3 	bl	8007fb4 <SPI_EndRxTxTransaction>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2220      	movs	r2, #32
 80075f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007602:	2300      	movs	r3, #0
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	613b      	str	r3, [r7, #16]
 8007616:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	77fb      	strb	r3, [r7, #31]
 8007624:	e000      	b.n	8007628 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007626:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007638:	7ffb      	ldrb	r3, [r7, #31]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3720      	adds	r7, #32
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b088      	sub	sp, #32
 8007646:	af02      	add	r7, sp, #8
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	603b      	str	r3, [r7, #0]
 800764e:	4613      	mov	r3, r2
 8007650:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800765e:	d112      	bne.n	8007686 <HAL_SPI_Receive+0x44>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10e      	bne.n	8007686 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2204      	movs	r2, #4
 800766c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007670:	88fa      	ldrh	r2, [r7, #6]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	4613      	mov	r3, r2
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f910 	bl	80078a2 <HAL_SPI_TransmitReceive>
 8007682:	4603      	mov	r3, r0
 8007684:	e109      	b.n	800789a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_SPI_Receive+0x52>
 8007690:	2302      	movs	r3, #2
 8007692:	e102      	b.n	800789a <HAL_SPI_Receive+0x258>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800769c:	f7fc febe 	bl	800441c <HAL_GetTick>
 80076a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d002      	beq.n	80076b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80076ae:	2302      	movs	r3, #2
 80076b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076b2:	e0e9      	b.n	8007888 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <HAL_SPI_Receive+0x7e>
 80076ba:	88fb      	ldrh	r3, [r7, #6]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076c4:	e0e0      	b.n	8007888 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2204      	movs	r2, #4
 80076ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	88fa      	ldrh	r2, [r7, #6]
 80076de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	88fa      	ldrh	r2, [r7, #6]
 80076e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007710:	d908      	bls.n	8007724 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007720:	605a      	str	r2, [r3, #4]
 8007722:	e007      	b.n	8007734 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007732:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800773c:	d10f      	bne.n	800775e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800774c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800775c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007768:	2b40      	cmp	r3, #64	; 0x40
 800776a:	d007      	beq.n	800777c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800777a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007784:	d867      	bhi.n	8007856 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007786:	e030      	b.n	80077ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b01      	cmp	r3, #1
 8007794:	d117      	bne.n	80077c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f103 020c 	add.w	r2, r3, #12
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	7812      	ldrb	r2, [r2, #0]
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80077c4:	e011      	b.n	80077ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077c6:	f7fc fe29 	bl	800441c <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d803      	bhi.n	80077de <HAL_SPI_Receive+0x19c>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d102      	bne.n	80077e4 <HAL_SPI_Receive+0x1a2>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80077e8:	e04e      	b.n	8007888 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1c8      	bne.n	8007788 <HAL_SPI_Receive+0x146>
 80077f6:	e034      	b.n	8007862 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b01      	cmp	r3, #1
 8007804:	d115      	bne.n	8007832 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007810:	b292      	uxth	r2, r2
 8007812:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007818:	1c9a      	adds	r2, r3, #2
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007830:	e011      	b.n	8007856 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007832:	f7fc fdf3 	bl	800441c <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d803      	bhi.n	800784a <HAL_SPI_Receive+0x208>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007848:	d102      	bne.n	8007850 <HAL_SPI_Receive+0x20e>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007854:	e018      	b.n	8007888 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1ca      	bne.n	80077f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fb4c 	bl	8007f04 <SPI_EndRxTransaction>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2220      	movs	r2, #32
 8007876:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	75fb      	strb	r3, [r7, #23]
 8007884:	e000      	b.n	8007888 <HAL_SPI_Receive+0x246>
  }

error :
 8007886:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007898:	7dfb      	ldrb	r3, [r7, #23]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b08a      	sub	sp, #40	; 0x28
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078b0:	2301      	movs	r3, #1
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_SPI_TransmitReceive+0x26>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e1fb      	b.n	8007cc0 <HAL_SPI_TransmitReceive+0x41e>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078d0:	f7fc fda4 	bl	800441c <HAL_GetTick>
 80078d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80078e4:	887b      	ldrh	r3, [r7, #2]
 80078e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80078e8:	887b      	ldrh	r3, [r7, #2]
 80078ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078ec:	7efb      	ldrb	r3, [r7, #27]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d00e      	beq.n	8007910 <HAL_SPI_TransmitReceive+0x6e>
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f8:	d106      	bne.n	8007908 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d102      	bne.n	8007908 <HAL_SPI_TransmitReceive+0x66>
 8007902:	7efb      	ldrb	r3, [r7, #27]
 8007904:	2b04      	cmp	r3, #4
 8007906:	d003      	beq.n	8007910 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007908:	2302      	movs	r3, #2
 800790a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800790e:	e1cd      	b.n	8007cac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d005      	beq.n	8007922 <HAL_SPI_TransmitReceive+0x80>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_SPI_TransmitReceive+0x80>
 800791c:	887b      	ldrh	r3, [r7, #2]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d103      	bne.n	800792a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007928:	e1c0      	b.n	8007cac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b04      	cmp	r3, #4
 8007934:	d003      	beq.n	800793e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2205      	movs	r2, #5
 800793a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	887a      	ldrh	r2, [r7, #2]
 800794e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	887a      	ldrh	r2, [r7, #2]
 8007956:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	887a      	ldrh	r2, [r7, #2]
 8007964:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	887a      	ldrh	r2, [r7, #2]
 800796a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007980:	d802      	bhi.n	8007988 <HAL_SPI_TransmitReceive+0xe6>
 8007982:	8a3b      	ldrh	r3, [r7, #16]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d908      	bls.n	800799a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007996:	605a      	str	r2, [r3, #4]
 8007998:	e007      	b.n	80079aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b4:	2b40      	cmp	r3, #64	; 0x40
 80079b6:	d007      	beq.n	80079c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079d0:	d97c      	bls.n	8007acc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <HAL_SPI_TransmitReceive+0x13e>
 80079da:	8a7b      	ldrh	r3, [r7, #18]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d169      	bne.n	8007ab4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	881a      	ldrh	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	1c9a      	adds	r2, r3, #2
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a04:	e056      	b.n	8007ab4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d11b      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x1aa>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d016      	beq.n	8007a4c <HAL_SPI_TransmitReceive+0x1aa>
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d113      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	881a      	ldrh	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	1c9a      	adds	r2, r3, #2
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d11c      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x1f2>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d016      	beq.n	8007a94 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	b292      	uxth	r2, r2
 8007a72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a78:	1c9a      	adds	r2, r3, #2
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	3b01      	subs	r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a90:	2301      	movs	r3, #1
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a94:	f7fc fcc2 	bl	800441c <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d807      	bhi.n	8007ab4 <HAL_SPI_TransmitReceive+0x212>
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d003      	beq.n	8007ab4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007ab2:	e0fb      	b.n	8007cac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1a3      	bne.n	8007a06 <HAL_SPI_TransmitReceive+0x164>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d19d      	bne.n	8007a06 <HAL_SPI_TransmitReceive+0x164>
 8007aca:	e0df      	b.n	8007c8c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <HAL_SPI_TransmitReceive+0x23a>
 8007ad4:	8a7b      	ldrh	r3, [r7, #18]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	f040 80cb 	bne.w	8007c72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d912      	bls.n	8007b0c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	881a      	ldrh	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	1c9a      	adds	r2, r3, #2
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b02      	subs	r3, #2
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b0a:	e0b2      	b.n	8007c72 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	330c      	adds	r3, #12
 8007b16:	7812      	ldrb	r2, [r2, #0]
 8007b18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b32:	e09e      	b.n	8007c72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d134      	bne.n	8007bac <HAL_SPI_TransmitReceive+0x30a>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d02f      	beq.n	8007bac <HAL_SPI_TransmitReceive+0x30a>
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d12c      	bne.n	8007bac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d912      	bls.n	8007b82 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	881a      	ldrh	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	1c9a      	adds	r2, r3, #2
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	3b02      	subs	r3, #2
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b80:	e012      	b.n	8007ba8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	330c      	adds	r3, #12
 8007b8c:	7812      	ldrb	r2, [r2, #0]
 8007b8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d148      	bne.n	8007c4c <HAL_SPI_TransmitReceive+0x3aa>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d042      	beq.n	8007c4c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d923      	bls.n	8007c1a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bdc:	b292      	uxth	r2, r2
 8007bde:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be4:	1c9a      	adds	r2, r3, #2
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b02      	subs	r3, #2
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d81f      	bhi.n	8007c48 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c16:	605a      	str	r2, [r3, #4]
 8007c18:	e016      	b.n	8007c48 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f103 020c 	add.w	r2, r3, #12
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	7812      	ldrb	r2, [r2, #0]
 8007c28:	b2d2      	uxtb	r2, r2
 8007c2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c4c:	f7fc fbe6 	bl	800441c <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d803      	bhi.n	8007c64 <HAL_SPI_TransmitReceive+0x3c2>
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c62:	d102      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x3c8>
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007c70:	e01c      	b.n	8007cac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f47f af5b 	bne.w	8007b34 <HAL_SPI_TransmitReceive+0x292>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f47f af54 	bne.w	8007b34 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f98f 	bl	8007fb4 <SPI_EndRxTxTransaction>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d006      	beq.n	8007caa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	661a      	str	r2, [r3, #96]	; 0x60
 8007ca8:	e000      	b.n	8007cac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007caa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3728      	adds	r7, #40	; 0x28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007cd8:	f7fc fba0 	bl	800441c <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	1a9b      	subs	r3, r3, r2
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ce8:	f7fc fb98 	bl	800441c <HAL_GetTick>
 8007cec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cee:	4b39      	ldr	r3, [pc, #228]	; (8007dd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	015b      	lsls	r3, r3, #5
 8007cf4:	0d1b      	lsrs	r3, r3, #20
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	fb02 f303 	mul.w	r3, r2, r3
 8007cfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cfe:	e054      	b.n	8007daa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d050      	beq.n	8007daa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d08:	f7fc fb88 	bl	800441c <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d902      	bls.n	8007d1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d13d      	bne.n	8007d9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d36:	d111      	bne.n	8007d5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d40:	d004      	beq.n	8007d4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d4a:	d107      	bne.n	8007d5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d64:	d10f      	bne.n	8007d86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e017      	b.n	8007dca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4013      	ands	r3, r2
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	bf0c      	ite	eq
 8007dba:	2301      	moveq	r3, #1
 8007dbc:	2300      	movne	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d19b      	bne.n	8007d00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3720      	adds	r7, #32
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20000000 	.word	0x20000000

08007dd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08a      	sub	sp, #40	; 0x28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007dea:	f7fc fb17 	bl	800441c <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	1a9b      	subs	r3, r3, r2
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	4413      	add	r3, r2
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007dfa:	f7fc fb0f 	bl	800441c <HAL_GetTick>
 8007dfe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	330c      	adds	r3, #12
 8007e06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e08:	4b3d      	ldr	r3, [pc, #244]	; (8007f00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	00da      	lsls	r2, r3, #3
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	0d1b      	lsrs	r3, r3, #20
 8007e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1a:	fb02 f303 	mul.w	r3, r2, r3
 8007e1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007e20:	e060      	b.n	8007ee4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007e28:	d107      	bne.n	8007e3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d104      	bne.n	8007e3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e40:	d050      	beq.n	8007ee4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e42:	f7fc faeb 	bl	800441c <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d902      	bls.n	8007e58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d13d      	bne.n	8007ed4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e70:	d111      	bne.n	8007e96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7a:	d004      	beq.n	8007e86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e84:	d107      	bne.n	8007e96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e9e:	d10f      	bne.n	8007ec0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ebe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e010      	b.n	8007ef6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	4013      	ands	r3, r2
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d196      	bne.n	8007e22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3728      	adds	r7, #40	; 0x28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20000000 	.word	0x20000000

08007f04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f18:	d111      	bne.n	8007f3e <SPI_EndRxTransaction+0x3a>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f22:	d004      	beq.n	8007f2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f2c:	d107      	bne.n	8007f3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f3c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2200      	movs	r2, #0
 8007f46:	2180      	movs	r1, #128	; 0x80
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff febd 	bl	8007cc8 <SPI_WaitFlagStateUntilTimeout>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d007      	beq.n	8007f64 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f58:	f043 0220 	orr.w	r2, r3, #32
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e023      	b.n	8007fac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f6c:	d11d      	bne.n	8007faa <SPI_EndRxTransaction+0xa6>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f76:	d004      	beq.n	8007f82 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f80:	d113      	bne.n	8007faa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f7ff ff22 	bl	8007dd8 <SPI_WaitFifoStateUntilTimeout>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d007      	beq.n	8007faa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f9e:	f043 0220 	orr.w	r2, r3, #32
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e000      	b.n	8007fac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af02      	add	r7, sp, #8
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff ff03 	bl	8007dd8 <SPI_WaitFifoStateUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fdc:	f043 0220 	orr.w	r2, r3, #32
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e027      	b.n	8008038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2180      	movs	r1, #128	; 0x80
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f7ff fe68 	bl	8007cc8 <SPI_WaitFlagStateUntilTimeout>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008002:	f043 0220 	orr.w	r2, r3, #32
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e014      	b.n	8008038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2200      	movs	r2, #0
 8008016:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7ff fedc 	bl	8007dd8 <SPI_WaitFifoStateUntilTimeout>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d007      	beq.n	8008036 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800802a:	f043 0220 	orr.w	r2, r3, #32
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e000      	b.n	8008038 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e049      	b.n	80080e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f841 	bl	80080ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3304      	adds	r3, #4
 800807c:	4619      	mov	r1, r3
 800807e:	4610      	mov	r0, r2
 8008080:	f000 f9f8 	bl	8008474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b083      	sub	sp, #12
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
	...

08008104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b01      	cmp	r3, #1
 8008116:	d001      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e04f      	b.n	80081bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f042 0201 	orr.w	r2, r2, #1
 8008132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a23      	ldr	r2, [pc, #140]	; (80081c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d01d      	beq.n	800817a <HAL_TIM_Base_Start_IT+0x76>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008146:	d018      	beq.n	800817a <HAL_TIM_Base_Start_IT+0x76>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a1f      	ldr	r2, [pc, #124]	; (80081cc <HAL_TIM_Base_Start_IT+0xc8>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d013      	beq.n	800817a <HAL_TIM_Base_Start_IT+0x76>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a1e      	ldr	r2, [pc, #120]	; (80081d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d00e      	beq.n	800817a <HAL_TIM_Base_Start_IT+0x76>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a1c      	ldr	r2, [pc, #112]	; (80081d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d009      	beq.n	800817a <HAL_TIM_Base_Start_IT+0x76>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a1b      	ldr	r2, [pc, #108]	; (80081d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d004      	beq.n	800817a <HAL_TIM_Base_Start_IT+0x76>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a19      	ldr	r2, [pc, #100]	; (80081dc <HAL_TIM_Base_Start_IT+0xd8>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d115      	bne.n	80081a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	4b17      	ldr	r3, [pc, #92]	; (80081e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008182:	4013      	ands	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b06      	cmp	r3, #6
 800818a:	d015      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0xb4>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008192:	d011      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f042 0201 	orr.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a4:	e008      	b.n	80081b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0201 	orr.w	r2, r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	e000      	b.n	80081ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	40012c00 	.word	0x40012c00
 80081cc:	40000400 	.word	0x40000400
 80081d0:	40000800 	.word	0x40000800
 80081d4:	40000c00 	.word	0x40000c00
 80081d8:	40013400 	.word	0x40013400
 80081dc:	40014000 	.word	0x40014000
 80081e0:	00010007 	.word	0x00010007

080081e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d122      	bne.n	8008240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	2b02      	cmp	r3, #2
 8008206:	d11b      	bne.n	8008240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0202 	mvn.w	r2, #2
 8008210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f905 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 800822c:	e005      	b.n	800823a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f8f7 	bl	8008422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f908 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b04      	cmp	r3, #4
 800824c:	d122      	bne.n	8008294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b04      	cmp	r3, #4
 800825a:	d11b      	bne.n	8008294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0204 	mvn.w	r2, #4
 8008264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2202      	movs	r2, #2
 800826a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f8db 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 8008280:	e005      	b.n	800828e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f8cd 	bl	8008422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f8de 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d122      	bne.n	80082e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f003 0308 	and.w	r3, r3, #8
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d11b      	bne.n	80082e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f06f 0208 	mvn.w	r2, #8
 80082b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2204      	movs	r2, #4
 80082be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f8b1 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 80082d4:	e005      	b.n	80082e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f8a3 	bl	8008422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f8b4 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f003 0310 	and.w	r3, r3, #16
 80082f2:	2b10      	cmp	r3, #16
 80082f4:	d122      	bne.n	800833c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b10      	cmp	r3, #16
 8008302:	d11b      	bne.n	800833c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f06f 0210 	mvn.w	r2, #16
 800830c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2208      	movs	r2, #8
 8008312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f887 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 8008328:	e005      	b.n	8008336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f879 	bl	8008422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f88a 	bl	800844a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b01      	cmp	r3, #1
 8008348:	d10e      	bne.n	8008368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b01      	cmp	r3, #1
 8008356:	d107      	bne.n	8008368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f06f 0201 	mvn.w	r2, #1
 8008360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7fa f9ca 	bl	80026fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008372:	2b80      	cmp	r3, #128	; 0x80
 8008374:	d10e      	bne.n	8008394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008380:	2b80      	cmp	r3, #128	; 0x80
 8008382:	d107      	bne.n	8008394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800838c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f914 	bl	80085bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800839e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a2:	d10e      	bne.n	80083c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ae:	2b80      	cmp	r3, #128	; 0x80
 80083b0:	d107      	bne.n	80083c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80083ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f907 	bl	80085d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	d10e      	bne.n	80083ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083da:	2b40      	cmp	r3, #64	; 0x40
 80083dc:	d107      	bne.n	80083ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f838 	bl	800845e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	f003 0320 	and.w	r3, r3, #32
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d10e      	bne.n	800841a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b20      	cmp	r3, #32
 8008408:	d107      	bne.n	800841a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f06f 0220 	mvn.w	r2, #32
 8008412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f8c7 	bl	80085a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
	...

08008474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a40      	ldr	r2, [pc, #256]	; (8008588 <TIM_Base_SetConfig+0x114>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d013      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008492:	d00f      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a3d      	ldr	r2, [pc, #244]	; (800858c <TIM_Base_SetConfig+0x118>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00b      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a3c      	ldr	r2, [pc, #240]	; (8008590 <TIM_Base_SetConfig+0x11c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d007      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a3b      	ldr	r2, [pc, #236]	; (8008594 <TIM_Base_SetConfig+0x120>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d003      	beq.n	80084b4 <TIM_Base_SetConfig+0x40>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a3a      	ldr	r2, [pc, #232]	; (8008598 <TIM_Base_SetConfig+0x124>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d108      	bne.n	80084c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a2f      	ldr	r2, [pc, #188]	; (8008588 <TIM_Base_SetConfig+0x114>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d01f      	beq.n	800850e <TIM_Base_SetConfig+0x9a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d4:	d01b      	beq.n	800850e <TIM_Base_SetConfig+0x9a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a2c      	ldr	r2, [pc, #176]	; (800858c <TIM_Base_SetConfig+0x118>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d017      	beq.n	800850e <TIM_Base_SetConfig+0x9a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a2b      	ldr	r2, [pc, #172]	; (8008590 <TIM_Base_SetConfig+0x11c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d013      	beq.n	800850e <TIM_Base_SetConfig+0x9a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a2a      	ldr	r2, [pc, #168]	; (8008594 <TIM_Base_SetConfig+0x120>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d00f      	beq.n	800850e <TIM_Base_SetConfig+0x9a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a29      	ldr	r2, [pc, #164]	; (8008598 <TIM_Base_SetConfig+0x124>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00b      	beq.n	800850e <TIM_Base_SetConfig+0x9a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a28      	ldr	r2, [pc, #160]	; (800859c <TIM_Base_SetConfig+0x128>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d007      	beq.n	800850e <TIM_Base_SetConfig+0x9a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a27      	ldr	r2, [pc, #156]	; (80085a0 <TIM_Base_SetConfig+0x12c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d003      	beq.n	800850e <TIM_Base_SetConfig+0x9a>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a26      	ldr	r2, [pc, #152]	; (80085a4 <TIM_Base_SetConfig+0x130>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d108      	bne.n	8008520 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a10      	ldr	r2, [pc, #64]	; (8008588 <TIM_Base_SetConfig+0x114>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d00f      	beq.n	800856c <TIM_Base_SetConfig+0xf8>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a12      	ldr	r2, [pc, #72]	; (8008598 <TIM_Base_SetConfig+0x124>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d00b      	beq.n	800856c <TIM_Base_SetConfig+0xf8>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a11      	ldr	r2, [pc, #68]	; (800859c <TIM_Base_SetConfig+0x128>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d007      	beq.n	800856c <TIM_Base_SetConfig+0xf8>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a10      	ldr	r2, [pc, #64]	; (80085a0 <TIM_Base_SetConfig+0x12c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d003      	beq.n	800856c <TIM_Base_SetConfig+0xf8>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a0f      	ldr	r2, [pc, #60]	; (80085a4 <TIM_Base_SetConfig+0x130>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d103      	bne.n	8008574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	615a      	str	r2, [r3, #20]
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	40012c00 	.word	0x40012c00
 800858c:	40000400 	.word	0x40000400
 8008590:	40000800 	.word	0x40000800
 8008594:	40000c00 	.word	0x40000c00
 8008598:	40013400 	.word	0x40013400
 800859c:	40014000 	.word	0x40014000
 80085a0:	40014400 	.word	0x40014400
 80085a4:	40014800 	.word	0x40014800

080085a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e040      	b.n	8008678 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d106      	bne.n	800860c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7fb fe54 	bl	80042b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2224      	movs	r2, #36	; 0x24
 8008610:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 0201 	bic.w	r2, r2, #1
 8008620:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f8c0 	bl	80087a8 <UART_SetConfig>
 8008628:	4603      	mov	r3, r0
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e022      	b.n	8008678 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fb6c 	bl	8008d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800864e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689a      	ldr	r2, [r3, #8]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800865e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0201 	orr.w	r2, r2, #1
 800866e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fbf3 	bl	8008e5c <UART_CheckIdleState>
 8008676:	4603      	mov	r3, r0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08a      	sub	sp, #40	; 0x28
 8008684:	af02      	add	r7, sp, #8
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	4613      	mov	r3, r2
 800868e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008694:	2b20      	cmp	r3, #32
 8008696:	f040 8082 	bne.w	800879e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <HAL_UART_Transmit+0x26>
 80086a0:	88fb      	ldrh	r3, [r7, #6]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e07a      	b.n	80087a0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d101      	bne.n	80086b8 <HAL_UART_Transmit+0x38>
 80086b4:	2302      	movs	r3, #2
 80086b6:	e073      	b.n	80087a0 <HAL_UART_Transmit+0x120>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2221      	movs	r2, #33	; 0x21
 80086cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086ce:	f7fb fea5 	bl	800441c <HAL_GetTick>
 80086d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	88fa      	ldrh	r2, [r7, #6]
 80086d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	88fa      	ldrh	r2, [r7, #6]
 80086e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ec:	d108      	bne.n	8008700 <HAL_UART_Transmit+0x80>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d104      	bne.n	8008700 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	61bb      	str	r3, [r7, #24]
 80086fe:	e003      	b.n	8008708 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008704:	2300      	movs	r3, #0
 8008706:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008710:	e02d      	b.n	800876e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2200      	movs	r2, #0
 800871a:	2180      	movs	r1, #128	; 0x80
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 fbe6 	bl	8008eee <UART_WaitOnFlagUntilTimeout>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e039      	b.n	80087a0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	881a      	ldrh	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800873e:	b292      	uxth	r2, r2
 8008740:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	3302      	adds	r3, #2
 8008746:	61bb      	str	r3, [r7, #24]
 8008748:	e008      	b.n	800875c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	781a      	ldrb	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	b292      	uxth	r2, r2
 8008754:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	3301      	adds	r3, #1
 800875a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008762:	b29b      	uxth	r3, r3
 8008764:	3b01      	subs	r3, #1
 8008766:	b29a      	uxth	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008774:	b29b      	uxth	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1cb      	bne.n	8008712 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2200      	movs	r2, #0
 8008782:	2140      	movs	r1, #64	; 0x40
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 fbb2 	bl	8008eee <UART_WaitOnFlagUntilTimeout>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e005      	b.n	80087a0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2220      	movs	r2, #32
 8008798:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	e000      	b.n	80087a0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800879e:	2302      	movs	r3, #2
  }
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3720      	adds	r7, #32
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087ac:	b08a      	sub	sp, #40	; 0x28
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	431a      	orrs	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	431a      	orrs	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	4ba4      	ldr	r3, [pc, #656]	; (8008a68 <UART_SetConfig+0x2c0>)
 80087d8:	4013      	ands	r3, r2
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087e0:	430b      	orrs	r3, r1
 80087e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a99      	ldr	r2, [pc, #612]	; (8008a6c <UART_SetConfig+0x2c4>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d004      	beq.n	8008814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008810:	4313      	orrs	r3, r2
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008824:	430a      	orrs	r2, r1
 8008826:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a90      	ldr	r2, [pc, #576]	; (8008a70 <UART_SetConfig+0x2c8>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d126      	bne.n	8008880 <UART_SetConfig+0xd8>
 8008832:	4b90      	ldr	r3, [pc, #576]	; (8008a74 <UART_SetConfig+0x2cc>)
 8008834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	2b03      	cmp	r3, #3
 800883e:	d81b      	bhi.n	8008878 <UART_SetConfig+0xd0>
 8008840:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <UART_SetConfig+0xa0>)
 8008842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008846:	bf00      	nop
 8008848:	08008859 	.word	0x08008859
 800884c:	08008869 	.word	0x08008869
 8008850:	08008861 	.word	0x08008861
 8008854:	08008871 	.word	0x08008871
 8008858:	2301      	movs	r3, #1
 800885a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800885e:	e116      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008860:	2302      	movs	r3, #2
 8008862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008866:	e112      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008868:	2304      	movs	r3, #4
 800886a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800886e:	e10e      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008870:	2308      	movs	r3, #8
 8008872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008876:	e10a      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008878:	2310      	movs	r3, #16
 800887a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800887e:	e106      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a7c      	ldr	r2, [pc, #496]	; (8008a78 <UART_SetConfig+0x2d0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d138      	bne.n	80088fc <UART_SetConfig+0x154>
 800888a:	4b7a      	ldr	r3, [pc, #488]	; (8008a74 <UART_SetConfig+0x2cc>)
 800888c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008890:	f003 030c 	and.w	r3, r3, #12
 8008894:	2b0c      	cmp	r3, #12
 8008896:	d82d      	bhi.n	80088f4 <UART_SetConfig+0x14c>
 8008898:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <UART_SetConfig+0xf8>)
 800889a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889e:	bf00      	nop
 80088a0:	080088d5 	.word	0x080088d5
 80088a4:	080088f5 	.word	0x080088f5
 80088a8:	080088f5 	.word	0x080088f5
 80088ac:	080088f5 	.word	0x080088f5
 80088b0:	080088e5 	.word	0x080088e5
 80088b4:	080088f5 	.word	0x080088f5
 80088b8:	080088f5 	.word	0x080088f5
 80088bc:	080088f5 	.word	0x080088f5
 80088c0:	080088dd 	.word	0x080088dd
 80088c4:	080088f5 	.word	0x080088f5
 80088c8:	080088f5 	.word	0x080088f5
 80088cc:	080088f5 	.word	0x080088f5
 80088d0:	080088ed 	.word	0x080088ed
 80088d4:	2300      	movs	r3, #0
 80088d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088da:	e0d8      	b.n	8008a8e <UART_SetConfig+0x2e6>
 80088dc:	2302      	movs	r3, #2
 80088de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088e2:	e0d4      	b.n	8008a8e <UART_SetConfig+0x2e6>
 80088e4:	2304      	movs	r3, #4
 80088e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ea:	e0d0      	b.n	8008a8e <UART_SetConfig+0x2e6>
 80088ec:	2308      	movs	r3, #8
 80088ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088f2:	e0cc      	b.n	8008a8e <UART_SetConfig+0x2e6>
 80088f4:	2310      	movs	r3, #16
 80088f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088fa:	e0c8      	b.n	8008a8e <UART_SetConfig+0x2e6>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a5e      	ldr	r2, [pc, #376]	; (8008a7c <UART_SetConfig+0x2d4>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d125      	bne.n	8008952 <UART_SetConfig+0x1aa>
 8008906:	4b5b      	ldr	r3, [pc, #364]	; (8008a74 <UART_SetConfig+0x2cc>)
 8008908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800890c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008910:	2b30      	cmp	r3, #48	; 0x30
 8008912:	d016      	beq.n	8008942 <UART_SetConfig+0x19a>
 8008914:	2b30      	cmp	r3, #48	; 0x30
 8008916:	d818      	bhi.n	800894a <UART_SetConfig+0x1a2>
 8008918:	2b20      	cmp	r3, #32
 800891a:	d00a      	beq.n	8008932 <UART_SetConfig+0x18a>
 800891c:	2b20      	cmp	r3, #32
 800891e:	d814      	bhi.n	800894a <UART_SetConfig+0x1a2>
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <UART_SetConfig+0x182>
 8008924:	2b10      	cmp	r3, #16
 8008926:	d008      	beq.n	800893a <UART_SetConfig+0x192>
 8008928:	e00f      	b.n	800894a <UART_SetConfig+0x1a2>
 800892a:	2300      	movs	r3, #0
 800892c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008930:	e0ad      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008932:	2302      	movs	r3, #2
 8008934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008938:	e0a9      	b.n	8008a8e <UART_SetConfig+0x2e6>
 800893a:	2304      	movs	r3, #4
 800893c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008940:	e0a5      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008942:	2308      	movs	r3, #8
 8008944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008948:	e0a1      	b.n	8008a8e <UART_SetConfig+0x2e6>
 800894a:	2310      	movs	r3, #16
 800894c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008950:	e09d      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a4a      	ldr	r2, [pc, #296]	; (8008a80 <UART_SetConfig+0x2d8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d125      	bne.n	80089a8 <UART_SetConfig+0x200>
 800895c:	4b45      	ldr	r3, [pc, #276]	; (8008a74 <UART_SetConfig+0x2cc>)
 800895e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008962:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008966:	2bc0      	cmp	r3, #192	; 0xc0
 8008968:	d016      	beq.n	8008998 <UART_SetConfig+0x1f0>
 800896a:	2bc0      	cmp	r3, #192	; 0xc0
 800896c:	d818      	bhi.n	80089a0 <UART_SetConfig+0x1f8>
 800896e:	2b80      	cmp	r3, #128	; 0x80
 8008970:	d00a      	beq.n	8008988 <UART_SetConfig+0x1e0>
 8008972:	2b80      	cmp	r3, #128	; 0x80
 8008974:	d814      	bhi.n	80089a0 <UART_SetConfig+0x1f8>
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <UART_SetConfig+0x1d8>
 800897a:	2b40      	cmp	r3, #64	; 0x40
 800897c:	d008      	beq.n	8008990 <UART_SetConfig+0x1e8>
 800897e:	e00f      	b.n	80089a0 <UART_SetConfig+0x1f8>
 8008980:	2300      	movs	r3, #0
 8008982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008986:	e082      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008988:	2302      	movs	r3, #2
 800898a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800898e:	e07e      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008990:	2304      	movs	r3, #4
 8008992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008996:	e07a      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008998:	2308      	movs	r3, #8
 800899a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800899e:	e076      	b.n	8008a8e <UART_SetConfig+0x2e6>
 80089a0:	2310      	movs	r3, #16
 80089a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089a6:	e072      	b.n	8008a8e <UART_SetConfig+0x2e6>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a35      	ldr	r2, [pc, #212]	; (8008a84 <UART_SetConfig+0x2dc>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d12a      	bne.n	8008a08 <UART_SetConfig+0x260>
 80089b2:	4b30      	ldr	r3, [pc, #192]	; (8008a74 <UART_SetConfig+0x2cc>)
 80089b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089c0:	d01a      	beq.n	80089f8 <UART_SetConfig+0x250>
 80089c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089c6:	d81b      	bhi.n	8008a00 <UART_SetConfig+0x258>
 80089c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089cc:	d00c      	beq.n	80089e8 <UART_SetConfig+0x240>
 80089ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d2:	d815      	bhi.n	8008a00 <UART_SetConfig+0x258>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <UART_SetConfig+0x238>
 80089d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089dc:	d008      	beq.n	80089f0 <UART_SetConfig+0x248>
 80089de:	e00f      	b.n	8008a00 <UART_SetConfig+0x258>
 80089e0:	2300      	movs	r3, #0
 80089e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089e6:	e052      	b.n	8008a8e <UART_SetConfig+0x2e6>
 80089e8:	2302      	movs	r3, #2
 80089ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ee:	e04e      	b.n	8008a8e <UART_SetConfig+0x2e6>
 80089f0:	2304      	movs	r3, #4
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089f6:	e04a      	b.n	8008a8e <UART_SetConfig+0x2e6>
 80089f8:	2308      	movs	r3, #8
 80089fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089fe:	e046      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008a00:	2310      	movs	r3, #16
 8008a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a06:	e042      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a17      	ldr	r2, [pc, #92]	; (8008a6c <UART_SetConfig+0x2c4>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d13a      	bne.n	8008a88 <UART_SetConfig+0x2e0>
 8008a12:	4b18      	ldr	r3, [pc, #96]	; (8008a74 <UART_SetConfig+0x2cc>)
 8008a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a20:	d01a      	beq.n	8008a58 <UART_SetConfig+0x2b0>
 8008a22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a26:	d81b      	bhi.n	8008a60 <UART_SetConfig+0x2b8>
 8008a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a2c:	d00c      	beq.n	8008a48 <UART_SetConfig+0x2a0>
 8008a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a32:	d815      	bhi.n	8008a60 <UART_SetConfig+0x2b8>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d003      	beq.n	8008a40 <UART_SetConfig+0x298>
 8008a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a3c:	d008      	beq.n	8008a50 <UART_SetConfig+0x2a8>
 8008a3e:	e00f      	b.n	8008a60 <UART_SetConfig+0x2b8>
 8008a40:	2300      	movs	r3, #0
 8008a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a46:	e022      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a4e:	e01e      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a56:	e01a      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a5e:	e016      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a66:	e012      	b.n	8008a8e <UART_SetConfig+0x2e6>
 8008a68:	efff69f3 	.word	0xefff69f3
 8008a6c:	40008000 	.word	0x40008000
 8008a70:	40013800 	.word	0x40013800
 8008a74:	40021000 	.word	0x40021000
 8008a78:	40004400 	.word	0x40004400
 8008a7c:	40004800 	.word	0x40004800
 8008a80:	40004c00 	.word	0x40004c00
 8008a84:	40005000 	.word	0x40005000
 8008a88:	2310      	movs	r3, #16
 8008a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a9f      	ldr	r2, [pc, #636]	; (8008d10 <UART_SetConfig+0x568>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d17a      	bne.n	8008b8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a9c:	2b08      	cmp	r3, #8
 8008a9e:	d824      	bhi.n	8008aea <UART_SetConfig+0x342>
 8008aa0:	a201      	add	r2, pc, #4	; (adr r2, 8008aa8 <UART_SetConfig+0x300>)
 8008aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa6:	bf00      	nop
 8008aa8:	08008acd 	.word	0x08008acd
 8008aac:	08008aeb 	.word	0x08008aeb
 8008ab0:	08008ad5 	.word	0x08008ad5
 8008ab4:	08008aeb 	.word	0x08008aeb
 8008ab8:	08008adb 	.word	0x08008adb
 8008abc:	08008aeb 	.word	0x08008aeb
 8008ac0:	08008aeb 	.word	0x08008aeb
 8008ac4:	08008aeb 	.word	0x08008aeb
 8008ac8:	08008ae3 	.word	0x08008ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008acc:	f7fd fe2e 	bl	800672c <HAL_RCC_GetPCLK1Freq>
 8008ad0:	61f8      	str	r0, [r7, #28]
        break;
 8008ad2:	e010      	b.n	8008af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ad4:	4b8f      	ldr	r3, [pc, #572]	; (8008d14 <UART_SetConfig+0x56c>)
 8008ad6:	61fb      	str	r3, [r7, #28]
        break;
 8008ad8:	e00d      	b.n	8008af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ada:	f7fd fd8f 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 8008ade:	61f8      	str	r0, [r7, #28]
        break;
 8008ae0:	e009      	b.n	8008af6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ae6:	61fb      	str	r3, [r7, #28]
        break;
 8008ae8:	e005      	b.n	8008af6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008af4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 80fb 	beq.w	8008cf4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	4613      	mov	r3, r2
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	4413      	add	r3, r2
 8008b08:	69fa      	ldr	r2, [r7, #28]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d305      	bcc.n	8008b1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b14:	69fa      	ldr	r2, [r7, #28]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d903      	bls.n	8008b22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b20:	e0e8      	b.n	8008cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	2200      	movs	r2, #0
 8008b26:	461c      	mov	r4, r3
 8008b28:	4615      	mov	r5, r2
 8008b2a:	f04f 0200 	mov.w	r2, #0
 8008b2e:	f04f 0300 	mov.w	r3, #0
 8008b32:	022b      	lsls	r3, r5, #8
 8008b34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008b38:	0222      	lsls	r2, r4, #8
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	6849      	ldr	r1, [r1, #4]
 8008b3e:	0849      	lsrs	r1, r1, #1
 8008b40:	2000      	movs	r0, #0
 8008b42:	4688      	mov	r8, r1
 8008b44:	4681      	mov	r9, r0
 8008b46:	eb12 0a08 	adds.w	sl, r2, r8
 8008b4a:	eb43 0b09 	adc.w	fp, r3, r9
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	603b      	str	r3, [r7, #0]
 8008b56:	607a      	str	r2, [r7, #4]
 8008b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b5c:	4650      	mov	r0, sl
 8008b5e:	4659      	mov	r1, fp
 8008b60:	f7f8 f824 	bl	8000bac <__aeabi_uldivmod>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4613      	mov	r3, r2
 8008b6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b72:	d308      	bcc.n	8008b86 <UART_SetConfig+0x3de>
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b7a:	d204      	bcs.n	8008b86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	60da      	str	r2, [r3, #12]
 8008b84:	e0b6      	b.n	8008cf4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b8c:	e0b2      	b.n	8008cf4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b96:	d15e      	bne.n	8008c56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d828      	bhi.n	8008bf2 <UART_SetConfig+0x44a>
 8008ba0:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <UART_SetConfig+0x400>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008bcd 	.word	0x08008bcd
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008bdd 	.word	0x08008bdd
 8008bb4:	08008bf3 	.word	0x08008bf3
 8008bb8:	08008be3 	.word	0x08008be3
 8008bbc:	08008bf3 	.word	0x08008bf3
 8008bc0:	08008bf3 	.word	0x08008bf3
 8008bc4:	08008bf3 	.word	0x08008bf3
 8008bc8:	08008beb 	.word	0x08008beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bcc:	f7fd fdae 	bl	800672c <HAL_RCC_GetPCLK1Freq>
 8008bd0:	61f8      	str	r0, [r7, #28]
        break;
 8008bd2:	e014      	b.n	8008bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bd4:	f7fd fdc0 	bl	8006758 <HAL_RCC_GetPCLK2Freq>
 8008bd8:	61f8      	str	r0, [r7, #28]
        break;
 8008bda:	e010      	b.n	8008bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bdc:	4b4d      	ldr	r3, [pc, #308]	; (8008d14 <UART_SetConfig+0x56c>)
 8008bde:	61fb      	str	r3, [r7, #28]
        break;
 8008be0:	e00d      	b.n	8008bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008be2:	f7fd fd0b 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 8008be6:	61f8      	str	r0, [r7, #28]
        break;
 8008be8:	e009      	b.n	8008bfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bee:	61fb      	str	r3, [r7, #28]
        break;
 8008bf0:	e005      	b.n	8008bfe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008bfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d077      	beq.n	8008cf4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	005a      	lsls	r2, r3, #1
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	085b      	lsrs	r3, r3, #1
 8008c0e:	441a      	add	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	2b0f      	cmp	r3, #15
 8008c1e:	d916      	bls.n	8008c4e <UART_SetConfig+0x4a6>
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c26:	d212      	bcs.n	8008c4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	f023 030f 	bic.w	r3, r3, #15
 8008c30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	085b      	lsrs	r3, r3, #1
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	8afb      	ldrh	r3, [r7, #22]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	8afa      	ldrh	r2, [r7, #22]
 8008c4a:	60da      	str	r2, [r3, #12]
 8008c4c:	e052      	b.n	8008cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008c54:	e04e      	b.n	8008cf4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c5a:	2b08      	cmp	r3, #8
 8008c5c:	d827      	bhi.n	8008cae <UART_SetConfig+0x506>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <UART_SetConfig+0x4bc>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008c89 	.word	0x08008c89
 8008c68:	08008c91 	.word	0x08008c91
 8008c6c:	08008c99 	.word	0x08008c99
 8008c70:	08008caf 	.word	0x08008caf
 8008c74:	08008c9f 	.word	0x08008c9f
 8008c78:	08008caf 	.word	0x08008caf
 8008c7c:	08008caf 	.word	0x08008caf
 8008c80:	08008caf 	.word	0x08008caf
 8008c84:	08008ca7 	.word	0x08008ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c88:	f7fd fd50 	bl	800672c <HAL_RCC_GetPCLK1Freq>
 8008c8c:	61f8      	str	r0, [r7, #28]
        break;
 8008c8e:	e014      	b.n	8008cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c90:	f7fd fd62 	bl	8006758 <HAL_RCC_GetPCLK2Freq>
 8008c94:	61f8      	str	r0, [r7, #28]
        break;
 8008c96:	e010      	b.n	8008cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c98:	4b1e      	ldr	r3, [pc, #120]	; (8008d14 <UART_SetConfig+0x56c>)
 8008c9a:	61fb      	str	r3, [r7, #28]
        break;
 8008c9c:	e00d      	b.n	8008cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c9e:	f7fd fcad 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 8008ca2:	61f8      	str	r0, [r7, #28]
        break;
 8008ca4:	e009      	b.n	8008cba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008caa:	61fb      	str	r3, [r7, #28]
        break;
 8008cac:	e005      	b.n	8008cba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008cb8:	bf00      	nop
    }

    if (pclk != 0U)
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d019      	beq.n	8008cf4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	085a      	lsrs	r2, r3, #1
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	441a      	add	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	2b0f      	cmp	r3, #15
 8008cd8:	d909      	bls.n	8008cee <UART_SetConfig+0x546>
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce0:	d205      	bcs.n	8008cee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60da      	str	r2, [r3, #12]
 8008cec:	e002      	b.n	8008cf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008d00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3728      	adds	r7, #40	; 0x28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d0e:	bf00      	nop
 8008d10:	40008000 	.word	0x40008000
 8008d14:	00f42400 	.word	0x00f42400

08008d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00a      	beq.n	8008d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	f003 0302 	and.w	r3, r3, #2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00a      	beq.n	8008d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	430a      	orrs	r2, r1
 8008d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00a      	beq.n	8008d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	f003 0308 	and.w	r3, r3, #8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00a      	beq.n	8008dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	f003 0320 	and.w	r3, r3, #32
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01a      	beq.n	8008e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e16:	d10a      	bne.n	8008e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	605a      	str	r2, [r3, #4]
  }
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af02      	add	r7, sp, #8
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e6c:	f7fb fad6 	bl	800441c <HAL_GetTick>
 8008e70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0308 	and.w	r3, r3, #8
 8008e7c:	2b08      	cmp	r3, #8
 8008e7e:	d10e      	bne.n	8008e9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f82d 	bl	8008eee <UART_WaitOnFlagUntilTimeout>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e023      	b.n	8008ee6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b04      	cmp	r3, #4
 8008eaa:	d10e      	bne.n	8008eca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f817 	bl	8008eee <UART_WaitOnFlagUntilTimeout>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e00d      	b.n	8008ee6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b09c      	sub	sp, #112	; 0x70
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	603b      	str	r3, [r7, #0]
 8008efa:	4613      	mov	r3, r2
 8008efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008efe:	e0a5      	b.n	800904c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f06:	f000 80a1 	beq.w	800904c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f0a:	f7fb fa87 	bl	800441c <HAL_GetTick>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d302      	bcc.n	8008f20 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d13e      	bne.n	8008f9e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f34:	667b      	str	r3, [r7, #100]	; 0x64
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1e6      	bne.n	8008f20 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3308      	adds	r3, #8
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5c:	e853 3f00 	ldrex	r3, [r3]
 8008f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f64:	f023 0301 	bic.w	r3, r3, #1
 8008f68:	663b      	str	r3, [r7, #96]	; 0x60
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3308      	adds	r3, #8
 8008f70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f72:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1e5      	bne.n	8008f52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e067      	b.n	800906e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d04f      	beq.n	800904c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fba:	d147      	bne.n	800904c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fc4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fe6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fec:	e841 2300 	strex	r3, r2, [r1]
 8008ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e6      	bne.n	8008fc6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	613b      	str	r3, [r7, #16]
   return(result);
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f023 0301 	bic.w	r3, r3, #1
 800900e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3308      	adds	r3, #8
 8009016:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009018:	623a      	str	r2, [r7, #32]
 800901a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	69f9      	ldr	r1, [r7, #28]
 800901e:	6a3a      	ldr	r2, [r7, #32]
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	61bb      	str	r3, [r7, #24]
   return(result);
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e5      	bne.n	8008ff8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2220      	movs	r2, #32
 8009030:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2220      	movs	r2, #32
 8009036:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2220      	movs	r2, #32
 800903c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e010      	b.n	800906e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	69da      	ldr	r2, [r3, #28]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	4013      	ands	r3, r2
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	429a      	cmp	r2, r3
 800905a:	bf0c      	ite	eq
 800905c:	2301      	moveq	r3, #1
 800905e:	2300      	movne	r3, #0
 8009060:	b2db      	uxtb	r3, r3
 8009062:	461a      	mov	r2, r3
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	429a      	cmp	r2, r3
 8009068:	f43f af4a 	beq.w	8008f00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3770      	adds	r7, #112	; 0x70
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <__NVIC_SetPriority>:
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	6039      	str	r1, [r7, #0]
 8009082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009088:	2b00      	cmp	r3, #0
 800908a:	db0a      	blt.n	80090a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	b2da      	uxtb	r2, r3
 8009090:	490c      	ldr	r1, [pc, #48]	; (80090c4 <__NVIC_SetPriority+0x4c>)
 8009092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009096:	0112      	lsls	r2, r2, #4
 8009098:	b2d2      	uxtb	r2, r2
 800909a:	440b      	add	r3, r1
 800909c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80090a0:	e00a      	b.n	80090b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	4908      	ldr	r1, [pc, #32]	; (80090c8 <__NVIC_SetPriority+0x50>)
 80090a8:	79fb      	ldrb	r3, [r7, #7]
 80090aa:	f003 030f 	and.w	r3, r3, #15
 80090ae:	3b04      	subs	r3, #4
 80090b0:	0112      	lsls	r2, r2, #4
 80090b2:	b2d2      	uxtb	r2, r2
 80090b4:	440b      	add	r3, r1
 80090b6:	761a      	strb	r2, [r3, #24]
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	e000e100 	.word	0xe000e100
 80090c8:	e000ed00 	.word	0xe000ed00

080090cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80090d0:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <SysTick_Handler+0x1c>)
 80090d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80090d4:	f002 fa04 	bl	800b4e0 <xTaskGetSchedulerState>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d001      	beq.n	80090e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80090de:	f003 f8eb 	bl	800c2b8 <xPortSysTickHandler>
  }
}
 80090e2:	bf00      	nop
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	e000e010 	.word	0xe000e010

080090ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80090ec:	b580      	push	{r7, lr}
 80090ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80090f0:	2100      	movs	r1, #0
 80090f2:	f06f 0004 	mvn.w	r0, #4
 80090f6:	f7ff ffbf 	bl	8009078 <__NVIC_SetPriority>
#endif
}
 80090fa:	bf00      	nop
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009106:	f3ef 8305 	mrs	r3, IPSR
 800910a:	603b      	str	r3, [r7, #0]
  return(result);
 800910c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009112:	f06f 0305 	mvn.w	r3, #5
 8009116:	607b      	str	r3, [r7, #4]
 8009118:	e00c      	b.n	8009134 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800911a:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <osKernelInitialize+0x44>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d105      	bne.n	800912e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009122:	4b08      	ldr	r3, [pc, #32]	; (8009144 <osKernelInitialize+0x44>)
 8009124:	2201      	movs	r2, #1
 8009126:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009128:	2300      	movs	r3, #0
 800912a:	607b      	str	r3, [r7, #4]
 800912c:	e002      	b.n	8009134 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800912e:	f04f 33ff 	mov.w	r3, #4294967295
 8009132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009134:	687b      	ldr	r3, [r7, #4]
}
 8009136:	4618      	mov	r0, r3
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	20000220 	.word	0x20000220

08009148 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800914e:	f3ef 8305 	mrs	r3, IPSR
 8009152:	603b      	str	r3, [r7, #0]
  return(result);
 8009154:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <osKernelStart+0x1a>
    stat = osErrorISR;
 800915a:	f06f 0305 	mvn.w	r3, #5
 800915e:	607b      	str	r3, [r7, #4]
 8009160:	e010      	b.n	8009184 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009162:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <osKernelStart+0x48>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d109      	bne.n	800917e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800916a:	f7ff ffbf 	bl	80090ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800916e:	4b08      	ldr	r3, [pc, #32]	; (8009190 <osKernelStart+0x48>)
 8009170:	2202      	movs	r2, #2
 8009172:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009174:	f001 fd38 	bl	800abe8 <vTaskStartScheduler>
      stat = osOK;
 8009178:	2300      	movs	r3, #0
 800917a:	607b      	str	r3, [r7, #4]
 800917c:	e002      	b.n	8009184 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800917e:	f04f 33ff 	mov.w	r3, #4294967295
 8009182:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009184:	687b      	ldr	r3, [r7, #4]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20000220 	.word	0x20000220

08009194 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009194:	b580      	push	{r7, lr}
 8009196:	b08e      	sub	sp, #56	; 0x38
 8009198:	af04      	add	r7, sp, #16
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091a0:	2300      	movs	r3, #0
 80091a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091a4:	f3ef 8305 	mrs	r3, IPSR
 80091a8:	617b      	str	r3, [r7, #20]
  return(result);
 80091aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d17e      	bne.n	80092ae <osThreadNew+0x11a>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d07b      	beq.n	80092ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091b6:	2380      	movs	r3, #128	; 0x80
 80091b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091ba:	2318      	movs	r3, #24
 80091bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80091c2:	f04f 33ff 	mov.w	r3, #4294967295
 80091c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d045      	beq.n	800925a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <osThreadNew+0x48>
        name = attr->name;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d008      	beq.n	8009202 <osThreadNew+0x6e>
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	2b38      	cmp	r3, #56	; 0x38
 80091f4:	d805      	bhi.n	8009202 <osThreadNew+0x6e>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <osThreadNew+0x72>
        return (NULL);
 8009202:	2300      	movs	r3, #0
 8009204:	e054      	b.n	80092b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	089b      	lsrs	r3, r3, #2
 8009214:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00e      	beq.n	800923c <osThreadNew+0xa8>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	2b5b      	cmp	r3, #91	; 0x5b
 8009224:	d90a      	bls.n	800923c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800922a:	2b00      	cmp	r3, #0
 800922c:	d006      	beq.n	800923c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d002      	beq.n	800923c <osThreadNew+0xa8>
        mem = 1;
 8009236:	2301      	movs	r3, #1
 8009238:	61bb      	str	r3, [r7, #24]
 800923a:	e010      	b.n	800925e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10c      	bne.n	800925e <osThreadNew+0xca>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d108      	bne.n	800925e <osThreadNew+0xca>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d104      	bne.n	800925e <osThreadNew+0xca>
          mem = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	61bb      	str	r3, [r7, #24]
 8009258:	e001      	b.n	800925e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d110      	bne.n	8009286 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800926c:	9202      	str	r2, [sp, #8]
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	6a3a      	ldr	r2, [r7, #32]
 8009278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f001 fade 	bl	800a83c <xTaskCreateStatic>
 8009280:	4603      	mov	r3, r0
 8009282:	613b      	str	r3, [r7, #16]
 8009284:	e013      	b.n	80092ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d110      	bne.n	80092ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	b29a      	uxth	r2, r3
 8009290:	f107 0310 	add.w	r3, r7, #16
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f001 fb29 	bl	800a8f6 <xTaskCreate>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d001      	beq.n	80092ae <osThreadNew+0x11a>
            hTask = NULL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092ae:	693b      	ldr	r3, [r7, #16]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3728      	adds	r7, #40	; 0x28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c0:	f3ef 8305 	mrs	r3, IPSR
 80092c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80092c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <osDelay+0x1c>
    stat = osErrorISR;
 80092cc:	f06f 0305 	mvn.w	r3, #5
 80092d0:	60fb      	str	r3, [r7, #12]
 80092d2:	e007      	b.n	80092e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 fc4e 	bl	800ab80 <vTaskDelay>
    }
  }

  return (stat);
 80092e4:	68fb      	ldr	r3, [r7, #12]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b088      	sub	sp, #32
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092fa:	f3ef 8305 	mrs	r3, IPSR
 80092fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009300:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009302:	2b00      	cmp	r3, #0
 8009304:	d174      	bne.n	80093f0 <osMutexNew+0x102>
    if (attr != NULL) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <osMutexNew+0x26>
      type = attr->attr_bits;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	e001      	b.n	8009318 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b00      	cmp	r3, #0
 8009320:	d002      	beq.n	8009328 <osMutexNew+0x3a>
      rmtx = 1U;
 8009322:	2301      	movs	r3, #1
 8009324:	617b      	str	r3, [r7, #20]
 8009326:	e001      	b.n	800932c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	f003 0308 	and.w	r3, r3, #8
 8009332:	2b00      	cmp	r3, #0
 8009334:	d15c      	bne.n	80093f0 <osMutexNew+0x102>
      mem = -1;
 8009336:	f04f 33ff 	mov.w	r3, #4294967295
 800933a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d015      	beq.n	800936e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d006      	beq.n	8009358 <osMutexNew+0x6a>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	2b4f      	cmp	r3, #79	; 0x4f
 8009350:	d902      	bls.n	8009358 <osMutexNew+0x6a>
          mem = 1;
 8009352:	2301      	movs	r3, #1
 8009354:	613b      	str	r3, [r7, #16]
 8009356:	e00c      	b.n	8009372 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d108      	bne.n	8009372 <osMutexNew+0x84>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d104      	bne.n	8009372 <osMutexNew+0x84>
            mem = 0;
 8009368:	2300      	movs	r3, #0
 800936a:	613b      	str	r3, [r7, #16]
 800936c:	e001      	b.n	8009372 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d112      	bne.n	800939e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d007      	beq.n	800938e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	4619      	mov	r1, r3
 8009384:	2004      	movs	r0, #4
 8009386:	f000 fc48 	bl	8009c1a <xQueueCreateMutexStatic>
 800938a:	61f8      	str	r0, [r7, #28]
 800938c:	e016      	b.n	80093bc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	4619      	mov	r1, r3
 8009394:	2001      	movs	r0, #1
 8009396:	f000 fc40 	bl	8009c1a <xQueueCreateMutexStatic>
 800939a:	61f8      	str	r0, [r7, #28]
 800939c:	e00e      	b.n	80093bc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10b      	bne.n	80093bc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d004      	beq.n	80093b4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80093aa:	2004      	movs	r0, #4
 80093ac:	f000 fc1d 	bl	8009bea <xQueueCreateMutex>
 80093b0:	61f8      	str	r0, [r7, #28]
 80093b2:	e003      	b.n	80093bc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80093b4:	2001      	movs	r0, #1
 80093b6:	f000 fc18 	bl	8009bea <xQueueCreateMutex>
 80093ba:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00c      	beq.n	80093dc <osMutexNew+0xee>
        if (attr != NULL) {
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <osMutexNew+0xe2>
          name = attr->name;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	e001      	b.n	80093d4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80093d4:	68f9      	ldr	r1, [r7, #12]
 80093d6:	69f8      	ldr	r0, [r7, #28]
 80093d8:	f001 f9d2 	bl	800a780 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d006      	beq.n	80093f0 <osMutexNew+0x102>
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d003      	beq.n	80093f0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	f043 0301 	orr.w	r3, r3, #1
 80093ee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80093f0:	69fb      	ldr	r3, [r7, #28]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b086      	sub	sp, #24
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f023 0301 	bic.w	r3, r3, #1
 800940a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009418:	f3ef 8305 	mrs	r3, IPSR
 800941c:	60bb      	str	r3, [r7, #8]
  return(result);
 800941e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009424:	f06f 0305 	mvn.w	r3, #5
 8009428:	617b      	str	r3, [r7, #20]
 800942a:	e02c      	b.n	8009486 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d103      	bne.n	800943a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009432:	f06f 0303 	mvn.w	r3, #3
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	e025      	b.n	8009486 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d011      	beq.n	8009464 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6938      	ldr	r0, [r7, #16]
 8009444:	f000 fc38 	bl	8009cb8 <xQueueTakeMutexRecursive>
 8009448:	4603      	mov	r3, r0
 800944a:	2b01      	cmp	r3, #1
 800944c:	d01b      	beq.n	8009486 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009454:	f06f 0301 	mvn.w	r3, #1
 8009458:	617b      	str	r3, [r7, #20]
 800945a:	e014      	b.n	8009486 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800945c:	f06f 0302 	mvn.w	r3, #2
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	e010      	b.n	8009486 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6938      	ldr	r0, [r7, #16]
 8009468:	f000 fed6 	bl	800a218 <xQueueSemaphoreTake>
 800946c:	4603      	mov	r3, r0
 800946e:	2b01      	cmp	r3, #1
 8009470:	d009      	beq.n	8009486 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d003      	beq.n	8009480 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009478:	f06f 0301 	mvn.w	r3, #1
 800947c:	617b      	str	r3, [r7, #20]
 800947e:	e002      	b.n	8009486 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009480:	f06f 0302 	mvn.w	r3, #2
 8009484:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009486:	697b      	ldr	r3, [r7, #20]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f023 0301 	bic.w	r3, r3, #1
 800949e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094ac:	f3ef 8305 	mrs	r3, IPSR
 80094b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80094b2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d003      	beq.n	80094c0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80094b8:	f06f 0305 	mvn.w	r3, #5
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	e01f      	b.n	8009500 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d103      	bne.n	80094ce <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80094c6:	f06f 0303 	mvn.w	r3, #3
 80094ca:	617b      	str	r3, [r7, #20]
 80094cc:	e018      	b.n	8009500 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d009      	beq.n	80094e8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80094d4:	6938      	ldr	r0, [r7, #16]
 80094d6:	f000 fbbb 	bl	8009c50 <xQueueGiveMutexRecursive>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d00f      	beq.n	8009500 <osMutexRelease+0x70>
        stat = osErrorResource;
 80094e0:	f06f 0302 	mvn.w	r3, #2
 80094e4:	617b      	str	r3, [r7, #20]
 80094e6:	e00b      	b.n	8009500 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80094e8:	2300      	movs	r3, #0
 80094ea:	2200      	movs	r2, #0
 80094ec:	2100      	movs	r1, #0
 80094ee:	6938      	ldr	r0, [r7, #16]
 80094f0:	f000 fc18 	bl	8009d24 <xQueueGenericSend>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d002      	beq.n	8009500 <osMutexRelease+0x70>
        stat = osErrorResource;
 80094fa:	f06f 0302 	mvn.w	r3, #2
 80094fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009500:	697b      	ldr	r3, [r7, #20]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3718      	adds	r7, #24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800950a:	b580      	push	{r7, lr}
 800950c:	b08a      	sub	sp, #40	; 0x28
 800950e:	af02      	add	r7, sp, #8
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009516:	2300      	movs	r3, #0
 8009518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800951a:	f3ef 8305 	mrs	r3, IPSR
 800951e:	613b      	str	r3, [r7, #16]
  return(result);
 8009520:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009522:	2b00      	cmp	r3, #0
 8009524:	d15f      	bne.n	80095e6 <osMessageQueueNew+0xdc>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d05c      	beq.n	80095e6 <osMessageQueueNew+0xdc>
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d059      	beq.n	80095e6 <osMessageQueueNew+0xdc>
    mem = -1;
 8009532:	f04f 33ff 	mov.w	r3, #4294967295
 8009536:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d029      	beq.n	8009592 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d012      	beq.n	800956c <osMessageQueueNew+0x62>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	2b4f      	cmp	r3, #79	; 0x4f
 800954c:	d90e      	bls.n	800956c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	695a      	ldr	r2, [r3, #20]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	68b9      	ldr	r1, [r7, #8]
 800955e:	fb01 f303 	mul.w	r3, r1, r3
 8009562:	429a      	cmp	r2, r3
 8009564:	d302      	bcc.n	800956c <osMessageQueueNew+0x62>
        mem = 1;
 8009566:	2301      	movs	r3, #1
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	e014      	b.n	8009596 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d110      	bne.n	8009596 <osMessageQueueNew+0x8c>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10c      	bne.n	8009596 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009580:	2b00      	cmp	r3, #0
 8009582:	d108      	bne.n	8009596 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d104      	bne.n	8009596 <osMessageQueueNew+0x8c>
          mem = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	61bb      	str	r3, [r7, #24]
 8009590:	e001      	b.n	8009596 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d10b      	bne.n	80095b4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691a      	ldr	r2, [r3, #16]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	2100      	movs	r1, #0
 80095a6:	9100      	str	r1, [sp, #0]
 80095a8:	68b9      	ldr	r1, [r7, #8]
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 fa2e 	bl	8009a0c <xQueueGenericCreateStatic>
 80095b0:	61f8      	str	r0, [r7, #28]
 80095b2:	e008      	b.n	80095c6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d105      	bne.n	80095c6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80095ba:	2200      	movs	r2, #0
 80095bc:	68b9      	ldr	r1, [r7, #8]
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 fa9c 	bl	8009afc <xQueueGenericCreate>
 80095c4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00c      	beq.n	80095e6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <osMessageQueueNew+0xd0>
        name = attr->name;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	e001      	b.n	80095de <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80095de:	6979      	ldr	r1, [r7, #20]
 80095e0:	69f8      	ldr	r0, [r7, #28]
 80095e2:	f001 f8cd 	bl	800a780 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80095e6:	69fb      	ldr	r3, [r7, #28]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3720      	adds	r7, #32
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	603b      	str	r3, [r7, #0]
 80095fc:	4613      	mov	r3, r2
 80095fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009604:	2300      	movs	r3, #0
 8009606:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009608:	f3ef 8305 	mrs	r3, IPSR
 800960c:	617b      	str	r3, [r7, #20]
  return(result);
 800960e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009610:	2b00      	cmp	r3, #0
 8009612:	d028      	beq.n	8009666 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d005      	beq.n	8009626 <osMessageQueuePut+0x36>
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <osMessageQueuePut+0x36>
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009626:	f06f 0303 	mvn.w	r3, #3
 800962a:	61fb      	str	r3, [r7, #28]
 800962c:	e038      	b.n	80096a0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800962e:	2300      	movs	r3, #0
 8009630:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009632:	f107 0210 	add.w	r2, r7, #16
 8009636:	2300      	movs	r3, #0
 8009638:	68b9      	ldr	r1, [r7, #8]
 800963a:	69b8      	ldr	r0, [r7, #24]
 800963c:	f000 fc70 	bl	8009f20 <xQueueGenericSendFromISR>
 8009640:	4603      	mov	r3, r0
 8009642:	2b01      	cmp	r3, #1
 8009644:	d003      	beq.n	800964e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009646:	f06f 0302 	mvn.w	r3, #2
 800964a:	61fb      	str	r3, [r7, #28]
 800964c:	e028      	b.n	80096a0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d025      	beq.n	80096a0 <osMessageQueuePut+0xb0>
 8009654:	4b15      	ldr	r3, [pc, #84]	; (80096ac <osMessageQueuePut+0xbc>)
 8009656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	e01c      	b.n	80096a0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <osMessageQueuePut+0x82>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d103      	bne.n	800967a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009672:	f06f 0303 	mvn.w	r3, #3
 8009676:	61fb      	str	r3, [r7, #28]
 8009678:	e012      	b.n	80096a0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800967a:	2300      	movs	r3, #0
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	68b9      	ldr	r1, [r7, #8]
 8009680:	69b8      	ldr	r0, [r7, #24]
 8009682:	f000 fb4f 	bl	8009d24 <xQueueGenericSend>
 8009686:	4603      	mov	r3, r0
 8009688:	2b01      	cmp	r3, #1
 800968a:	d009      	beq.n	80096a0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009692:	f06f 0301 	mvn.w	r3, #1
 8009696:	61fb      	str	r3, [r7, #28]
 8009698:	e002      	b.n	80096a0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800969a:	f06f 0302 	mvn.w	r3, #2
 800969e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80096a0:	69fb      	ldr	r3, [r7, #28]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	e000ed04 	.word	0xe000ed04

080096b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096c6:	f3ef 8305 	mrs	r3, IPSR
 80096ca:	617b      	str	r3, [r7, #20]
  return(result);
 80096cc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d028      	beq.n	8009724 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <osMessageQueueGet+0x34>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <osMessageQueueGet+0x34>
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80096e4:	f06f 0303 	mvn.w	r3, #3
 80096e8:	61fb      	str	r3, [r7, #28]
 80096ea:	e037      	b.n	800975c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80096ec:	2300      	movs	r3, #0
 80096ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80096f0:	f107 0310 	add.w	r3, r7, #16
 80096f4:	461a      	mov	r2, r3
 80096f6:	68b9      	ldr	r1, [r7, #8]
 80096f8:	69b8      	ldr	r0, [r7, #24]
 80096fa:	f000 fe99 	bl	800a430 <xQueueReceiveFromISR>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b01      	cmp	r3, #1
 8009702:	d003      	beq.n	800970c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009704:	f06f 0302 	mvn.w	r3, #2
 8009708:	61fb      	str	r3, [r7, #28]
 800970a:	e027      	b.n	800975c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d024      	beq.n	800975c <osMessageQueueGet+0xac>
 8009712:	4b15      	ldr	r3, [pc, #84]	; (8009768 <osMessageQueueGet+0xb8>)
 8009714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	e01b      	b.n	800975c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <osMessageQueueGet+0x80>
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d103      	bne.n	8009738 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009730:	f06f 0303 	mvn.w	r3, #3
 8009734:	61fb      	str	r3, [r7, #28]
 8009736:	e011      	b.n	800975c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009738:	683a      	ldr	r2, [r7, #0]
 800973a:	68b9      	ldr	r1, [r7, #8]
 800973c:	69b8      	ldr	r0, [r7, #24]
 800973e:	f000 fc8b 	bl	800a058 <xQueueReceive>
 8009742:	4603      	mov	r3, r0
 8009744:	2b01      	cmp	r3, #1
 8009746:	d009      	beq.n	800975c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800974e:	f06f 0301 	mvn.w	r3, #1
 8009752:	61fb      	str	r3, [r7, #28]
 8009754:	e002      	b.n	800975c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009756:	f06f 0302 	mvn.w	r3, #2
 800975a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800975c:	69fb      	ldr	r3, [r7, #28]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3720      	adds	r7, #32
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	e000ed04 	.word	0xe000ed04

0800976c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	4a07      	ldr	r2, [pc, #28]	; (8009798 <vApplicationGetIdleTaskMemory+0x2c>)
 800977c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	4a06      	ldr	r2, [pc, #24]	; (800979c <vApplicationGetIdleTaskMemory+0x30>)
 8009782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2280      	movs	r2, #128	; 0x80
 8009788:	601a      	str	r2, [r3, #0]
}
 800978a:	bf00      	nop
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	20000224 	.word	0x20000224
 800979c:	20000280 	.word	0x20000280

080097a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4a07      	ldr	r2, [pc, #28]	; (80097cc <vApplicationGetTimerTaskMemory+0x2c>)
 80097b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	4a06      	ldr	r2, [pc, #24]	; (80097d0 <vApplicationGetTimerTaskMemory+0x30>)
 80097b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097be:	601a      	str	r2, [r3, #0]
}
 80097c0:	bf00      	nop
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	20000480 	.word	0x20000480
 80097d0:	200004dc 	.word	0x200004dc

080097d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f103 0208 	add.w	r2, r3, #8
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f04f 32ff 	mov.w	r2, #4294967295
 80097ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f103 0208 	add.w	r2, r3, #8
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f103 0208 	add.w	r2, r3, #8
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009822:	bf00      	nop
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800982e:	b480      	push	{r7}
 8009830:	b085      	sub	sp, #20
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	601a      	str	r2, [r3, #0]
}
 800986a:	bf00      	nop
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009876:	b480      	push	{r7}
 8009878:	b085      	sub	sp, #20
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988c:	d103      	bne.n	8009896 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	e00c      	b.n	80098b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3308      	adds	r3, #8
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	e002      	b.n	80098a4 <vListInsert+0x2e>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d2f6      	bcs.n	800989e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	601a      	str	r2, [r3, #0]
}
 80098dc:	bf00      	nop
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	6892      	ldr	r2, [r2, #8]
 80098fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	6852      	ldr	r2, [r2, #4]
 8009908:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	429a      	cmp	r2, r3
 8009912:	d103      	bne.n	800991c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	1e5a      	subs	r2, r3, #1
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009962:	bf00      	nop
 8009964:	e7fe      	b.n	8009964 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009966:	f002 fc15 	bl	800c194 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009972:	68f9      	ldr	r1, [r7, #12]
 8009974:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009976:	fb01 f303 	mul.w	r3, r1, r3
 800997a:	441a      	add	r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009996:	3b01      	subs	r3, #1
 8009998:	68f9      	ldr	r1, [r7, #12]
 800999a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800999c:	fb01 f303 	mul.w	r3, r1, r3
 80099a0:	441a      	add	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	22ff      	movs	r2, #255	; 0xff
 80099aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	22ff      	movs	r2, #255	; 0xff
 80099b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d114      	bne.n	80099e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d01a      	beq.n	80099fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	3310      	adds	r3, #16
 80099c8:	4618      	mov	r0, r3
 80099ca:	f001 fbbb 	bl	800b144 <xTaskRemoveFromEventList>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d012      	beq.n	80099fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <xQueueGenericReset+0xcc>)
 80099d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	e009      	b.n	80099fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3310      	adds	r3, #16
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff fef2 	bl	80097d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3324      	adds	r3, #36	; 0x24
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7ff feed 	bl	80097d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099fa:	f002 fbfb 	bl	800c1f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099fe:	2301      	movs	r3, #1
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	e000ed04 	.word	0xe000ed04

08009a0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08e      	sub	sp, #56	; 0x38
 8009a10:	af02      	add	r7, sp, #8
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a4e:	bf00      	nop
 8009a50:	e7fe      	b.n	8009a50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <xQueueGenericCreateStatic+0x52>
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <xQueueGenericCreateStatic+0x56>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e000      	b.n	8009a64 <xQueueGenericCreateStatic+0x58>
 8009a62:	2300      	movs	r3, #0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10a      	bne.n	8009a7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	623b      	str	r3, [r7, #32]
}
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d102      	bne.n	8009a8a <xQueueGenericCreateStatic+0x7e>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <xQueueGenericCreateStatic+0x82>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e000      	b.n	8009a90 <xQueueGenericCreateStatic+0x84>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10a      	bne.n	8009aaa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	61fb      	str	r3, [r7, #28]
}
 8009aa6:	bf00      	nop
 8009aa8:	e7fe      	b.n	8009aa8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009aaa:	2350      	movs	r3, #80	; 0x50
 8009aac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b50      	cmp	r3, #80	; 0x50
 8009ab2:	d00a      	beq.n	8009aca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	61bb      	str	r3, [r7, #24]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009aca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00d      	beq.n	8009af2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ade:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	68b9      	ldr	r1, [r7, #8]
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 f83f 	bl	8009b70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3730      	adds	r7, #48	; 0x30
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08a      	sub	sp, #40	; 0x28
 8009b00:	af02      	add	r7, sp, #8
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	4613      	mov	r3, r2
 8009b08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10a      	bne.n	8009b26 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	613b      	str	r3, [r7, #16]
}
 8009b22:	bf00      	nop
 8009b24:	e7fe      	b.n	8009b24 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	fb02 f303 	mul.w	r3, r2, r3
 8009b2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	3350      	adds	r3, #80	; 0x50
 8009b34:	4618      	mov	r0, r3
 8009b36:	f002 fc4f 	bl	800c3d8 <pvPortMalloc>
 8009b3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d011      	beq.n	8009b66 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	3350      	adds	r3, #80	; 0x50
 8009b4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b54:	79fa      	ldrb	r2, [r7, #7]
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	68b9      	ldr	r1, [r7, #8]
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f000 f805 	bl	8009b70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b66:	69bb      	ldr	r3, [r7, #24]
	}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3720      	adds	r7, #32
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d103      	bne.n	8009b8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	e002      	b.n	8009b92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	69b8      	ldr	r0, [r7, #24]
 8009ba2:	f7ff fecb 	bl	800993c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b082      	sub	sp, #8
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00e      	beq.n	8009be2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2100      	movs	r1, #0
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f8a1 	bl	8009d24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009be2:	bf00      	nop
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b086      	sub	sp, #24
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	617b      	str	r3, [r7, #20]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	6939      	ldr	r1, [r7, #16]
 8009c02:	6978      	ldr	r0, [r7, #20]
 8009c04:	f7ff ff7a 	bl	8009afc <xQueueGenericCreate>
 8009c08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f7ff ffd3 	bl	8009bb6 <prvInitialiseMutex>

		return xNewQueue;
 8009c10:	68fb      	ldr	r3, [r7, #12]
	}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3718      	adds	r7, #24
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b088      	sub	sp, #32
 8009c1e:	af02      	add	r7, sp, #8
 8009c20:	4603      	mov	r3, r0
 8009c22:	6039      	str	r1, [r7, #0]
 8009c24:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c26:	2301      	movs	r3, #1
 8009c28:	617b      	str	r3, [r7, #20]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009c2e:	79fb      	ldrb	r3, [r7, #7]
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2200      	movs	r2, #0
 8009c36:	6939      	ldr	r1, [r7, #16]
 8009c38:	6978      	ldr	r0, [r7, #20]
 8009c3a:	f7ff fee7 	bl	8009a0c <xQueueGenericCreateStatic>
 8009c3e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f7ff ffb8 	bl	8009bb6 <prvInitialiseMutex>

		return xNewQueue;
 8009c46:	68fb      	ldr	r3, [r7, #12]
	}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009c50:	b590      	push	{r4, r7, lr}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	60fb      	str	r3, [r7, #12]
}
 8009c74:	bf00      	nop
 8009c76:	e7fe      	b.n	8009c76 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	689c      	ldr	r4, [r3, #8]
 8009c7c:	f001 fc20 	bl	800b4c0 <xTaskGetCurrentTaskHandle>
 8009c80:	4603      	mov	r3, r0
 8009c82:	429c      	cmp	r4, r3
 8009c84:	d111      	bne.n	8009caa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	1e5a      	subs	r2, r3, #1
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d105      	bne.n	8009ca4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	6938      	ldr	r0, [r7, #16]
 8009ca0:	f000 f840 	bl	8009d24 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	e001      	b.n	8009cae <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009cae:	697b      	ldr	r3, [r7, #20]
	}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	371c      	adds	r7, #28
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd90      	pop	{r4, r7, pc}

08009cb8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009cb8:	b590      	push	{r4, r7, lr}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	60fb      	str	r3, [r7, #12]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	689c      	ldr	r4, [r3, #8]
 8009ce6:	f001 fbeb 	bl	800b4c0 <xTaskGetCurrentTaskHandle>
 8009cea:	4603      	mov	r3, r0
 8009cec:	429c      	cmp	r4, r3
 8009cee:	d107      	bne.n	8009d00 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e00c      	b.n	8009d1a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6938      	ldr	r0, [r7, #16]
 8009d04:	f000 fa88 	bl	800a218 <xQueueSemaphoreTake>
 8009d08:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d004      	beq.n	8009d1a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009d1a:	697b      	ldr	r3, [r7, #20]
	}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	371c      	adds	r7, #28
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd90      	pop	{r4, r7, pc}

08009d24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b08e      	sub	sp, #56	; 0x38
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
 8009d30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d32:	2300      	movs	r3, #0
 8009d34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10a      	bne.n	8009d56 <xQueueGenericSend+0x32>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d103      	bne.n	8009d64 <xQueueGenericSend+0x40>
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d101      	bne.n	8009d68 <xQueueGenericSend+0x44>
 8009d64:	2301      	movs	r3, #1
 8009d66:	e000      	b.n	8009d6a <xQueueGenericSend+0x46>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10a      	bne.n	8009d84 <xQueueGenericSend+0x60>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d80:	bf00      	nop
 8009d82:	e7fe      	b.n	8009d82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d103      	bne.n	8009d92 <xQueueGenericSend+0x6e>
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d101      	bne.n	8009d96 <xQueueGenericSend+0x72>
 8009d92:	2301      	movs	r3, #1
 8009d94:	e000      	b.n	8009d98 <xQueueGenericSend+0x74>
 8009d96:	2300      	movs	r3, #0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	623b      	str	r3, [r7, #32]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009db2:	f001 fb95 	bl	800b4e0 <xTaskGetSchedulerState>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d102      	bne.n	8009dc2 <xQueueGenericSend+0x9e>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <xQueueGenericSend+0xa2>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e000      	b.n	8009dc8 <xQueueGenericSend+0xa4>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10a      	bne.n	8009de2 <xQueueGenericSend+0xbe>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	61fb      	str	r3, [r7, #28]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009de2:	f002 f9d7 	bl	800c194 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d302      	bcc.n	8009df8 <xQueueGenericSend+0xd4>
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d129      	bne.n	8009e4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	68b9      	ldr	r1, [r7, #8]
 8009dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dfe:	f000 fbaf 	bl	800a560 <prvCopyDataToQueue>
 8009e02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d010      	beq.n	8009e2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0e:	3324      	adds	r3, #36	; 0x24
 8009e10:	4618      	mov	r0, r3
 8009e12:	f001 f997 	bl	800b144 <xTaskRemoveFromEventList>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d013      	beq.n	8009e44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e1c:	4b3f      	ldr	r3, [pc, #252]	; (8009f1c <xQueueGenericSend+0x1f8>)
 8009e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	e00a      	b.n	8009e44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d007      	beq.n	8009e44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e34:	4b39      	ldr	r3, [pc, #228]	; (8009f1c <xQueueGenericSend+0x1f8>)
 8009e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e44:	f002 f9d6 	bl	800c1f4 <vPortExitCritical>
				return pdPASS;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e063      	b.n	8009f14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d103      	bne.n	8009e5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e52:	f002 f9cf 	bl	800c1f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e56:	2300      	movs	r3, #0
 8009e58:	e05c      	b.n	8009f14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d106      	bne.n	8009e6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e60:	f107 0314 	add.w	r3, r7, #20
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 f9d1 	bl	800b20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e6e:	f002 f9c1 	bl	800c1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e72:	f000 ff1f 	bl	800acb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e76:	f002 f98d 	bl	800c194 <vPortEnterCritical>
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e80:	b25b      	sxtb	r3, r3
 8009e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e86:	d103      	bne.n	8009e90 <xQueueGenericSend+0x16c>
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e96:	b25b      	sxtb	r3, r3
 8009e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9c:	d103      	bne.n	8009ea6 <xQueueGenericSend+0x182>
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ea6:	f002 f9a5 	bl	800c1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009eaa:	1d3a      	adds	r2, r7, #4
 8009eac:	f107 0314 	add.w	r3, r7, #20
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f001 f9c0 	bl	800b238 <xTaskCheckForTimeOut>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d124      	bne.n	8009f08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ec0:	f000 fc46 	bl	800a750 <prvIsQueueFull>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d018      	beq.n	8009efc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ecc:	3310      	adds	r3, #16
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f001 f8e6 	bl	800b0a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eda:	f000 fbd1 	bl	800a680 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ede:	f000 fef7 	bl	800acd0 <xTaskResumeAll>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f47f af7c 	bne.w	8009de2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009eea:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <xQueueGenericSend+0x1f8>)
 8009eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	e772      	b.n	8009de2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009efe:	f000 fbbf 	bl	800a680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f02:	f000 fee5 	bl	800acd0 <xTaskResumeAll>
 8009f06:	e76c      	b.n	8009de2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f0a:	f000 fbb9 	bl	800a680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f0e:	f000 fedf 	bl	800acd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3738      	adds	r7, #56	; 0x38
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	e000ed04 	.word	0xe000ed04

08009f20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b090      	sub	sp, #64	; 0x40
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10a      	bne.n	8009f4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f4a:	bf00      	nop
 8009f4c:	e7fe      	b.n	8009f4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d103      	bne.n	8009f5c <xQueueGenericSendFromISR+0x3c>
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <xQueueGenericSendFromISR+0x40>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e000      	b.n	8009f62 <xQueueGenericSendFromISR+0x42>
 8009f60:	2300      	movs	r3, #0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f78:	bf00      	nop
 8009f7a:	e7fe      	b.n	8009f7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d103      	bne.n	8009f8a <xQueueGenericSendFromISR+0x6a>
 8009f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d101      	bne.n	8009f8e <xQueueGenericSendFromISR+0x6e>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <xQueueGenericSendFromISR+0x70>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	623b      	str	r3, [r7, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009faa:	f002 f9d5 	bl	800c358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fae:	f3ef 8211 	mrs	r2, BASEPRI
 8009fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	61fa      	str	r2, [r7, #28]
 8009fc4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009fc6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fc8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d302      	bcc.n	8009fdc <xQueueGenericSendFromISR+0xbc>
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d12f      	bne.n	800a03c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ff2:	f000 fab5 	bl	800a560 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ff6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	d112      	bne.n	800a026 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	2b00      	cmp	r3, #0
 800a006:	d016      	beq.n	800a036 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00a:	3324      	adds	r3, #36	; 0x24
 800a00c:	4618      	mov	r0, r3
 800a00e:	f001 f899 	bl	800b144 <xTaskRemoveFromEventList>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00e      	beq.n	800a036 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00b      	beq.n	800a036 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	e007      	b.n	800a036 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a026:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a02a:	3301      	adds	r3, #1
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	b25a      	sxtb	r2, r3
 800a030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a036:	2301      	movs	r3, #1
 800a038:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a03a:	e001      	b.n	800a040 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a03c:	2300      	movs	r3, #0
 800a03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a042:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a04a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3740      	adds	r7, #64	; 0x40
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08c      	sub	sp, #48	; 0x30
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a064:	2300      	movs	r3, #0
 800a066:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <xQueueReceive+0x30>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	623b      	str	r3, [r7, #32]
}
 800a084:	bf00      	nop
 800a086:	e7fe      	b.n	800a086 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d103      	bne.n	800a096 <xQueueReceive+0x3e>
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <xQueueReceive+0x42>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <xQueueReceive+0x44>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <xQueueReceive+0x5e>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	61fb      	str	r3, [r7, #28]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0b6:	f001 fa13 	bl	800b4e0 <xTaskGetSchedulerState>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <xQueueReceive+0x6e>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <xQueueReceive+0x72>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e000      	b.n	800a0cc <xQueueReceive+0x74>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10a      	bne.n	800a0e6 <xQueueReceive+0x8e>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	61bb      	str	r3, [r7, #24]
}
 800a0e2:	bf00      	nop
 800a0e4:	e7fe      	b.n	800a0e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0e6:	f002 f855 	bl	800c194 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d01f      	beq.n	800a136 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0f6:	68b9      	ldr	r1, [r7, #8]
 800a0f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0fa:	f000 fa9b 	bl	800a634 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	1e5a      	subs	r2, r3, #1
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00f      	beq.n	800a12e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a110:	3310      	adds	r3, #16
 800a112:	4618      	mov	r0, r3
 800a114:	f001 f816 	bl	800b144 <xTaskRemoveFromEventList>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d007      	beq.n	800a12e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a11e:	4b3d      	ldr	r3, [pc, #244]	; (800a214 <xQueueReceive+0x1bc>)
 800a120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a12e:	f002 f861 	bl	800c1f4 <vPortExitCritical>
				return pdPASS;
 800a132:	2301      	movs	r3, #1
 800a134:	e069      	b.n	800a20a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d103      	bne.n	800a144 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a13c:	f002 f85a 	bl	800c1f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a140:	2300      	movs	r3, #0
 800a142:	e062      	b.n	800a20a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	2b00      	cmp	r3, #0
 800a148:	d106      	bne.n	800a158 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a14a:	f107 0310 	add.w	r3, r7, #16
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 f85c 	bl	800b20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a154:	2301      	movs	r3, #1
 800a156:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a158:	f002 f84c 	bl	800c1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a15c:	f000 fdaa 	bl	800acb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a160:	f002 f818 	bl	800c194 <vPortEnterCritical>
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a16a:	b25b      	sxtb	r3, r3
 800a16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a170:	d103      	bne.n	800a17a <xQueueReceive+0x122>
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a180:	b25b      	sxtb	r3, r3
 800a182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a186:	d103      	bne.n	800a190 <xQueueReceive+0x138>
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a190:	f002 f830 	bl	800c1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a194:	1d3a      	adds	r2, r7, #4
 800a196:	f107 0310 	add.w	r3, r7, #16
 800a19a:	4611      	mov	r1, r2
 800a19c:	4618      	mov	r0, r3
 800a19e:	f001 f84b 	bl	800b238 <xTaskCheckForTimeOut>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d123      	bne.n	800a1f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1aa:	f000 fabb 	bl	800a724 <prvIsQueueEmpty>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d017      	beq.n	800a1e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	3324      	adds	r3, #36	; 0x24
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 ff71 	bl	800b0a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1c4:	f000 fa5c 	bl	800a680 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1c8:	f000 fd82 	bl	800acd0 <xTaskResumeAll>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d189      	bne.n	800a0e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a1d2:	4b10      	ldr	r3, [pc, #64]	; (800a214 <xQueueReceive+0x1bc>)
 800a1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	e780      	b.n	800a0e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e6:	f000 fa4b 	bl	800a680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1ea:	f000 fd71 	bl	800acd0 <xTaskResumeAll>
 800a1ee:	e77a      	b.n	800a0e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a1f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1f2:	f000 fa45 	bl	800a680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1f6:	f000 fd6b 	bl	800acd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1fc:	f000 fa92 	bl	800a724 <prvIsQueueEmpty>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	f43f af6f 	beq.w	800a0e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a208:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3730      	adds	r7, #48	; 0x30
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	e000ed04 	.word	0xe000ed04

0800a218 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08e      	sub	sp, #56	; 0x38
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a222:	2300      	movs	r3, #0
 800a224:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a22a:	2300      	movs	r3, #0
 800a22c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10a      	bne.n	800a24a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	623b      	str	r3, [r7, #32]
}
 800a246:	bf00      	nop
 800a248:	e7fe      	b.n	800a248 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00a      	beq.n	800a268 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	61fb      	str	r3, [r7, #28]
}
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a268:	f001 f93a 	bl	800b4e0 <xTaskGetSchedulerState>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d102      	bne.n	800a278 <xQueueSemaphoreTake+0x60>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <xQueueSemaphoreTake+0x64>
 800a278:	2301      	movs	r3, #1
 800a27a:	e000      	b.n	800a27e <xQueueSemaphoreTake+0x66>
 800a27c:	2300      	movs	r3, #0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10a      	bne.n	800a298 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	61bb      	str	r3, [r7, #24]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a298:	f001 ff7c 	bl	800c194 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d024      	beq.n	800a2f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	1e5a      	subs	r2, r3, #1
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d104      	bne.n	800a2c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a2b8:	f001 fa88 	bl	800b7cc <pvTaskIncrementMutexHeldCount>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00f      	beq.n	800a2ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2cc:	3310      	adds	r3, #16
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 ff38 	bl	800b144 <xTaskRemoveFromEventList>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d007      	beq.n	800a2ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2da:	4b54      	ldr	r3, [pc, #336]	; (800a42c <xQueueSemaphoreTake+0x214>)
 800a2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2ea:	f001 ff83 	bl	800c1f4 <vPortExitCritical>
				return pdPASS;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e097      	b.n	800a422 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d111      	bne.n	800a31c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00a      	beq.n	800a314 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	617b      	str	r3, [r7, #20]
}
 800a310:	bf00      	nop
 800a312:	e7fe      	b.n	800a312 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a314:	f001 ff6e 	bl	800c1f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a318:	2300      	movs	r3, #0
 800a31a:	e082      	b.n	800a422 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d106      	bne.n	800a330 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a322:	f107 030c 	add.w	r3, r7, #12
 800a326:	4618      	mov	r0, r3
 800a328:	f000 ff70 	bl	800b20c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a32c:	2301      	movs	r3, #1
 800a32e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a330:	f001 ff60 	bl	800c1f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a334:	f000 fcbe 	bl	800acb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a338:	f001 ff2c 	bl	800c194 <vPortEnterCritical>
 800a33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a342:	b25b      	sxtb	r3, r3
 800a344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a348:	d103      	bne.n	800a352 <xQueueSemaphoreTake+0x13a>
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a358:	b25b      	sxtb	r3, r3
 800a35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35e:	d103      	bne.n	800a368 <xQueueSemaphoreTake+0x150>
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a368:	f001 ff44 	bl	800c1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a36c:	463a      	mov	r2, r7
 800a36e:	f107 030c 	add.w	r3, r7, #12
 800a372:	4611      	mov	r1, r2
 800a374:	4618      	mov	r0, r3
 800a376:	f000 ff5f 	bl	800b238 <xTaskCheckForTimeOut>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d132      	bne.n	800a3e6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a380:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a382:	f000 f9cf 	bl	800a724 <prvIsQueueEmpty>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d026      	beq.n	800a3da <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d109      	bne.n	800a3a8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a394:	f001 fefe 	bl	800c194 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f001 f8bd 	bl	800b51c <xTaskPriorityInherit>
 800a3a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a3a4:	f001 ff26 	bl	800c1f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	3324      	adds	r3, #36	; 0x24
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 fe77 	bl	800b0a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3b8:	f000 f962 	bl	800a680 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3bc:	f000 fc88 	bl	800acd0 <xTaskResumeAll>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f47f af68 	bne.w	800a298 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a3c8:	4b18      	ldr	r3, [pc, #96]	; (800a42c <xQueueSemaphoreTake+0x214>)
 800a3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	e75e      	b.n	800a298 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a3da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3dc:	f000 f950 	bl	800a680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3e0:	f000 fc76 	bl	800acd0 <xTaskResumeAll>
 800a3e4:	e758      	b.n	800a298 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a3e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3e8:	f000 f94a 	bl	800a680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3ec:	f000 fc70 	bl	800acd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3f2:	f000 f997 	bl	800a724 <prvIsQueueEmpty>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f43f af4d 	beq.w	800a298 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00d      	beq.n	800a420 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a404:	f001 fec6 	bl	800c194 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a40a:	f000 f891 	bl	800a530 <prvGetDisinheritPriorityAfterTimeout>
 800a40e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a416:	4618      	mov	r0, r3
 800a418:	f001 f956 	bl	800b6c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a41c:	f001 feea 	bl	800c1f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a420:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a422:	4618      	mov	r0, r3
 800a424:	3738      	adds	r7, #56	; 0x38
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	e000ed04 	.word	0xe000ed04

0800a430 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08e      	sub	sp, #56	; 0x38
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10a      	bne.n	800a45c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	623b      	str	r3, [r7, #32]
}
 800a458:	bf00      	nop
 800a45a:	e7fe      	b.n	800a45a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d103      	bne.n	800a46a <xQueueReceiveFromISR+0x3a>
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <xQueueReceiveFromISR+0x3e>
 800a46a:	2301      	movs	r3, #1
 800a46c:	e000      	b.n	800a470 <xQueueReceiveFromISR+0x40>
 800a46e:	2300      	movs	r3, #0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	61fb      	str	r3, [r7, #28]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a48a:	f001 ff65 	bl	800c358 <vPortValidateInterruptPriority>
	__asm volatile
 800a48e:	f3ef 8211 	mrs	r2, BASEPRI
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	61ba      	str	r2, [r7, #24]
 800a4a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a4a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d02f      	beq.n	800a516 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4c0:	68b9      	ldr	r1, [r7, #8]
 800a4c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4c4:	f000 f8b6 	bl	800a634 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ca:	1e5a      	subs	r2, r3, #1
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a4d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d8:	d112      	bne.n	800a500 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d016      	beq.n	800a510 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e4:	3310      	adds	r3, #16
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 fe2c 	bl	800b144 <xTaskRemoveFromEventList>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00e      	beq.n	800a510 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00b      	beq.n	800a510 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	e007      	b.n	800a510 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a504:	3301      	adds	r3, #1
 800a506:	b2db      	uxtb	r3, r3
 800a508:	b25a      	sxtb	r2, r3
 800a50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a510:	2301      	movs	r3, #1
 800a512:	637b      	str	r3, [r7, #52]	; 0x34
 800a514:	e001      	b.n	800a51a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a516:	2300      	movs	r3, #0
 800a518:	637b      	str	r3, [r7, #52]	; 0x34
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	f383 8811 	msr	BASEPRI, r3
}
 800a524:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3738      	adds	r7, #56	; 0x38
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d006      	beq.n	800a54e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	e001      	b.n	800a552 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a54e:	2300      	movs	r3, #0
 800a550:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a552:	68fb      	ldr	r3, [r7, #12]
	}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a56c:	2300      	movs	r3, #0
 800a56e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a574:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10d      	bne.n	800a59a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d14d      	bne.n	800a622 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f001 f82e 	bl	800b5ec <xTaskPriorityDisinherit>
 800a590:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	609a      	str	r2, [r3, #8]
 800a598:	e043      	b.n	800a622 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d119      	bne.n	800a5d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6858      	ldr	r0, [r3, #4]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	68b9      	ldr	r1, [r7, #8]
 800a5ac:	f002 f926 	bl	800c7fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b8:	441a      	add	r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d32b      	bcc.n	800a622 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	605a      	str	r2, [r3, #4]
 800a5d2:	e026      	b.n	800a622 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	68d8      	ldr	r0, [r3, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5dc:	461a      	mov	r2, r3
 800a5de:	68b9      	ldr	r1, [r7, #8]
 800a5e0:	f002 f90c 	bl	800c7fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	68da      	ldr	r2, [r3, #12]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ec:	425b      	negs	r3, r3
 800a5ee:	441a      	add	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	68da      	ldr	r2, [r3, #12]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d207      	bcs.n	800a610 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a608:	425b      	negs	r3, r3
 800a60a:	441a      	add	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d105      	bne.n	800a622 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	3b01      	subs	r3, #1
 800a620:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a62a:	697b      	ldr	r3, [r7, #20]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a642:	2b00      	cmp	r3, #0
 800a644:	d018      	beq.n	800a678 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64e:	441a      	add	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68da      	ldr	r2, [r3, #12]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d303      	bcc.n	800a668 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	68d9      	ldr	r1, [r3, #12]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a670:	461a      	mov	r2, r3
 800a672:	6838      	ldr	r0, [r7, #0]
 800a674:	f002 f8c2 	bl	800c7fc <memcpy>
	}
}
 800a678:	bf00      	nop
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a688:	f001 fd84 	bl	800c194 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a692:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a694:	e011      	b.n	800a6ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d012      	beq.n	800a6c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	3324      	adds	r3, #36	; 0x24
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f000 fd4e 	bl	800b144 <xTaskRemoveFromEventList>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6ae:	f000 fe25 	bl	800b2fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6b2:	7bfb      	ldrb	r3, [r7, #15]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	dce9      	bgt.n	800a696 <prvUnlockQueue+0x16>
 800a6c2:	e000      	b.n	800a6c6 <prvUnlockQueue+0x46>
					break;
 800a6c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	22ff      	movs	r2, #255	; 0xff
 800a6ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6ce:	f001 fd91 	bl	800c1f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6d2:	f001 fd5f 	bl	800c194 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6de:	e011      	b.n	800a704 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d012      	beq.n	800a70e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3310      	adds	r3, #16
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fd29 	bl	800b144 <xTaskRemoveFromEventList>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6f8:	f000 fe00 	bl	800b2fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6fc:	7bbb      	ldrb	r3, [r7, #14]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	b2db      	uxtb	r3, r3
 800a702:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	dce9      	bgt.n	800a6e0 <prvUnlockQueue+0x60>
 800a70c:	e000      	b.n	800a710 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a70e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	22ff      	movs	r2, #255	; 0xff
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a718:	f001 fd6c 	bl	800c1f4 <vPortExitCritical>
}
 800a71c:	bf00      	nop
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a72c:	f001 fd32 	bl	800c194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a734:	2b00      	cmp	r3, #0
 800a736:	d102      	bne.n	800a73e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a738:	2301      	movs	r3, #1
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	e001      	b.n	800a742 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a73e:	2300      	movs	r3, #0
 800a740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a742:	f001 fd57 	bl	800c1f4 <vPortExitCritical>

	return xReturn;
 800a746:	68fb      	ldr	r3, [r7, #12]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a758:	f001 fd1c 	bl	800c194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a764:	429a      	cmp	r2, r3
 800a766:	d102      	bne.n	800a76e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a768:	2301      	movs	r3, #1
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e001      	b.n	800a772 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a772:	f001 fd3f 	bl	800c1f4 <vPortExitCritical>

	return xReturn;
 800a776:	68fb      	ldr	r3, [r7, #12]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a78a:	2300      	movs	r3, #0
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	e014      	b.n	800a7ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a790:	4a0f      	ldr	r2, [pc, #60]	; (800a7d0 <vQueueAddToRegistry+0x50>)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10b      	bne.n	800a7b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a79c:	490c      	ldr	r1, [pc, #48]	; (800a7d0 <vQueueAddToRegistry+0x50>)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7a6:	4a0a      	ldr	r2, [pc, #40]	; (800a7d0 <vQueueAddToRegistry+0x50>)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7b2:	e006      	b.n	800a7c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	60fb      	str	r3, [r7, #12]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b07      	cmp	r3, #7
 800a7be:	d9e7      	bls.n	800a790 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7c0:	bf00      	nop
 800a7c2:	bf00      	nop
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	200008dc 	.word	0x200008dc

0800a7d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7e4:	f001 fcd6 	bl	800c194 <vPortEnterCritical>
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7ee:	b25b      	sxtb	r3, r3
 800a7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f4:	d103      	bne.n	800a7fe <vQueueWaitForMessageRestricted+0x2a>
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a804:	b25b      	sxtb	r3, r3
 800a806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80a:	d103      	bne.n	800a814 <vQueueWaitForMessageRestricted+0x40>
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a814:	f001 fcee 	bl	800c1f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d106      	bne.n	800a82e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	3324      	adds	r3, #36	; 0x24
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	68b9      	ldr	r1, [r7, #8]
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 fc5f 	bl	800b0ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a82e:	6978      	ldr	r0, [r7, #20]
 800a830:	f7ff ff26 	bl	800a680 <prvUnlockQueue>
	}
 800a834:	bf00      	nop
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08e      	sub	sp, #56	; 0x38
 800a840:	af04      	add	r7, sp, #16
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	623b      	str	r3, [r7, #32]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10a      	bne.n	800a882 <xTaskCreateStatic+0x46>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	61fb      	str	r3, [r7, #28]
}
 800a87e:	bf00      	nop
 800a880:	e7fe      	b.n	800a880 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a882:	235c      	movs	r3, #92	; 0x5c
 800a884:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	2b5c      	cmp	r3, #92	; 0x5c
 800a88a:	d00a      	beq.n	800a8a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	61bb      	str	r3, [r7, #24]
}
 800a89e:	bf00      	nop
 800a8a0:	e7fe      	b.n	800a8a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a8a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d01e      	beq.n	800a8e8 <xTaskCreateStatic+0xac>
 800a8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d01b      	beq.n	800a8e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	2202      	movs	r2, #2
 800a8be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9303      	str	r3, [sp, #12]
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	9302      	str	r3, [sp, #8]
 800a8ca:	f107 0314 	add.w	r3, r7, #20
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	68b9      	ldr	r1, [r7, #8]
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 f850 	bl	800a980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8e2:	f000 f8dd 	bl	800aaa0 <prvAddNewTaskToReadyList>
 800a8e6:	e001      	b.n	800a8ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8ec:	697b      	ldr	r3, [r7, #20]
	}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3728      	adds	r7, #40	; 0x28
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b08c      	sub	sp, #48	; 0x30
 800a8fa:	af04      	add	r7, sp, #16
 800a8fc:	60f8      	str	r0, [r7, #12]
 800a8fe:	60b9      	str	r1, [r7, #8]
 800a900:	603b      	str	r3, [r7, #0]
 800a902:	4613      	mov	r3, r2
 800a904:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a906:	88fb      	ldrh	r3, [r7, #6]
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4618      	mov	r0, r3
 800a90c:	f001 fd64 	bl	800c3d8 <pvPortMalloc>
 800a910:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00e      	beq.n	800a936 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a918:	205c      	movs	r0, #92	; 0x5c
 800a91a:	f001 fd5d 	bl	800c3d8 <pvPortMalloc>
 800a91e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d003      	beq.n	800a92e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	631a      	str	r2, [r3, #48]	; 0x30
 800a92c:	e005      	b.n	800a93a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a92e:	6978      	ldr	r0, [r7, #20]
 800a930:	f001 fe22 	bl	800c578 <vPortFree>
 800a934:	e001      	b.n	800a93a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a936:	2300      	movs	r3, #0
 800a938:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d017      	beq.n	800a970 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a948:	88fa      	ldrh	r2, [r7, #6]
 800a94a:	2300      	movs	r3, #0
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	9302      	str	r3, [sp, #8]
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68b9      	ldr	r1, [r7, #8]
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 f80e 	bl	800a980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a964:	69f8      	ldr	r0, [r7, #28]
 800a966:	f000 f89b 	bl	800aaa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a96a:	2301      	movs	r3, #1
 800a96c:	61bb      	str	r3, [r7, #24]
 800a96e:	e002      	b.n	800a976 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a970:	f04f 33ff 	mov.w	r3, #4294967295
 800a974:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a976:	69bb      	ldr	r3, [r7, #24]
	}
 800a978:	4618      	mov	r0, r3
 800a97a:	3720      	adds	r7, #32
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b088      	sub	sp, #32
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	461a      	mov	r2, r3
 800a998:	21a5      	movs	r1, #165	; 0xa5
 800a99a:	f001 ff3d 	bl	800c818 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	f023 0307 	bic.w	r3, r3, #7
 800a9b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	f003 0307 	and.w	r3, r3, #7
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00a      	beq.n	800a9d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	617b      	str	r3, [r7, #20]
}
 800a9d4:	bf00      	nop
 800a9d6:	e7fe      	b.n	800a9d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d01f      	beq.n	800aa1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9de:	2300      	movs	r3, #0
 800a9e0:	61fb      	str	r3, [r7, #28]
 800a9e2:	e012      	b.n	800aa0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	7819      	ldrb	r1, [r3, #0]
 800a9ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	3334      	adds	r3, #52	; 0x34
 800a9f4:	460a      	mov	r2, r1
 800a9f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d006      	beq.n	800aa12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	3301      	adds	r3, #1
 800aa08:	61fb      	str	r3, [r7, #28]
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	2b0f      	cmp	r3, #15
 800aa0e:	d9e9      	bls.n	800a9e4 <prvInitialiseNewTask+0x64>
 800aa10:	e000      	b.n	800aa14 <prvInitialiseNewTask+0x94>
			{
				break;
 800aa12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa1c:	e003      	b.n	800aa26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa28:	2b37      	cmp	r3, #55	; 0x37
 800aa2a:	d901      	bls.n	800aa30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa2c:	2337      	movs	r3, #55	; 0x37
 800aa2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3e:	2200      	movs	r2, #0
 800aa40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	3304      	adds	r3, #4
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fee4 	bl	8009814 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4e:	3318      	adds	r3, #24
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fe fedf 	bl	8009814 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	2200      	movs	r2, #0
 800aa70:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	68f9      	ldr	r1, [r7, #12]
 800aa7e:	69b8      	ldr	r0, [r7, #24]
 800aa80:	f001 fa5a 	bl	800bf38 <pxPortInitialiseStack>
 800aa84:	4602      	mov	r2, r0
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa96:	bf00      	nop
 800aa98:	3720      	adds	r7, #32
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aaa8:	f001 fb74 	bl	800c194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aaac:	4b2d      	ldr	r3, [pc, #180]	; (800ab64 <prvAddNewTaskToReadyList+0xc4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3301      	adds	r3, #1
 800aab2:	4a2c      	ldr	r2, [pc, #176]	; (800ab64 <prvAddNewTaskToReadyList+0xc4>)
 800aab4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aab6:	4b2c      	ldr	r3, [pc, #176]	; (800ab68 <prvAddNewTaskToReadyList+0xc8>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d109      	bne.n	800aad2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aabe:	4a2a      	ldr	r2, [pc, #168]	; (800ab68 <prvAddNewTaskToReadyList+0xc8>)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aac4:	4b27      	ldr	r3, [pc, #156]	; (800ab64 <prvAddNewTaskToReadyList+0xc4>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d110      	bne.n	800aaee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aacc:	f000 fc3a 	bl	800b344 <prvInitialiseTaskLists>
 800aad0:	e00d      	b.n	800aaee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aad2:	4b26      	ldr	r3, [pc, #152]	; (800ab6c <prvAddNewTaskToReadyList+0xcc>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d109      	bne.n	800aaee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aada:	4b23      	ldr	r3, [pc, #140]	; (800ab68 <prvAddNewTaskToReadyList+0xc8>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d802      	bhi.n	800aaee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aae8:	4a1f      	ldr	r2, [pc, #124]	; (800ab68 <prvAddNewTaskToReadyList+0xc8>)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aaee:	4b20      	ldr	r3, [pc, #128]	; (800ab70 <prvAddNewTaskToReadyList+0xd0>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	4a1e      	ldr	r2, [pc, #120]	; (800ab70 <prvAddNewTaskToReadyList+0xd0>)
 800aaf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aaf8:	4b1d      	ldr	r3, [pc, #116]	; (800ab70 <prvAddNewTaskToReadyList+0xd0>)
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab04:	4b1b      	ldr	r3, [pc, #108]	; (800ab74 <prvAddNewTaskToReadyList+0xd4>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d903      	bls.n	800ab14 <prvAddNewTaskToReadyList+0x74>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab10:	4a18      	ldr	r2, [pc, #96]	; (800ab74 <prvAddNewTaskToReadyList+0xd4>)
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab18:	4613      	mov	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4a15      	ldr	r2, [pc, #84]	; (800ab78 <prvAddNewTaskToReadyList+0xd8>)
 800ab22:	441a      	add	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	f7fe fe7f 	bl	800982e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab30:	f001 fb60 	bl	800c1f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab34:	4b0d      	ldr	r3, [pc, #52]	; (800ab6c <prvAddNewTaskToReadyList+0xcc>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00e      	beq.n	800ab5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab3c:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <prvAddNewTaskToReadyList+0xc8>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d207      	bcs.n	800ab5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab4a:	4b0c      	ldr	r3, [pc, #48]	; (800ab7c <prvAddNewTaskToReadyList+0xdc>)
 800ab4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab5a:	bf00      	nop
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	20000df0 	.word	0x20000df0
 800ab68:	2000091c 	.word	0x2000091c
 800ab6c:	20000dfc 	.word	0x20000dfc
 800ab70:	20000e0c 	.word	0x20000e0c
 800ab74:	20000df8 	.word	0x20000df8
 800ab78:	20000920 	.word	0x20000920
 800ab7c:	e000ed04 	.word	0xe000ed04

0800ab80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d017      	beq.n	800abc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab92:	4b13      	ldr	r3, [pc, #76]	; (800abe0 <vTaskDelay+0x60>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00a      	beq.n	800abb0 <vTaskDelay+0x30>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	60bb      	str	r3, [r7, #8]
}
 800abac:	bf00      	nop
 800abae:	e7fe      	b.n	800abae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800abb0:	f000 f880 	bl	800acb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800abb4:	2100      	movs	r1, #0
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fe1c 	bl	800b7f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800abbc:	f000 f888 	bl	800acd0 <xTaskResumeAll>
 800abc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d107      	bne.n	800abd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800abc8:	4b06      	ldr	r3, [pc, #24]	; (800abe4 <vTaskDelay+0x64>)
 800abca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800abd8:	bf00      	nop
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	20000e18 	.word	0x20000e18
 800abe4:	e000ed04 	.word	0xe000ed04

0800abe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b08a      	sub	sp, #40	; 0x28
 800abec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800abf6:	463a      	mov	r2, r7
 800abf8:	1d39      	adds	r1, r7, #4
 800abfa:	f107 0308 	add.w	r3, r7, #8
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fe fdb4 	bl	800976c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	9202      	str	r2, [sp, #8]
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	2300      	movs	r3, #0
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	2300      	movs	r3, #0
 800ac14:	460a      	mov	r2, r1
 800ac16:	4921      	ldr	r1, [pc, #132]	; (800ac9c <vTaskStartScheduler+0xb4>)
 800ac18:	4821      	ldr	r0, [pc, #132]	; (800aca0 <vTaskStartScheduler+0xb8>)
 800ac1a:	f7ff fe0f 	bl	800a83c <xTaskCreateStatic>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	4a20      	ldr	r2, [pc, #128]	; (800aca4 <vTaskStartScheduler+0xbc>)
 800ac22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac24:	4b1f      	ldr	r3, [pc, #124]	; (800aca4 <vTaskStartScheduler+0xbc>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	617b      	str	r3, [r7, #20]
 800ac30:	e001      	b.n	800ac36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d102      	bne.n	800ac42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac3c:	f000 fe2e 	bl	800b89c <xTimerCreateTimerTask>
 800ac40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d116      	bne.n	800ac76 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	613b      	str	r3, [r7, #16]
}
 800ac5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac5c:	4b12      	ldr	r3, [pc, #72]	; (800aca8 <vTaskStartScheduler+0xc0>)
 800ac5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac64:	4b11      	ldr	r3, [pc, #68]	; (800acac <vTaskStartScheduler+0xc4>)
 800ac66:	2201      	movs	r2, #1
 800ac68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac6a:	4b11      	ldr	r3, [pc, #68]	; (800acb0 <vTaskStartScheduler+0xc8>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac70:	f001 f9ee 	bl	800c050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac74:	e00e      	b.n	800ac94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7c:	d10a      	bne.n	800ac94 <vTaskStartScheduler+0xac>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	60fb      	str	r3, [r7, #12]
}
 800ac90:	bf00      	nop
 800ac92:	e7fe      	b.n	800ac92 <vTaskStartScheduler+0xaa>
}
 800ac94:	bf00      	nop
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	0800ca04 	.word	0x0800ca04
 800aca0:	0800b315 	.word	0x0800b315
 800aca4:	20000e14 	.word	0x20000e14
 800aca8:	20000e10 	.word	0x20000e10
 800acac:	20000dfc 	.word	0x20000dfc
 800acb0:	20000df4 	.word	0x20000df4

0800acb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acb4:	b480      	push	{r7}
 800acb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800acb8:	4b04      	ldr	r3, [pc, #16]	; (800accc <vTaskSuspendAll+0x18>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	3301      	adds	r3, #1
 800acbe:	4a03      	ldr	r2, [pc, #12]	; (800accc <vTaskSuspendAll+0x18>)
 800acc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800acc2:	bf00      	nop
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	20000e18 	.word	0x20000e18

0800acd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800acda:	2300      	movs	r3, #0
 800acdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800acde:	4b42      	ldr	r3, [pc, #264]	; (800ade8 <xTaskResumeAll+0x118>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d10a      	bne.n	800acfc <xTaskResumeAll+0x2c>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	603b      	str	r3, [r7, #0]
}
 800acf8:	bf00      	nop
 800acfa:	e7fe      	b.n	800acfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800acfc:	f001 fa4a 	bl	800c194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad00:	4b39      	ldr	r3, [pc, #228]	; (800ade8 <xTaskResumeAll+0x118>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	4a38      	ldr	r2, [pc, #224]	; (800ade8 <xTaskResumeAll+0x118>)
 800ad08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad0a:	4b37      	ldr	r3, [pc, #220]	; (800ade8 <xTaskResumeAll+0x118>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d162      	bne.n	800add8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad12:	4b36      	ldr	r3, [pc, #216]	; (800adec <xTaskResumeAll+0x11c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d05e      	beq.n	800add8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad1a:	e02f      	b.n	800ad7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad1c:	4b34      	ldr	r3, [pc, #208]	; (800adf0 <xTaskResumeAll+0x120>)
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3318      	adds	r3, #24
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fe fddd 	bl	80098e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3304      	adds	r3, #4
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fe fdd8 	bl	80098e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3c:	4b2d      	ldr	r3, [pc, #180]	; (800adf4 <xTaskResumeAll+0x124>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d903      	bls.n	800ad4c <xTaskResumeAll+0x7c>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad48:	4a2a      	ldr	r2, [pc, #168]	; (800adf4 <xTaskResumeAll+0x124>)
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad50:	4613      	mov	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4413      	add	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4a27      	ldr	r2, [pc, #156]	; (800adf8 <xTaskResumeAll+0x128>)
 800ad5a:	441a      	add	r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	4619      	mov	r1, r3
 800ad62:	4610      	mov	r0, r2
 800ad64:	f7fe fd63 	bl	800982e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6c:	4b23      	ldr	r3, [pc, #140]	; (800adfc <xTaskResumeAll+0x12c>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d302      	bcc.n	800ad7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ad76:	4b22      	ldr	r3, [pc, #136]	; (800ae00 <xTaskResumeAll+0x130>)
 800ad78:	2201      	movs	r2, #1
 800ad7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad7c:	4b1c      	ldr	r3, [pc, #112]	; (800adf0 <xTaskResumeAll+0x120>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1cb      	bne.n	800ad1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad8a:	f000 fb79 	bl	800b480 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad8e:	4b1d      	ldr	r3, [pc, #116]	; (800ae04 <xTaskResumeAll+0x134>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d010      	beq.n	800adbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad9a:	f000 f847 	bl	800ae2c <xTaskIncrementTick>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ada4:	4b16      	ldr	r3, [pc, #88]	; (800ae00 <xTaskResumeAll+0x130>)
 800ada6:	2201      	movs	r2, #1
 800ada8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	3b01      	subs	r3, #1
 800adae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1f1      	bne.n	800ad9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800adb6:	4b13      	ldr	r3, [pc, #76]	; (800ae04 <xTaskResumeAll+0x134>)
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800adbc:	4b10      	ldr	r3, [pc, #64]	; (800ae00 <xTaskResumeAll+0x130>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d009      	beq.n	800add8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800adc4:	2301      	movs	r3, #1
 800adc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800adc8:	4b0f      	ldr	r3, [pc, #60]	; (800ae08 <xTaskResumeAll+0x138>)
 800adca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800add8:	f001 fa0c 	bl	800c1f4 <vPortExitCritical>

	return xAlreadyYielded;
 800addc:	68bb      	ldr	r3, [r7, #8]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	20000e18 	.word	0x20000e18
 800adec:	20000df0 	.word	0x20000df0
 800adf0:	20000db0 	.word	0x20000db0
 800adf4:	20000df8 	.word	0x20000df8
 800adf8:	20000920 	.word	0x20000920
 800adfc:	2000091c 	.word	0x2000091c
 800ae00:	20000e04 	.word	0x20000e04
 800ae04:	20000e00 	.word	0x20000e00
 800ae08:	e000ed04 	.word	0xe000ed04

0800ae0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae12:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <xTaskGetTickCount+0x1c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae18:	687b      	ldr	r3, [r7, #4]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	370c      	adds	r7, #12
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	20000df4 	.word	0x20000df4

0800ae2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae36:	4b4f      	ldr	r3, [pc, #316]	; (800af74 <xTaskIncrementTick+0x148>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f040 808f 	bne.w	800af5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae40:	4b4d      	ldr	r3, [pc, #308]	; (800af78 <xTaskIncrementTick+0x14c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3301      	adds	r3, #1
 800ae46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae48:	4a4b      	ldr	r2, [pc, #300]	; (800af78 <xTaskIncrementTick+0x14c>)
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d120      	bne.n	800ae96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae54:	4b49      	ldr	r3, [pc, #292]	; (800af7c <xTaskIncrementTick+0x150>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00a      	beq.n	800ae74 <xTaskIncrementTick+0x48>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	603b      	str	r3, [r7, #0]
}
 800ae70:	bf00      	nop
 800ae72:	e7fe      	b.n	800ae72 <xTaskIncrementTick+0x46>
 800ae74:	4b41      	ldr	r3, [pc, #260]	; (800af7c <xTaskIncrementTick+0x150>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	4b41      	ldr	r3, [pc, #260]	; (800af80 <xTaskIncrementTick+0x154>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a3f      	ldr	r2, [pc, #252]	; (800af7c <xTaskIncrementTick+0x150>)
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	4a3f      	ldr	r2, [pc, #252]	; (800af80 <xTaskIncrementTick+0x154>)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6013      	str	r3, [r2, #0]
 800ae88:	4b3e      	ldr	r3, [pc, #248]	; (800af84 <xTaskIncrementTick+0x158>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	4a3d      	ldr	r2, [pc, #244]	; (800af84 <xTaskIncrementTick+0x158>)
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	f000 faf5 	bl	800b480 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae96:	4b3c      	ldr	r3, [pc, #240]	; (800af88 <xTaskIncrementTick+0x15c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d349      	bcc.n	800af34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aea0:	4b36      	ldr	r3, [pc, #216]	; (800af7c <xTaskIncrementTick+0x150>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d104      	bne.n	800aeb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeaa:	4b37      	ldr	r3, [pc, #220]	; (800af88 <xTaskIncrementTick+0x15c>)
 800aeac:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb0:	601a      	str	r2, [r3, #0]
					break;
 800aeb2:	e03f      	b.n	800af34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeb4:	4b31      	ldr	r3, [pc, #196]	; (800af7c <xTaskIncrementTick+0x150>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d203      	bcs.n	800aed4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aecc:	4a2e      	ldr	r2, [pc, #184]	; (800af88 <xTaskIncrementTick+0x15c>)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aed2:	e02f      	b.n	800af34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	3304      	adds	r3, #4
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fe fd05 	bl	80098e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d004      	beq.n	800aef0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	3318      	adds	r3, #24
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe fcfc 	bl	80098e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef4:	4b25      	ldr	r3, [pc, #148]	; (800af8c <xTaskIncrementTick+0x160>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d903      	bls.n	800af04 <xTaskIncrementTick+0xd8>
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	4a22      	ldr	r2, [pc, #136]	; (800af8c <xTaskIncrementTick+0x160>)
 800af02:	6013      	str	r3, [r2, #0]
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af08:	4613      	mov	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4a1f      	ldr	r2, [pc, #124]	; (800af90 <xTaskIncrementTick+0x164>)
 800af12:	441a      	add	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	3304      	adds	r3, #4
 800af18:	4619      	mov	r1, r3
 800af1a:	4610      	mov	r0, r2
 800af1c:	f7fe fc87 	bl	800982e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af24:	4b1b      	ldr	r3, [pc, #108]	; (800af94 <xTaskIncrementTick+0x168>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d3b8      	bcc.n	800aea0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af2e:	2301      	movs	r3, #1
 800af30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af32:	e7b5      	b.n	800aea0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af34:	4b17      	ldr	r3, [pc, #92]	; (800af94 <xTaskIncrementTick+0x168>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3a:	4915      	ldr	r1, [pc, #84]	; (800af90 <xTaskIncrementTick+0x164>)
 800af3c:	4613      	mov	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4413      	add	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	440b      	add	r3, r1
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d901      	bls.n	800af50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af4c:	2301      	movs	r3, #1
 800af4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af50:	4b11      	ldr	r3, [pc, #68]	; (800af98 <xTaskIncrementTick+0x16c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d007      	beq.n	800af68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800af58:	2301      	movs	r3, #1
 800af5a:	617b      	str	r3, [r7, #20]
 800af5c:	e004      	b.n	800af68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af5e:	4b0f      	ldr	r3, [pc, #60]	; (800af9c <xTaskIncrementTick+0x170>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3301      	adds	r3, #1
 800af64:	4a0d      	ldr	r2, [pc, #52]	; (800af9c <xTaskIncrementTick+0x170>)
 800af66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af68:	697b      	ldr	r3, [r7, #20]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	20000e18 	.word	0x20000e18
 800af78:	20000df4 	.word	0x20000df4
 800af7c:	20000da8 	.word	0x20000da8
 800af80:	20000dac 	.word	0x20000dac
 800af84:	20000e08 	.word	0x20000e08
 800af88:	20000e10 	.word	0x20000e10
 800af8c:	20000df8 	.word	0x20000df8
 800af90:	20000920 	.word	0x20000920
 800af94:	2000091c 	.word	0x2000091c
 800af98:	20000e04 	.word	0x20000e04
 800af9c:	20000e00 	.word	0x20000e00

0800afa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afa6:	4b3a      	ldr	r3, [pc, #232]	; (800b090 <vTaskSwitchContext+0xf0>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800afae:	4b39      	ldr	r3, [pc, #228]	; (800b094 <vTaskSwitchContext+0xf4>)
 800afb0:	2201      	movs	r2, #1
 800afb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800afb4:	e068      	b.n	800b088 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800afb6:	4b37      	ldr	r3, [pc, #220]	; (800b094 <vTaskSwitchContext+0xf4>)
 800afb8:	2200      	movs	r2, #0
 800afba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800afbc:	4b36      	ldr	r3, [pc, #216]	; (800b098 <vTaskSwitchContext+0xf8>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc2:	613b      	str	r3, [r7, #16]
 800afc4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d111      	bne.n	800aff8 <vTaskSwitchContext+0x58>
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	3304      	adds	r3, #4
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d10b      	bne.n	800aff8 <vTaskSwitchContext+0x58>
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	3308      	adds	r3, #8
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d105      	bne.n	800aff8 <vTaskSwitchContext+0x58>
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	330c      	adds	r3, #12
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d008      	beq.n	800b00a <vTaskSwitchContext+0x6a>
 800aff8:	4b27      	ldr	r3, [pc, #156]	; (800b098 <vTaskSwitchContext+0xf8>)
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	4b26      	ldr	r3, [pc, #152]	; (800b098 <vTaskSwitchContext+0xf8>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3334      	adds	r3, #52	; 0x34
 800b002:	4619      	mov	r1, r3
 800b004:	4610      	mov	r0, r2
 800b006:	f7f6 ff0f 	bl	8001e28 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b00a:	4b24      	ldr	r3, [pc, #144]	; (800b09c <vTaskSwitchContext+0xfc>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	617b      	str	r3, [r7, #20]
 800b010:	e010      	b.n	800b034 <vTaskSwitchContext+0x94>
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10a      	bne.n	800b02e <vTaskSwitchContext+0x8e>
	__asm volatile
 800b018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	607b      	str	r3, [r7, #4]
}
 800b02a:	bf00      	nop
 800b02c:	e7fe      	b.n	800b02c <vTaskSwitchContext+0x8c>
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	3b01      	subs	r3, #1
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	491a      	ldr	r1, [pc, #104]	; (800b0a0 <vTaskSwitchContext+0x100>)
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	4613      	mov	r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	4413      	add	r3, r2
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	440b      	add	r3, r1
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d0e4      	beq.n	800b012 <vTaskSwitchContext+0x72>
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	4613      	mov	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4413      	add	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4a13      	ldr	r2, [pc, #76]	; (800b0a0 <vTaskSwitchContext+0x100>)
 800b054:	4413      	add	r3, r2
 800b056:	60bb      	str	r3, [r7, #8]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	605a      	str	r2, [r3, #4]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	685a      	ldr	r2, [r3, #4]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	3308      	adds	r3, #8
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d104      	bne.n	800b078 <vTaskSwitchContext+0xd8>
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	605a      	str	r2, [r3, #4]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	4a06      	ldr	r2, [pc, #24]	; (800b098 <vTaskSwitchContext+0xf8>)
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	4a06      	ldr	r2, [pc, #24]	; (800b09c <vTaskSwitchContext+0xfc>)
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	6013      	str	r3, [r2, #0]
}
 800b088:	bf00      	nop
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	20000e18 	.word	0x20000e18
 800b094:	20000e04 	.word	0x20000e04
 800b098:	2000091c 	.word	0x2000091c
 800b09c:	20000df8 	.word	0x20000df8
 800b0a0:	20000920 	.word	0x20000920

0800b0a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10a      	bne.n	800b0ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	60fb      	str	r3, [r7, #12]
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0ca:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <vTaskPlaceOnEventList+0x44>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	3318      	adds	r3, #24
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7fe fbcf 	bl	8009876 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0d8:	2101      	movs	r1, #1
 800b0da:	6838      	ldr	r0, [r7, #0]
 800b0dc:	f000 fb8a 	bl	800b7f4 <prvAddCurrentTaskToDelayedList>
}
 800b0e0:	bf00      	nop
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	2000091c 	.word	0x2000091c

0800b0ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10a      	bne.n	800b114 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	617b      	str	r3, [r7, #20]
}
 800b110:	bf00      	nop
 800b112:	e7fe      	b.n	800b112 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b114:	4b0a      	ldr	r3, [pc, #40]	; (800b140 <vTaskPlaceOnEventListRestricted+0x54>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3318      	adds	r3, #24
 800b11a:	4619      	mov	r1, r3
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7fe fb86 	bl	800982e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b128:	f04f 33ff 	mov.w	r3, #4294967295
 800b12c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	68b8      	ldr	r0, [r7, #8]
 800b132:	f000 fb5f 	bl	800b7f4 <prvAddCurrentTaskToDelayedList>
	}
 800b136:	bf00      	nop
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	2000091c 	.word	0x2000091c

0800b144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10a      	bne.n	800b170 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	60fb      	str	r3, [r7, #12]
}
 800b16c:	bf00      	nop
 800b16e:	e7fe      	b.n	800b16e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	3318      	adds	r3, #24
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe fbb7 	bl	80098e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b17a:	4b1e      	ldr	r3, [pc, #120]	; (800b1f4 <xTaskRemoveFromEventList+0xb0>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d11d      	bne.n	800b1be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	3304      	adds	r3, #4
 800b186:	4618      	mov	r0, r3
 800b188:	f7fe fbae 	bl	80098e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	4b19      	ldr	r3, [pc, #100]	; (800b1f8 <xTaskRemoveFromEventList+0xb4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	429a      	cmp	r2, r3
 800b196:	d903      	bls.n	800b1a0 <xTaskRemoveFromEventList+0x5c>
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19c:	4a16      	ldr	r2, [pc, #88]	; (800b1f8 <xTaskRemoveFromEventList+0xb4>)
 800b19e:	6013      	str	r3, [r2, #0]
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4a13      	ldr	r2, [pc, #76]	; (800b1fc <xTaskRemoveFromEventList+0xb8>)
 800b1ae:	441a      	add	r2, r3
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	4610      	mov	r0, r2
 800b1b8:	f7fe fb39 	bl	800982e <vListInsertEnd>
 800b1bc:	e005      	b.n	800b1ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	3318      	adds	r3, #24
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	480e      	ldr	r0, [pc, #56]	; (800b200 <xTaskRemoveFromEventList+0xbc>)
 800b1c6:	f7fe fb32 	bl	800982e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ce:	4b0d      	ldr	r3, [pc, #52]	; (800b204 <xTaskRemoveFromEventList+0xc0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d905      	bls.n	800b1e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <xTaskRemoveFromEventList+0xc4>)
 800b1de:	2201      	movs	r2, #1
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	e001      	b.n	800b1e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b1e8:	697b      	ldr	r3, [r7, #20]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20000e18 	.word	0x20000e18
 800b1f8:	20000df8 	.word	0x20000df8
 800b1fc:	20000920 	.word	0x20000920
 800b200:	20000db0 	.word	0x20000db0
 800b204:	2000091c 	.word	0x2000091c
 800b208:	20000e04 	.word	0x20000e04

0800b20c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b214:	4b06      	ldr	r3, [pc, #24]	; (800b230 <vTaskInternalSetTimeOutState+0x24>)
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b21c:	4b05      	ldr	r3, [pc, #20]	; (800b234 <vTaskInternalSetTimeOutState+0x28>)
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	605a      	str	r2, [r3, #4]
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	20000e08 	.word	0x20000e08
 800b234:	20000df4 	.word	0x20000df4

0800b238 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b088      	sub	sp, #32
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10a      	bne.n	800b25e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	613b      	str	r3, [r7, #16]
}
 800b25a:	bf00      	nop
 800b25c:	e7fe      	b.n	800b25c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10a      	bne.n	800b27a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	60fb      	str	r3, [r7, #12]
}
 800b276:	bf00      	nop
 800b278:	e7fe      	b.n	800b278 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b27a:	f000 ff8b 	bl	800c194 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b27e:	4b1d      	ldr	r3, [pc, #116]	; (800b2f4 <xTaskCheckForTimeOut+0xbc>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b296:	d102      	bne.n	800b29e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b298:	2300      	movs	r3, #0
 800b29a:	61fb      	str	r3, [r7, #28]
 800b29c:	e023      	b.n	800b2e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <xTaskCheckForTimeOut+0xc0>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d007      	beq.n	800b2ba <xTaskCheckForTimeOut+0x82>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	69ba      	ldr	r2, [r7, #24]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d302      	bcc.n	800b2ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	61fb      	str	r3, [r7, #28]
 800b2b8:	e015      	b.n	800b2e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d20b      	bcs.n	800b2dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	1ad2      	subs	r2, r2, r3
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff ff9b 	bl	800b20c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	61fb      	str	r3, [r7, #28]
 800b2da:	e004      	b.n	800b2e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b2e6:	f000 ff85 	bl	800c1f4 <vPortExitCritical>

	return xReturn;
 800b2ea:	69fb      	ldr	r3, [r7, #28]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3720      	adds	r7, #32
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	20000df4 	.word	0x20000df4
 800b2f8:	20000e08 	.word	0x20000e08

0800b2fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b300:	4b03      	ldr	r3, [pc, #12]	; (800b310 <vTaskMissedYield+0x14>)
 800b302:	2201      	movs	r2, #1
 800b304:	601a      	str	r2, [r3, #0]
}
 800b306:	bf00      	nop
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	20000e04 	.word	0x20000e04

0800b314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b31c:	f000 f852 	bl	800b3c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b320:	4b06      	ldr	r3, [pc, #24]	; (800b33c <prvIdleTask+0x28>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d9f9      	bls.n	800b31c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b328:	4b05      	ldr	r3, [pc, #20]	; (800b340 <prvIdleTask+0x2c>)
 800b32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b338:	e7f0      	b.n	800b31c <prvIdleTask+0x8>
 800b33a:	bf00      	nop
 800b33c:	20000920 	.word	0x20000920
 800b340:	e000ed04 	.word	0xe000ed04

0800b344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b34a:	2300      	movs	r3, #0
 800b34c:	607b      	str	r3, [r7, #4]
 800b34e:	e00c      	b.n	800b36a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4a12      	ldr	r2, [pc, #72]	; (800b3a4 <prvInitialiseTaskLists+0x60>)
 800b35c:	4413      	add	r3, r2
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fa38 	bl	80097d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3301      	adds	r3, #1
 800b368:	607b      	str	r3, [r7, #4]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b37      	cmp	r3, #55	; 0x37
 800b36e:	d9ef      	bls.n	800b350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b370:	480d      	ldr	r0, [pc, #52]	; (800b3a8 <prvInitialiseTaskLists+0x64>)
 800b372:	f7fe fa2f 	bl	80097d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b376:	480d      	ldr	r0, [pc, #52]	; (800b3ac <prvInitialiseTaskLists+0x68>)
 800b378:	f7fe fa2c 	bl	80097d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b37c:	480c      	ldr	r0, [pc, #48]	; (800b3b0 <prvInitialiseTaskLists+0x6c>)
 800b37e:	f7fe fa29 	bl	80097d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b382:	480c      	ldr	r0, [pc, #48]	; (800b3b4 <prvInitialiseTaskLists+0x70>)
 800b384:	f7fe fa26 	bl	80097d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b388:	480b      	ldr	r0, [pc, #44]	; (800b3b8 <prvInitialiseTaskLists+0x74>)
 800b38a:	f7fe fa23 	bl	80097d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b38e:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <prvInitialiseTaskLists+0x78>)
 800b390:	4a05      	ldr	r2, [pc, #20]	; (800b3a8 <prvInitialiseTaskLists+0x64>)
 800b392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b394:	4b0a      	ldr	r3, [pc, #40]	; (800b3c0 <prvInitialiseTaskLists+0x7c>)
 800b396:	4a05      	ldr	r2, [pc, #20]	; (800b3ac <prvInitialiseTaskLists+0x68>)
 800b398:	601a      	str	r2, [r3, #0]
}
 800b39a:	bf00      	nop
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20000920 	.word	0x20000920
 800b3a8:	20000d80 	.word	0x20000d80
 800b3ac:	20000d94 	.word	0x20000d94
 800b3b0:	20000db0 	.word	0x20000db0
 800b3b4:	20000dc4 	.word	0x20000dc4
 800b3b8:	20000ddc 	.word	0x20000ddc
 800b3bc:	20000da8 	.word	0x20000da8
 800b3c0:	20000dac 	.word	0x20000dac

0800b3c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3ca:	e019      	b.n	800b400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b3cc:	f000 fee2 	bl	800c194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3d0:	4b10      	ldr	r3, [pc, #64]	; (800b414 <prvCheckTasksWaitingTermination+0x50>)
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3304      	adds	r3, #4
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7fe fa83 	bl	80098e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b3e2:	4b0d      	ldr	r3, [pc, #52]	; (800b418 <prvCheckTasksWaitingTermination+0x54>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	4a0b      	ldr	r2, [pc, #44]	; (800b418 <prvCheckTasksWaitingTermination+0x54>)
 800b3ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b3ec:	4b0b      	ldr	r3, [pc, #44]	; (800b41c <prvCheckTasksWaitingTermination+0x58>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	4a0a      	ldr	r2, [pc, #40]	; (800b41c <prvCheckTasksWaitingTermination+0x58>)
 800b3f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b3f6:	f000 fefd 	bl	800c1f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f810 	bl	800b420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b400:	4b06      	ldr	r3, [pc, #24]	; (800b41c <prvCheckTasksWaitingTermination+0x58>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e1      	bne.n	800b3cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b408:	bf00      	nop
 800b40a:	bf00      	nop
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20000dc4 	.word	0x20000dc4
 800b418:	20000df0 	.word	0x20000df0
 800b41c:	20000dd8 	.word	0x20000dd8

0800b420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d108      	bne.n	800b444 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b436:	4618      	mov	r0, r3
 800b438:	f001 f89e 	bl	800c578 <vPortFree>
				vPortFree( pxTCB );
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f001 f89b 	bl	800c578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b442:	e018      	b.n	800b476 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d103      	bne.n	800b456 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f001 f892 	bl	800c578 <vPortFree>
	}
 800b454:	e00f      	b.n	800b476 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d00a      	beq.n	800b476 <prvDeleteTCB+0x56>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	60fb      	str	r3, [r7, #12]
}
 800b472:	bf00      	nop
 800b474:	e7fe      	b.n	800b474 <prvDeleteTCB+0x54>
	}
 800b476:	bf00      	nop
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
	...

0800b480 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b486:	4b0c      	ldr	r3, [pc, #48]	; (800b4b8 <prvResetNextTaskUnblockTime+0x38>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d104      	bne.n	800b49a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b490:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <prvResetNextTaskUnblockTime+0x3c>)
 800b492:	f04f 32ff 	mov.w	r2, #4294967295
 800b496:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b498:	e008      	b.n	800b4ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <prvResetNextTaskUnblockTime+0x38>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	4a04      	ldr	r2, [pc, #16]	; (800b4bc <prvResetNextTaskUnblockTime+0x3c>)
 800b4aa:	6013      	str	r3, [r2, #0]
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	20000da8 	.word	0x20000da8
 800b4bc:	20000e10 	.word	0x20000e10

0800b4c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b4c6:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <xTaskGetCurrentTaskHandle+0x1c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b4cc:	687b      	ldr	r3, [r7, #4]
	}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	2000091c 	.word	0x2000091c

0800b4e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b4e6:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <xTaskGetSchedulerState+0x34>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d102      	bne.n	800b4f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	607b      	str	r3, [r7, #4]
 800b4f2:	e008      	b.n	800b506 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4f4:	4b08      	ldr	r3, [pc, #32]	; (800b518 <xTaskGetSchedulerState+0x38>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d102      	bne.n	800b502 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	607b      	str	r3, [r7, #4]
 800b500:	e001      	b.n	800b506 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b502:	2300      	movs	r3, #0
 800b504:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b506:	687b      	ldr	r3, [r7, #4]
	}
 800b508:	4618      	mov	r0, r3
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	20000dfc 	.word	0x20000dfc
 800b518:	20000e18 	.word	0x20000e18

0800b51c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b528:	2300      	movs	r3, #0
 800b52a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d051      	beq.n	800b5d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b536:	4b2a      	ldr	r3, [pc, #168]	; (800b5e0 <xTaskPriorityInherit+0xc4>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d241      	bcs.n	800b5c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	2b00      	cmp	r3, #0
 800b546:	db06      	blt.n	800b556 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b548:	4b25      	ldr	r3, [pc, #148]	; (800b5e0 <xTaskPriorityInherit+0xc4>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	6959      	ldr	r1, [r3, #20]
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55e:	4613      	mov	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4413      	add	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4a1f      	ldr	r2, [pc, #124]	; (800b5e4 <xTaskPriorityInherit+0xc8>)
 800b568:	4413      	add	r3, r2
 800b56a:	4299      	cmp	r1, r3
 800b56c:	d122      	bne.n	800b5b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	3304      	adds	r3, #4
 800b572:	4618      	mov	r0, r3
 800b574:	f7fe f9b8 	bl	80098e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b578:	4b19      	ldr	r3, [pc, #100]	; (800b5e0 <xTaskPriorityInherit+0xc4>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b586:	4b18      	ldr	r3, [pc, #96]	; (800b5e8 <xTaskPriorityInherit+0xcc>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d903      	bls.n	800b596 <xTaskPriorityInherit+0x7a>
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b592:	4a15      	ldr	r2, [pc, #84]	; (800b5e8 <xTaskPriorityInherit+0xcc>)
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59a:	4613      	mov	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4a10      	ldr	r2, [pc, #64]	; (800b5e4 <xTaskPriorityInherit+0xc8>)
 800b5a4:	441a      	add	r2, r3
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	3304      	adds	r3, #4
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	f7fe f93e 	bl	800982e <vListInsertEnd>
 800b5b2:	e004      	b.n	800b5be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b5b4:	4b0a      	ldr	r3, [pc, #40]	; (800b5e0 <xTaskPriorityInherit+0xc4>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	e008      	b.n	800b5d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5c8:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <xTaskPriorityInherit+0xc4>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d201      	bcs.n	800b5d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
	}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	2000091c 	.word	0x2000091c
 800b5e4:	20000920 	.word	0x20000920
 800b5e8:	20000df8 	.word	0x20000df8

0800b5ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d056      	beq.n	800b6b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b602:	4b2e      	ldr	r3, [pc, #184]	; (800b6bc <xTaskPriorityDisinherit+0xd0>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d00a      	beq.n	800b622 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	60fb      	str	r3, [r7, #12]
}
 800b61e:	bf00      	nop
 800b620:	e7fe      	b.n	800b620 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10a      	bne.n	800b640 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	60bb      	str	r3, [r7, #8]
}
 800b63c:	bf00      	nop
 800b63e:	e7fe      	b.n	800b63e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b644:	1e5a      	subs	r2, r3, #1
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b652:	429a      	cmp	r2, r3
 800b654:	d02c      	beq.n	800b6b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d128      	bne.n	800b6b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	3304      	adds	r3, #4
 800b662:	4618      	mov	r0, r3
 800b664:	f7fe f940 	bl	80098e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b674:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b680:	4b0f      	ldr	r3, [pc, #60]	; (800b6c0 <xTaskPriorityDisinherit+0xd4>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	429a      	cmp	r2, r3
 800b686:	d903      	bls.n	800b690 <xTaskPriorityDisinherit+0xa4>
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68c:	4a0c      	ldr	r2, [pc, #48]	; (800b6c0 <xTaskPriorityDisinherit+0xd4>)
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b694:	4613      	mov	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	4a09      	ldr	r2, [pc, #36]	; (800b6c4 <xTaskPriorityDisinherit+0xd8>)
 800b69e:	441a      	add	r2, r3
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	f7fe f8c1 	bl	800982e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6b0:	697b      	ldr	r3, [r7, #20]
	}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	2000091c 	.word	0x2000091c
 800b6c0:	20000df8 	.word	0x20000df8
 800b6c4:	20000920 	.word	0x20000920

0800b6c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d06a      	beq.n	800b7b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10a      	bne.n	800b6fe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	60fb      	str	r3, [r7, #12]
}
 800b6fa:	bf00      	nop
 800b6fc:	e7fe      	b.n	800b6fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d902      	bls.n	800b70e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	61fb      	str	r3, [r7, #28]
 800b70c:	e002      	b.n	800b714 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b712:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b718:	69fa      	ldr	r2, [r7, #28]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d04b      	beq.n	800b7b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	429a      	cmp	r2, r3
 800b726:	d146      	bne.n	800b7b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b728:	4b25      	ldr	r3, [pc, #148]	; (800b7c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	69ba      	ldr	r2, [r7, #24]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d10a      	bne.n	800b748 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b736:	f383 8811 	msr	BASEPRI, r3
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	60bb      	str	r3, [r7, #8]
}
 800b744:	bf00      	nop
 800b746:	e7fe      	b.n	800b746 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	69fa      	ldr	r2, [r7, #28]
 800b752:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	db04      	blt.n	800b766 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	6959      	ldr	r1, [r3, #20]
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	4613      	mov	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4a13      	ldr	r2, [pc, #76]	; (800b7c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b776:	4413      	add	r3, r2
 800b778:	4299      	cmp	r1, r3
 800b77a:	d11c      	bne.n	800b7b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	3304      	adds	r3, #4
 800b780:	4618      	mov	r0, r3
 800b782:	f7fe f8b1 	bl	80098e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78a:	4b0f      	ldr	r3, [pc, #60]	; (800b7c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d903      	bls.n	800b79a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b796:	4a0c      	ldr	r2, [pc, #48]	; (800b7c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b798:	6013      	str	r3, [r2, #0]
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79e:	4613      	mov	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4413      	add	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4a07      	ldr	r2, [pc, #28]	; (800b7c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b7a8:	441a      	add	r2, r3
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	f7fe f83c 	bl	800982e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7b6:	bf00      	nop
 800b7b8:	3720      	adds	r7, #32
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	2000091c 	.word	0x2000091c
 800b7c4:	20000920 	.word	0x20000920
 800b7c8:	20000df8 	.word	0x20000df8

0800b7cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b7d0:	4b07      	ldr	r3, [pc, #28]	; (800b7f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d004      	beq.n	800b7e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b7d8:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7de:	3201      	adds	r2, #1
 800b7e0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b7e2:	4b03      	ldr	r3, [pc, #12]	; (800b7f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
	}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	2000091c 	.word	0x2000091c

0800b7f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7fe:	4b21      	ldr	r3, [pc, #132]	; (800b884 <prvAddCurrentTaskToDelayedList+0x90>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b804:	4b20      	ldr	r3, [pc, #128]	; (800b888 <prvAddCurrentTaskToDelayedList+0x94>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	3304      	adds	r3, #4
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe f86c 	bl	80098e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b816:	d10a      	bne.n	800b82e <prvAddCurrentTaskToDelayedList+0x3a>
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d007      	beq.n	800b82e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b81e:	4b1a      	ldr	r3, [pc, #104]	; (800b888 <prvAddCurrentTaskToDelayedList+0x94>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	3304      	adds	r3, #4
 800b824:	4619      	mov	r1, r3
 800b826:	4819      	ldr	r0, [pc, #100]	; (800b88c <prvAddCurrentTaskToDelayedList+0x98>)
 800b828:	f7fe f801 	bl	800982e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b82c:	e026      	b.n	800b87c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4413      	add	r3, r2
 800b834:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b836:	4b14      	ldr	r3, [pc, #80]	; (800b888 <prvAddCurrentTaskToDelayedList+0x94>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	429a      	cmp	r2, r3
 800b844:	d209      	bcs.n	800b85a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b846:	4b12      	ldr	r3, [pc, #72]	; (800b890 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	4b0f      	ldr	r3, [pc, #60]	; (800b888 <prvAddCurrentTaskToDelayedList+0x94>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	3304      	adds	r3, #4
 800b850:	4619      	mov	r1, r3
 800b852:	4610      	mov	r0, r2
 800b854:	f7fe f80f 	bl	8009876 <vListInsert>
}
 800b858:	e010      	b.n	800b87c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b85a:	4b0e      	ldr	r3, [pc, #56]	; (800b894 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <prvAddCurrentTaskToDelayedList+0x94>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	3304      	adds	r3, #4
 800b864:	4619      	mov	r1, r3
 800b866:	4610      	mov	r0, r2
 800b868:	f7fe f805 	bl	8009876 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b86c:	4b0a      	ldr	r3, [pc, #40]	; (800b898 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	429a      	cmp	r2, r3
 800b874:	d202      	bcs.n	800b87c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b876:	4a08      	ldr	r2, [pc, #32]	; (800b898 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	6013      	str	r3, [r2, #0]
}
 800b87c:	bf00      	nop
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	20000df4 	.word	0x20000df4
 800b888:	2000091c 	.word	0x2000091c
 800b88c:	20000ddc 	.word	0x20000ddc
 800b890:	20000dac 	.word	0x20000dac
 800b894:	20000da8 	.word	0x20000da8
 800b898:	20000e10 	.word	0x20000e10

0800b89c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b08a      	sub	sp, #40	; 0x28
 800b8a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8a6:	f000 fb07 	bl	800beb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8aa:	4b1c      	ldr	r3, [pc, #112]	; (800b91c <xTimerCreateTimerTask+0x80>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d021      	beq.n	800b8f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b8ba:	1d3a      	adds	r2, r7, #4
 800b8bc:	f107 0108 	add.w	r1, r7, #8
 800b8c0:	f107 030c 	add.w	r3, r7, #12
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fd ff6b 	bl	80097a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b8ca:	6879      	ldr	r1, [r7, #4]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	9202      	str	r2, [sp, #8]
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	460a      	mov	r2, r1
 800b8dc:	4910      	ldr	r1, [pc, #64]	; (800b920 <xTimerCreateTimerTask+0x84>)
 800b8de:	4811      	ldr	r0, [pc, #68]	; (800b924 <xTimerCreateTimerTask+0x88>)
 800b8e0:	f7fe ffac 	bl	800a83c <xTaskCreateStatic>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	4a10      	ldr	r2, [pc, #64]	; (800b928 <xTimerCreateTimerTask+0x8c>)
 800b8e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b8ea:	4b0f      	ldr	r3, [pc, #60]	; (800b928 <xTimerCreateTimerTask+0x8c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d001      	beq.n	800b8f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d10a      	bne.n	800b912 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	613b      	str	r3, [r7, #16]
}
 800b90e:	bf00      	nop
 800b910:	e7fe      	b.n	800b910 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b912:	697b      	ldr	r3, [r7, #20]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3718      	adds	r7, #24
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	20000e4c 	.word	0x20000e4c
 800b920:	0800ca0c 	.word	0x0800ca0c
 800b924:	0800ba61 	.word	0x0800ba61
 800b928:	20000e50 	.word	0x20000e50

0800b92c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08a      	sub	sp, #40	; 0x28
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b93a:	2300      	movs	r3, #0
 800b93c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	623b      	str	r3, [r7, #32]
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b95a:	4b1a      	ldr	r3, [pc, #104]	; (800b9c4 <xTimerGenericCommand+0x98>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d02a      	beq.n	800b9b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2b05      	cmp	r3, #5
 800b972:	dc18      	bgt.n	800b9a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b974:	f7ff fdb4 	bl	800b4e0 <xTaskGetSchedulerState>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d109      	bne.n	800b992 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b97e:	4b11      	ldr	r3, [pc, #68]	; (800b9c4 <xTimerGenericCommand+0x98>)
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	f107 0110 	add.w	r1, r7, #16
 800b986:	2300      	movs	r3, #0
 800b988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b98a:	f7fe f9cb 	bl	8009d24 <xQueueGenericSend>
 800b98e:	6278      	str	r0, [r7, #36]	; 0x24
 800b990:	e012      	b.n	800b9b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b992:	4b0c      	ldr	r3, [pc, #48]	; (800b9c4 <xTimerGenericCommand+0x98>)
 800b994:	6818      	ldr	r0, [r3, #0]
 800b996:	f107 0110 	add.w	r1, r7, #16
 800b99a:	2300      	movs	r3, #0
 800b99c:	2200      	movs	r2, #0
 800b99e:	f7fe f9c1 	bl	8009d24 <xQueueGenericSend>
 800b9a2:	6278      	str	r0, [r7, #36]	; 0x24
 800b9a4:	e008      	b.n	800b9b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b9a6:	4b07      	ldr	r3, [pc, #28]	; (800b9c4 <xTimerGenericCommand+0x98>)
 800b9a8:	6818      	ldr	r0, [r3, #0]
 800b9aa:	f107 0110 	add.w	r1, r7, #16
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	f7fe fab5 	bl	8009f20 <xQueueGenericSendFromISR>
 800b9b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3728      	adds	r7, #40	; 0x28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20000e4c 	.word	0x20000e4c

0800b9c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b088      	sub	sp, #32
 800b9cc:	af02      	add	r7, sp, #8
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9d2:	4b22      	ldr	r3, [pc, #136]	; (800ba5c <prvProcessExpiredTimer+0x94>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	3304      	adds	r3, #4
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7fd ff81 	bl	80098e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9ec:	f003 0304 	and.w	r3, r3, #4
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d022      	beq.n	800ba3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	699a      	ldr	r2, [r3, #24]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	18d1      	adds	r1, r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	6978      	ldr	r0, [r7, #20]
 800ba02:	f000 f8d1 	bl	800bba8 <prvInsertTimerInActiveList>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d01f      	beq.n	800ba4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	2300      	movs	r3, #0
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	2100      	movs	r1, #0
 800ba16:	6978      	ldr	r0, [r7, #20]
 800ba18:	f7ff ff88 	bl	800b92c <xTimerGenericCommand>
 800ba1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d113      	bne.n	800ba4c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ba24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	60fb      	str	r3, [r7, #12]
}
 800ba36:	bf00      	nop
 800ba38:	e7fe      	b.n	800ba38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba40:	f023 0301 	bic.w	r3, r3, #1
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	6a1b      	ldr	r3, [r3, #32]
 800ba50:	6978      	ldr	r0, [r7, #20]
 800ba52:	4798      	blx	r3
}
 800ba54:	bf00      	nop
 800ba56:	3718      	adds	r7, #24
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	20000e44 	.word	0x20000e44

0800ba60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba68:	f107 0308 	add.w	r3, r7, #8
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f000 f857 	bl	800bb20 <prvGetNextExpireTime>
 800ba72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	4619      	mov	r1, r3
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 f803 	bl	800ba84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba7e:	f000 f8d5 	bl	800bc2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba82:	e7f1      	b.n	800ba68 <prvTimerTask+0x8>

0800ba84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba8e:	f7ff f911 	bl	800acb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba92:	f107 0308 	add.w	r3, r7, #8
 800ba96:	4618      	mov	r0, r3
 800ba98:	f000 f866 	bl	800bb68 <prvSampleTimeNow>
 800ba9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d130      	bne.n	800bb06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10a      	bne.n	800bac0 <prvProcessTimerOrBlockTask+0x3c>
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d806      	bhi.n	800bac0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bab2:	f7ff f90d 	bl	800acd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bab6:	68f9      	ldr	r1, [r7, #12]
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7ff ff85 	bl	800b9c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800babe:	e024      	b.n	800bb0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d008      	beq.n	800bad8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bac6:	4b13      	ldr	r3, [pc, #76]	; (800bb14 <prvProcessTimerOrBlockTask+0x90>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <prvProcessTimerOrBlockTask+0x50>
 800bad0:	2301      	movs	r3, #1
 800bad2:	e000      	b.n	800bad6 <prvProcessTimerOrBlockTask+0x52>
 800bad4:	2300      	movs	r3, #0
 800bad6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bad8:	4b0f      	ldr	r3, [pc, #60]	; (800bb18 <prvProcessTimerOrBlockTask+0x94>)
 800bada:	6818      	ldr	r0, [r3, #0]
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	4619      	mov	r1, r3
 800bae6:	f7fe fe75 	bl	800a7d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800baea:	f7ff f8f1 	bl	800acd0 <xTaskResumeAll>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10a      	bne.n	800bb0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800baf4:	4b09      	ldr	r3, [pc, #36]	; (800bb1c <prvProcessTimerOrBlockTask+0x98>)
 800baf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	f3bf 8f6f 	isb	sy
}
 800bb04:	e001      	b.n	800bb0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb06:	f7ff f8e3 	bl	800acd0 <xTaskResumeAll>
}
 800bb0a:	bf00      	nop
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20000e48 	.word	0x20000e48
 800bb18:	20000e4c 	.word	0x20000e4c
 800bb1c:	e000ed04 	.word	0xe000ed04

0800bb20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb28:	4b0e      	ldr	r3, [pc, #56]	; (800bb64 <prvGetNextExpireTime+0x44>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <prvGetNextExpireTime+0x16>
 800bb32:	2201      	movs	r2, #1
 800bb34:	e000      	b.n	800bb38 <prvGetNextExpireTime+0x18>
 800bb36:	2200      	movs	r2, #0
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d105      	bne.n	800bb50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb44:	4b07      	ldr	r3, [pc, #28]	; (800bb64 <prvGetNextExpireTime+0x44>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	60fb      	str	r3, [r7, #12]
 800bb4e:	e001      	b.n	800bb54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb50:	2300      	movs	r3, #0
 800bb52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb54:	68fb      	ldr	r3, [r7, #12]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	20000e44 	.word	0x20000e44

0800bb68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb70:	f7ff f94c 	bl	800ae0c <xTaskGetTickCount>
 800bb74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb76:	4b0b      	ldr	r3, [pc, #44]	; (800bba4 <prvSampleTimeNow+0x3c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d205      	bcs.n	800bb8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb80:	f000 f936 	bl	800bdf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	e002      	b.n	800bb92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb92:	4a04      	ldr	r2, [pc, #16]	; (800bba4 <prvSampleTimeNow+0x3c>)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb98:	68fb      	ldr	r3, [r7, #12]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	20000e54 	.word	0x20000e54

0800bba8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b086      	sub	sp, #24
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
 800bbb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d812      	bhi.n	800bbf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	1ad2      	subs	r2, r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d302      	bcc.n	800bbe2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	617b      	str	r3, [r7, #20]
 800bbe0:	e01b      	b.n	800bc1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bbe2:	4b10      	ldr	r3, [pc, #64]	; (800bc24 <prvInsertTimerInActiveList+0x7c>)
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4619      	mov	r1, r3
 800bbec:	4610      	mov	r0, r2
 800bbee:	f7fd fe42 	bl	8009876 <vListInsert>
 800bbf2:	e012      	b.n	800bc1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d206      	bcs.n	800bc0a <prvInsertTimerInActiveList+0x62>
 800bbfc:	68ba      	ldr	r2, [r7, #8]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d302      	bcc.n	800bc0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc04:	2301      	movs	r3, #1
 800bc06:	617b      	str	r3, [r7, #20]
 800bc08:	e007      	b.n	800bc1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc0a:	4b07      	ldr	r3, [pc, #28]	; (800bc28 <prvInsertTimerInActiveList+0x80>)
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	3304      	adds	r3, #4
 800bc12:	4619      	mov	r1, r3
 800bc14:	4610      	mov	r0, r2
 800bc16:	f7fd fe2e 	bl	8009876 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc1a:	697b      	ldr	r3, [r7, #20]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3718      	adds	r7, #24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	20000e48 	.word	0x20000e48
 800bc28:	20000e44 	.word	0x20000e44

0800bc2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b08e      	sub	sp, #56	; 0x38
 800bc30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc32:	e0ca      	b.n	800bdca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	da18      	bge.n	800bc6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc3a:	1d3b      	adds	r3, r7, #4
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10a      	bne.n	800bc5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	61fb      	str	r3, [r7, #28]
}
 800bc58:	bf00      	nop
 800bc5a:	e7fe      	b.n	800bc5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc62:	6850      	ldr	r0, [r2, #4]
 800bc64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc66:	6892      	ldr	r2, [r2, #8]
 800bc68:	4611      	mov	r1, r2
 800bc6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f2c0 80aa 	blt.w	800bdc8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7a:	695b      	ldr	r3, [r3, #20]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d004      	beq.n	800bc8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc82:	3304      	adds	r3, #4
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7fd fe2f 	bl	80098e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc8a:	463b      	mov	r3, r7
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7ff ff6b 	bl	800bb68 <prvSampleTimeNow>
 800bc92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b09      	cmp	r3, #9
 800bc98:	f200 8097 	bhi.w	800bdca <prvProcessReceivedCommands+0x19e>
 800bc9c:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <prvProcessReceivedCommands+0x78>)
 800bc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca2:	bf00      	nop
 800bca4:	0800bccd 	.word	0x0800bccd
 800bca8:	0800bccd 	.word	0x0800bccd
 800bcac:	0800bccd 	.word	0x0800bccd
 800bcb0:	0800bd41 	.word	0x0800bd41
 800bcb4:	0800bd55 	.word	0x0800bd55
 800bcb8:	0800bd9f 	.word	0x0800bd9f
 800bcbc:	0800bccd 	.word	0x0800bccd
 800bcc0:	0800bccd 	.word	0x0800bccd
 800bcc4:	0800bd41 	.word	0x0800bd41
 800bcc8:	0800bd55 	.word	0x0800bd55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcd2:	f043 0301 	orr.w	r3, r3, #1
 800bcd6:	b2da      	uxtb	r2, r3
 800bcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	18d1      	adds	r1, r2, r3
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcec:	f7ff ff5c 	bl	800bba8 <prvInsertTimerInActiveList>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d069      	beq.n	800bdca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf8:	6a1b      	ldr	r3, [r3, #32]
 800bcfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd04:	f003 0304 	and.w	r3, r3, #4
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d05e      	beq.n	800bdca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	441a      	add	r2, r3
 800bd14:	2300      	movs	r3, #0
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	2300      	movs	r3, #0
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd1e:	f7ff fe05 	bl	800b92c <xTimerGenericCommand>
 800bd22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d14f      	bne.n	800bdca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	61bb      	str	r3, [r7, #24]
}
 800bd3c:	bf00      	nop
 800bd3e:	e7fe      	b.n	800bd3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd46:	f023 0301 	bic.w	r3, r3, #1
 800bd4a:	b2da      	uxtb	r2, r3
 800bd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd52:	e03a      	b.n	800bdca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd5a:	f043 0301 	orr.w	r3, r3, #1
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10a      	bne.n	800bd8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	617b      	str	r3, [r7, #20]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8c:	699a      	ldr	r2, [r3, #24]
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd90:	18d1      	adds	r1, r2, r3
 800bd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd98:	f7ff ff06 	bl	800bba8 <prvInsertTimerInActiveList>
					break;
 800bd9c:	e015      	b.n	800bdca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bda4:	f003 0302 	and.w	r3, r3, #2
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d103      	bne.n	800bdb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bdac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdae:	f000 fbe3 	bl	800c578 <vPortFree>
 800bdb2:	e00a      	b.n	800bdca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdba:	f023 0301 	bic.w	r3, r3, #1
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bdc6:	e000      	b.n	800bdca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bdc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdca:	4b08      	ldr	r3, [pc, #32]	; (800bdec <prvProcessReceivedCommands+0x1c0>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	1d39      	adds	r1, r7, #4
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7fe f940 	bl	800a058 <xQueueReceive>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f47f af2a 	bne.w	800bc34 <prvProcessReceivedCommands+0x8>
	}
}
 800bde0:	bf00      	nop
 800bde2:	bf00      	nop
 800bde4:	3730      	adds	r7, #48	; 0x30
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	20000e4c 	.word	0x20000e4c

0800bdf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b088      	sub	sp, #32
 800bdf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdf6:	e048      	b.n	800be8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdf8:	4b2d      	ldr	r3, [pc, #180]	; (800beb0 <prvSwitchTimerLists+0xc0>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be02:	4b2b      	ldr	r3, [pc, #172]	; (800beb0 <prvSwitchTimerLists+0xc0>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	3304      	adds	r3, #4
 800be10:	4618      	mov	r0, r3
 800be12:	f7fd fd69 	bl	80098e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6a1b      	ldr	r3, [r3, #32]
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be24:	f003 0304 	and.w	r3, r3, #4
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d02e      	beq.n	800be8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	4413      	add	r3, r2
 800be34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d90e      	bls.n	800be5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be4a:	4b19      	ldr	r3, [pc, #100]	; (800beb0 <prvSwitchTimerLists+0xc0>)
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	3304      	adds	r3, #4
 800be52:	4619      	mov	r1, r3
 800be54:	4610      	mov	r0, r2
 800be56:	f7fd fd0e 	bl	8009876 <vListInsert>
 800be5a:	e016      	b.n	800be8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be5c:	2300      	movs	r3, #0
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	2300      	movs	r3, #0
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	2100      	movs	r1, #0
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f7ff fd60 	bl	800b92c <xTimerGenericCommand>
 800be6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10a      	bne.n	800be8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	603b      	str	r3, [r7, #0]
}
 800be86:	bf00      	nop
 800be88:	e7fe      	b.n	800be88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be8a:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <prvSwitchTimerLists+0xc0>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1b1      	bne.n	800bdf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be94:	4b06      	ldr	r3, [pc, #24]	; (800beb0 <prvSwitchTimerLists+0xc0>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be9a:	4b06      	ldr	r3, [pc, #24]	; (800beb4 <prvSwitchTimerLists+0xc4>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a04      	ldr	r2, [pc, #16]	; (800beb0 <prvSwitchTimerLists+0xc0>)
 800bea0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bea2:	4a04      	ldr	r2, [pc, #16]	; (800beb4 <prvSwitchTimerLists+0xc4>)
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	6013      	str	r3, [r2, #0]
}
 800bea8:	bf00      	nop
 800beaa:	3718      	adds	r7, #24
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20000e44 	.word	0x20000e44
 800beb4:	20000e48 	.word	0x20000e48

0800beb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bebe:	f000 f969 	bl	800c194 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bec2:	4b15      	ldr	r3, [pc, #84]	; (800bf18 <prvCheckForValidListAndQueue+0x60>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d120      	bne.n	800bf0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800beca:	4814      	ldr	r0, [pc, #80]	; (800bf1c <prvCheckForValidListAndQueue+0x64>)
 800becc:	f7fd fc82 	bl	80097d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bed0:	4813      	ldr	r0, [pc, #76]	; (800bf20 <prvCheckForValidListAndQueue+0x68>)
 800bed2:	f7fd fc7f 	bl	80097d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bed6:	4b13      	ldr	r3, [pc, #76]	; (800bf24 <prvCheckForValidListAndQueue+0x6c>)
 800bed8:	4a10      	ldr	r2, [pc, #64]	; (800bf1c <prvCheckForValidListAndQueue+0x64>)
 800beda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bedc:	4b12      	ldr	r3, [pc, #72]	; (800bf28 <prvCheckForValidListAndQueue+0x70>)
 800bede:	4a10      	ldr	r2, [pc, #64]	; (800bf20 <prvCheckForValidListAndQueue+0x68>)
 800bee0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bee2:	2300      	movs	r3, #0
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	4b11      	ldr	r3, [pc, #68]	; (800bf2c <prvCheckForValidListAndQueue+0x74>)
 800bee8:	4a11      	ldr	r2, [pc, #68]	; (800bf30 <prvCheckForValidListAndQueue+0x78>)
 800beea:	2110      	movs	r1, #16
 800beec:	200a      	movs	r0, #10
 800beee:	f7fd fd8d 	bl	8009a0c <xQueueGenericCreateStatic>
 800bef2:	4603      	mov	r3, r0
 800bef4:	4a08      	ldr	r2, [pc, #32]	; (800bf18 <prvCheckForValidListAndQueue+0x60>)
 800bef6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bef8:	4b07      	ldr	r3, [pc, #28]	; (800bf18 <prvCheckForValidListAndQueue+0x60>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d005      	beq.n	800bf0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf00:	4b05      	ldr	r3, [pc, #20]	; (800bf18 <prvCheckForValidListAndQueue+0x60>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	490b      	ldr	r1, [pc, #44]	; (800bf34 <prvCheckForValidListAndQueue+0x7c>)
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fe fc3a 	bl	800a780 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf0c:	f000 f972 	bl	800c1f4 <vPortExitCritical>
}
 800bf10:	bf00      	nop
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	20000e4c 	.word	0x20000e4c
 800bf1c:	20000e1c 	.word	0x20000e1c
 800bf20:	20000e30 	.word	0x20000e30
 800bf24:	20000e44 	.word	0x20000e44
 800bf28:	20000e48 	.word	0x20000e48
 800bf2c:	20000ef8 	.word	0x20000ef8
 800bf30:	20000e58 	.word	0x20000e58
 800bf34:	0800ca14 	.word	0x0800ca14

0800bf38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	3b04      	subs	r3, #4
 800bf48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	3b04      	subs	r3, #4
 800bf56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	f023 0201 	bic.w	r2, r3, #1
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	3b04      	subs	r3, #4
 800bf66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf68:	4a0c      	ldr	r2, [pc, #48]	; (800bf9c <pxPortInitialiseStack+0x64>)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	3b14      	subs	r3, #20
 800bf72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	3b04      	subs	r3, #4
 800bf7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f06f 0202 	mvn.w	r2, #2
 800bf86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	3b20      	subs	r3, #32
 800bf8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr
 800bf9c:	0800bfa1 	.word	0x0800bfa1

0800bfa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bfaa:	4b12      	ldr	r3, [pc, #72]	; (800bff4 <prvTaskExitError+0x54>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb2:	d00a      	beq.n	800bfca <prvTaskExitError+0x2a>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	60fb      	str	r3, [r7, #12]
}
 800bfc6:	bf00      	nop
 800bfc8:	e7fe      	b.n	800bfc8 <prvTaskExitError+0x28>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	60bb      	str	r3, [r7, #8]
}
 800bfdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bfde:	bf00      	nop
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d0fc      	beq.n	800bfe0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bfe6:	bf00      	nop
 800bfe8:	bf00      	nop
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr
 800bff4:	2000000c 	.word	0x2000000c
	...

0800c000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c000:	4b07      	ldr	r3, [pc, #28]	; (800c020 <pxCurrentTCBConst2>)
 800c002:	6819      	ldr	r1, [r3, #0]
 800c004:	6808      	ldr	r0, [r1, #0]
 800c006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00a:	f380 8809 	msr	PSP, r0
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f04f 0000 	mov.w	r0, #0
 800c016:	f380 8811 	msr	BASEPRI, r0
 800c01a:	4770      	bx	lr
 800c01c:	f3af 8000 	nop.w

0800c020 <pxCurrentTCBConst2>:
 800c020:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop

0800c028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c028:	4808      	ldr	r0, [pc, #32]	; (800c04c <prvPortStartFirstTask+0x24>)
 800c02a:	6800      	ldr	r0, [r0, #0]
 800c02c:	6800      	ldr	r0, [r0, #0]
 800c02e:	f380 8808 	msr	MSP, r0
 800c032:	f04f 0000 	mov.w	r0, #0
 800c036:	f380 8814 	msr	CONTROL, r0
 800c03a:	b662      	cpsie	i
 800c03c:	b661      	cpsie	f
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	df00      	svc	0
 800c048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c04a:	bf00      	nop
 800c04c:	e000ed08 	.word	0xe000ed08

0800c050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c056:	4b46      	ldr	r3, [pc, #280]	; (800c170 <xPortStartScheduler+0x120>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a46      	ldr	r2, [pc, #280]	; (800c174 <xPortStartScheduler+0x124>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d10a      	bne.n	800c076 <xPortStartScheduler+0x26>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	613b      	str	r3, [r7, #16]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c076:	4b3e      	ldr	r3, [pc, #248]	; (800c170 <xPortStartScheduler+0x120>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a3f      	ldr	r2, [pc, #252]	; (800c178 <xPortStartScheduler+0x128>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d10a      	bne.n	800c096 <xPortStartScheduler+0x46>
	__asm volatile
 800c080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	60fb      	str	r3, [r7, #12]
}
 800c092:	bf00      	nop
 800c094:	e7fe      	b.n	800c094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c096:	4b39      	ldr	r3, [pc, #228]	; (800c17c <xPortStartScheduler+0x12c>)
 800c098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	22ff      	movs	r2, #255	; 0xff
 800c0a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0b0:	78fb      	ldrb	r3, [r7, #3]
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	4b31      	ldr	r3, [pc, #196]	; (800c180 <xPortStartScheduler+0x130>)
 800c0bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0be:	4b31      	ldr	r3, [pc, #196]	; (800c184 <xPortStartScheduler+0x134>)
 800c0c0:	2207      	movs	r2, #7
 800c0c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0c4:	e009      	b.n	800c0da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c0c6:	4b2f      	ldr	r3, [pc, #188]	; (800c184 <xPortStartScheduler+0x134>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	4a2d      	ldr	r2, [pc, #180]	; (800c184 <xPortStartScheduler+0x134>)
 800c0ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0d0:	78fb      	ldrb	r3, [r7, #3]
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	005b      	lsls	r3, r3, #1
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0da:	78fb      	ldrb	r3, [r7, #3]
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0e2:	2b80      	cmp	r3, #128	; 0x80
 800c0e4:	d0ef      	beq.n	800c0c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0e6:	4b27      	ldr	r3, [pc, #156]	; (800c184 <xPortStartScheduler+0x134>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f1c3 0307 	rsb	r3, r3, #7
 800c0ee:	2b04      	cmp	r3, #4
 800c0f0:	d00a      	beq.n	800c108 <xPortStartScheduler+0xb8>
	__asm volatile
 800c0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	60bb      	str	r3, [r7, #8]
}
 800c104:	bf00      	nop
 800c106:	e7fe      	b.n	800c106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c108:	4b1e      	ldr	r3, [pc, #120]	; (800c184 <xPortStartScheduler+0x134>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	021b      	lsls	r3, r3, #8
 800c10e:	4a1d      	ldr	r2, [pc, #116]	; (800c184 <xPortStartScheduler+0x134>)
 800c110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c112:	4b1c      	ldr	r3, [pc, #112]	; (800c184 <xPortStartScheduler+0x134>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c11a:	4a1a      	ldr	r2, [pc, #104]	; (800c184 <xPortStartScheduler+0x134>)
 800c11c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	b2da      	uxtb	r2, r3
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c126:	4b18      	ldr	r3, [pc, #96]	; (800c188 <xPortStartScheduler+0x138>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a17      	ldr	r2, [pc, #92]	; (800c188 <xPortStartScheduler+0x138>)
 800c12c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c132:	4b15      	ldr	r3, [pc, #84]	; (800c188 <xPortStartScheduler+0x138>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a14      	ldr	r2, [pc, #80]	; (800c188 <xPortStartScheduler+0x138>)
 800c138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c13c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c13e:	f000 f8dd 	bl	800c2fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c142:	4b12      	ldr	r3, [pc, #72]	; (800c18c <xPortStartScheduler+0x13c>)
 800c144:	2200      	movs	r2, #0
 800c146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c148:	f000 f8fc 	bl	800c344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c14c:	4b10      	ldr	r3, [pc, #64]	; (800c190 <xPortStartScheduler+0x140>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a0f      	ldr	r2, [pc, #60]	; (800c190 <xPortStartScheduler+0x140>)
 800c152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c158:	f7ff ff66 	bl	800c028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c15c:	f7fe ff20 	bl	800afa0 <vTaskSwitchContext>
	prvTaskExitError();
 800c160:	f7ff ff1e 	bl	800bfa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c164:	2300      	movs	r3, #0
}
 800c166:	4618      	mov	r0, r3
 800c168:	3718      	adds	r7, #24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	e000ed00 	.word	0xe000ed00
 800c174:	410fc271 	.word	0x410fc271
 800c178:	410fc270 	.word	0x410fc270
 800c17c:	e000e400 	.word	0xe000e400
 800c180:	20000f48 	.word	0x20000f48
 800c184:	20000f4c 	.word	0x20000f4c
 800c188:	e000ed20 	.word	0xe000ed20
 800c18c:	2000000c 	.word	0x2000000c
 800c190:	e000ef34 	.word	0xe000ef34

0800c194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	607b      	str	r3, [r7, #4]
}
 800c1ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c1ae:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <vPortEnterCritical+0x58>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	4a0d      	ldr	r2, [pc, #52]	; (800c1ec <vPortEnterCritical+0x58>)
 800c1b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c1b8:	4b0c      	ldr	r3, [pc, #48]	; (800c1ec <vPortEnterCritical+0x58>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d10f      	bne.n	800c1e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c1c0:	4b0b      	ldr	r3, [pc, #44]	; (800c1f0 <vPortEnterCritical+0x5c>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00a      	beq.n	800c1e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	603b      	str	r3, [r7, #0]
}
 800c1dc:	bf00      	nop
 800c1de:	e7fe      	b.n	800c1de <vPortEnterCritical+0x4a>
	}
}
 800c1e0:	bf00      	nop
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr
 800c1ec:	2000000c 	.word	0x2000000c
 800c1f0:	e000ed04 	.word	0xe000ed04

0800c1f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1fa:	4b12      	ldr	r3, [pc, #72]	; (800c244 <vPortExitCritical+0x50>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d10a      	bne.n	800c218 <vPortExitCritical+0x24>
	__asm volatile
 800c202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	607b      	str	r3, [r7, #4]
}
 800c214:	bf00      	nop
 800c216:	e7fe      	b.n	800c216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c218:	4b0a      	ldr	r3, [pc, #40]	; (800c244 <vPortExitCritical+0x50>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	4a09      	ldr	r2, [pc, #36]	; (800c244 <vPortExitCritical+0x50>)
 800c220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c222:	4b08      	ldr	r3, [pc, #32]	; (800c244 <vPortExitCritical+0x50>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d105      	bne.n	800c236 <vPortExitCritical+0x42>
 800c22a:	2300      	movs	r3, #0
 800c22c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	f383 8811 	msr	BASEPRI, r3
}
 800c234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c236:	bf00      	nop
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	2000000c 	.word	0x2000000c
	...

0800c250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c250:	f3ef 8009 	mrs	r0, PSP
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	4b15      	ldr	r3, [pc, #84]	; (800c2b0 <pxCurrentTCBConst>)
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	f01e 0f10 	tst.w	lr, #16
 800c260:	bf08      	it	eq
 800c262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26a:	6010      	str	r0, [r2, #0]
 800c26c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c270:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c274:	f380 8811 	msr	BASEPRI, r0
 800c278:	f3bf 8f4f 	dsb	sy
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f7fe fe8e 	bl	800afa0 <vTaskSwitchContext>
 800c284:	f04f 0000 	mov.w	r0, #0
 800c288:	f380 8811 	msr	BASEPRI, r0
 800c28c:	bc09      	pop	{r0, r3}
 800c28e:	6819      	ldr	r1, [r3, #0]
 800c290:	6808      	ldr	r0, [r1, #0]
 800c292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c296:	f01e 0f10 	tst.w	lr, #16
 800c29a:	bf08      	it	eq
 800c29c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c2a0:	f380 8809 	msr	PSP, r0
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	f3af 8000 	nop.w

0800c2b0 <pxCurrentTCBConst>:
 800c2b0:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop

0800c2b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	607b      	str	r3, [r7, #4]
}
 800c2d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c2d2:	f7fe fdab 	bl	800ae2c <xTaskIncrementTick>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d003      	beq.n	800c2e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c2dc:	4b06      	ldr	r3, [pc, #24]	; (800c2f8 <xPortSysTickHandler+0x40>)
 800c2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2e2:	601a      	str	r2, [r3, #0]
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	f383 8811 	msr	BASEPRI, r3
}
 800c2ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	e000ed04 	.word	0xe000ed04

0800c2fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c300:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <vPortSetupTimerInterrupt+0x34>)
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c306:	4b0b      	ldr	r3, [pc, #44]	; (800c334 <vPortSetupTimerInterrupt+0x38>)
 800c308:	2200      	movs	r2, #0
 800c30a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c30c:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <vPortSetupTimerInterrupt+0x3c>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a0a      	ldr	r2, [pc, #40]	; (800c33c <vPortSetupTimerInterrupt+0x40>)
 800c312:	fba2 2303 	umull	r2, r3, r2, r3
 800c316:	099b      	lsrs	r3, r3, #6
 800c318:	4a09      	ldr	r2, [pc, #36]	; (800c340 <vPortSetupTimerInterrupt+0x44>)
 800c31a:	3b01      	subs	r3, #1
 800c31c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c31e:	4b04      	ldr	r3, [pc, #16]	; (800c330 <vPortSetupTimerInterrupt+0x34>)
 800c320:	2207      	movs	r2, #7
 800c322:	601a      	str	r2, [r3, #0]
}
 800c324:	bf00      	nop
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	e000e010 	.word	0xe000e010
 800c334:	e000e018 	.word	0xe000e018
 800c338:	20000000 	.word	0x20000000
 800c33c:	10624dd3 	.word	0x10624dd3
 800c340:	e000e014 	.word	0xe000e014

0800c344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c354 <vPortEnableVFP+0x10>
 800c348:	6801      	ldr	r1, [r0, #0]
 800c34a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c34e:	6001      	str	r1, [r0, #0]
 800c350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c352:	bf00      	nop
 800c354:	e000ed88 	.word	0xe000ed88

0800c358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c35e:	f3ef 8305 	mrs	r3, IPSR
 800c362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2b0f      	cmp	r3, #15
 800c368:	d914      	bls.n	800c394 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c36a:	4a17      	ldr	r2, [pc, #92]	; (800c3c8 <vPortValidateInterruptPriority+0x70>)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	4413      	add	r3, r2
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c374:	4b15      	ldr	r3, [pc, #84]	; (800c3cc <vPortValidateInterruptPriority+0x74>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	7afa      	ldrb	r2, [r7, #11]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d20a      	bcs.n	800c394 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	607b      	str	r3, [r7, #4]
}
 800c390:	bf00      	nop
 800c392:	e7fe      	b.n	800c392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c394:	4b0e      	ldr	r3, [pc, #56]	; (800c3d0 <vPortValidateInterruptPriority+0x78>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c39c:	4b0d      	ldr	r3, [pc, #52]	; (800c3d4 <vPortValidateInterruptPriority+0x7c>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d90a      	bls.n	800c3ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	603b      	str	r3, [r7, #0]
}
 800c3b6:	bf00      	nop
 800c3b8:	e7fe      	b.n	800c3b8 <vPortValidateInterruptPriority+0x60>
	}
 800c3ba:	bf00      	nop
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	e000e3f0 	.word	0xe000e3f0
 800c3cc:	20000f48 	.word	0x20000f48
 800c3d0:	e000ed0c 	.word	0xe000ed0c
 800c3d4:	20000f4c 	.word	0x20000f4c

0800c3d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08a      	sub	sp, #40	; 0x28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c3e4:	f7fe fc66 	bl	800acb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c3e8:	4b5d      	ldr	r3, [pc, #372]	; (800c560 <pvPortMalloc+0x188>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d101      	bne.n	800c3f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c3f0:	f000 f924 	bl	800c63c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c3f4:	4b5b      	ldr	r3, [pc, #364]	; (800c564 <pvPortMalloc+0x18c>)
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4013      	ands	r3, r2
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	f040 8093 	bne.w	800c528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d01d      	beq.n	800c444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c408:	2208      	movs	r2, #8
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4413      	add	r3, r2
 800c40e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f003 0307 	and.w	r3, r3, #7
 800c416:	2b00      	cmp	r3, #0
 800c418:	d014      	beq.n	800c444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f023 0307 	bic.w	r3, r3, #7
 800c420:	3308      	adds	r3, #8
 800c422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00a      	beq.n	800c444 <pvPortMalloc+0x6c>
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	617b      	str	r3, [r7, #20]
}
 800c440:	bf00      	nop
 800c442:	e7fe      	b.n	800c442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d06e      	beq.n	800c528 <pvPortMalloc+0x150>
 800c44a:	4b47      	ldr	r3, [pc, #284]	; (800c568 <pvPortMalloc+0x190>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	429a      	cmp	r2, r3
 800c452:	d869      	bhi.n	800c528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c454:	4b45      	ldr	r3, [pc, #276]	; (800c56c <pvPortMalloc+0x194>)
 800c456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c458:	4b44      	ldr	r3, [pc, #272]	; (800c56c <pvPortMalloc+0x194>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c45e:	e004      	b.n	800c46a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	429a      	cmp	r2, r3
 800c472:	d903      	bls.n	800c47c <pvPortMalloc+0xa4>
 800c474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1f1      	bne.n	800c460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c47c:	4b38      	ldr	r3, [pc, #224]	; (800c560 <pvPortMalloc+0x188>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c482:	429a      	cmp	r2, r3
 800c484:	d050      	beq.n	800c528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c486:	6a3b      	ldr	r3, [r7, #32]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2208      	movs	r2, #8
 800c48c:	4413      	add	r3, r2
 800c48e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	1ad2      	subs	r2, r2, r3
 800c4a0:	2308      	movs	r3, #8
 800c4a2:	005b      	lsls	r3, r3, #1
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d91f      	bls.n	800c4e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	f003 0307 	and.w	r3, r3, #7
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00a      	beq.n	800c4d0 <pvPortMalloc+0xf8>
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	613b      	str	r3, [r7, #16]
}
 800c4cc:	bf00      	nop
 800c4ce:	e7fe      	b.n	800c4ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	1ad2      	subs	r2, r2, r3
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c4e2:	69b8      	ldr	r0, [r7, #24]
 800c4e4:	f000 f90c 	bl	800c700 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4e8:	4b1f      	ldr	r3, [pc, #124]	; (800c568 <pvPortMalloc+0x190>)
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	1ad3      	subs	r3, r2, r3
 800c4f2:	4a1d      	ldr	r2, [pc, #116]	; (800c568 <pvPortMalloc+0x190>)
 800c4f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4f6:	4b1c      	ldr	r3, [pc, #112]	; (800c568 <pvPortMalloc+0x190>)
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	4b1d      	ldr	r3, [pc, #116]	; (800c570 <pvPortMalloc+0x198>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d203      	bcs.n	800c50a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c502:	4b19      	ldr	r3, [pc, #100]	; (800c568 <pvPortMalloc+0x190>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a1a      	ldr	r2, [pc, #104]	; (800c570 <pvPortMalloc+0x198>)
 800c508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50c:	685a      	ldr	r2, [r3, #4]
 800c50e:	4b15      	ldr	r3, [pc, #84]	; (800c564 <pvPortMalloc+0x18c>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	431a      	orrs	r2, r3
 800c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51a:	2200      	movs	r2, #0
 800c51c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c51e:	4b15      	ldr	r3, [pc, #84]	; (800c574 <pvPortMalloc+0x19c>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	3301      	adds	r3, #1
 800c524:	4a13      	ldr	r2, [pc, #76]	; (800c574 <pvPortMalloc+0x19c>)
 800c526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c528:	f7fe fbd2 	bl	800acd0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d101      	bne.n	800c536 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c532:	f7f5 fc7f 	bl	8001e34 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	f003 0307 	and.w	r3, r3, #7
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00a      	beq.n	800c556 <pvPortMalloc+0x17e>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	60fb      	str	r3, [r7, #12]
}
 800c552:	bf00      	nop
 800c554:	e7fe      	b.n	800c554 <pvPortMalloc+0x17c>
	return pvReturn;
 800c556:	69fb      	ldr	r3, [r7, #28]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3728      	adds	r7, #40	; 0x28
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	20004dd8 	.word	0x20004dd8
 800c564:	20004dec 	.word	0x20004dec
 800c568:	20004ddc 	.word	0x20004ddc
 800c56c:	20004dd0 	.word	0x20004dd0
 800c570:	20004de0 	.word	0x20004de0
 800c574:	20004de4 	.word	0x20004de4

0800c578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d04d      	beq.n	800c626 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c58a:	2308      	movs	r3, #8
 800c58c:	425b      	negs	r3, r3
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	4413      	add	r3, r2
 800c592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	4b24      	ldr	r3, [pc, #144]	; (800c630 <vPortFree+0xb8>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d10a      	bne.n	800c5bc <vPortFree+0x44>
	__asm volatile
 800c5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5aa:	f383 8811 	msr	BASEPRI, r3
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f3bf 8f4f 	dsb	sy
 800c5b6:	60fb      	str	r3, [r7, #12]
}
 800c5b8:	bf00      	nop
 800c5ba:	e7fe      	b.n	800c5ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00a      	beq.n	800c5da <vPortFree+0x62>
	__asm volatile
 800c5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	60bb      	str	r3, [r7, #8]
}
 800c5d6:	bf00      	nop
 800c5d8:	e7fe      	b.n	800c5d8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	4b14      	ldr	r3, [pc, #80]	; (800c630 <vPortFree+0xb8>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4013      	ands	r3, r2
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d01e      	beq.n	800c626 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d11a      	bne.n	800c626 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	4b0e      	ldr	r3, [pc, #56]	; (800c630 <vPortFree+0xb8>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	43db      	mvns	r3, r3
 800c5fa:	401a      	ands	r2, r3
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c600:	f7fe fb58 	bl	800acb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	685a      	ldr	r2, [r3, #4]
 800c608:	4b0a      	ldr	r3, [pc, #40]	; (800c634 <vPortFree+0xbc>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4413      	add	r3, r2
 800c60e:	4a09      	ldr	r2, [pc, #36]	; (800c634 <vPortFree+0xbc>)
 800c610:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c612:	6938      	ldr	r0, [r7, #16]
 800c614:	f000 f874 	bl	800c700 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c618:	4b07      	ldr	r3, [pc, #28]	; (800c638 <vPortFree+0xc0>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3301      	adds	r3, #1
 800c61e:	4a06      	ldr	r2, [pc, #24]	; (800c638 <vPortFree+0xc0>)
 800c620:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c622:	f7fe fb55 	bl	800acd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c626:	bf00      	nop
 800c628:	3718      	adds	r7, #24
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	20004dec 	.word	0x20004dec
 800c634:	20004ddc 	.word	0x20004ddc
 800c638:	20004de8 	.word	0x20004de8

0800c63c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c642:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800c646:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c648:	4b27      	ldr	r3, [pc, #156]	; (800c6e8 <prvHeapInit+0xac>)
 800c64a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f003 0307 	and.w	r3, r3, #7
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00c      	beq.n	800c670 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	3307      	adds	r3, #7
 800c65a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f023 0307 	bic.w	r3, r3, #7
 800c662:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	4a1f      	ldr	r2, [pc, #124]	; (800c6e8 <prvHeapInit+0xac>)
 800c66c:	4413      	add	r3, r2
 800c66e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c674:	4a1d      	ldr	r2, [pc, #116]	; (800c6ec <prvHeapInit+0xb0>)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c67a:	4b1c      	ldr	r3, [pc, #112]	; (800c6ec <prvHeapInit+0xb0>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	68ba      	ldr	r2, [r7, #8]
 800c684:	4413      	add	r3, r2
 800c686:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c688:	2208      	movs	r2, #8
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	1a9b      	subs	r3, r3, r2
 800c68e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f023 0307 	bic.w	r3, r3, #7
 800c696:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	4a15      	ldr	r2, [pc, #84]	; (800c6f0 <prvHeapInit+0xb4>)
 800c69c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c69e:	4b14      	ldr	r3, [pc, #80]	; (800c6f0 <prvHeapInit+0xb4>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6a6:	4b12      	ldr	r3, [pc, #72]	; (800c6f0 <prvHeapInit+0xb4>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	1ad2      	subs	r2, r2, r3
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6bc:	4b0c      	ldr	r3, [pc, #48]	; (800c6f0 <prvHeapInit+0xb4>)
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	4a0a      	ldr	r2, [pc, #40]	; (800c6f4 <prvHeapInit+0xb8>)
 800c6ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	4a09      	ldr	r2, [pc, #36]	; (800c6f8 <prvHeapInit+0xbc>)
 800c6d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6d4:	4b09      	ldr	r3, [pc, #36]	; (800c6fc <prvHeapInit+0xc0>)
 800c6d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c6da:	601a      	str	r2, [r3, #0]
}
 800c6dc:	bf00      	nop
 800c6de:	3714      	adds	r7, #20
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr
 800c6e8:	20000f50 	.word	0x20000f50
 800c6ec:	20004dd0 	.word	0x20004dd0
 800c6f0:	20004dd8 	.word	0x20004dd8
 800c6f4:	20004de0 	.word	0x20004de0
 800c6f8:	20004ddc 	.word	0x20004ddc
 800c6fc:	20004dec 	.word	0x20004dec

0800c700 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c708:	4b28      	ldr	r3, [pc, #160]	; (800c7ac <prvInsertBlockIntoFreeList+0xac>)
 800c70a:	60fb      	str	r3, [r7, #12]
 800c70c:	e002      	b.n	800c714 <prvInsertBlockIntoFreeList+0x14>
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	60fb      	str	r3, [r7, #12]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d8f7      	bhi.n	800c70e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	4413      	add	r3, r2
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d108      	bne.n	800c742 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	441a      	add	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	68ba      	ldr	r2, [r7, #8]
 800c74c:	441a      	add	r2, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	429a      	cmp	r2, r3
 800c754:	d118      	bne.n	800c788 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	4b15      	ldr	r3, [pc, #84]	; (800c7b0 <prvInsertBlockIntoFreeList+0xb0>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d00d      	beq.n	800c77e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685a      	ldr	r2, [r3, #4]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	441a      	add	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	601a      	str	r2, [r3, #0]
 800c77c:	e008      	b.n	800c790 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c77e:	4b0c      	ldr	r3, [pc, #48]	; (800c7b0 <prvInsertBlockIntoFreeList+0xb0>)
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	601a      	str	r2, [r3, #0]
 800c786:	e003      	b.n	800c790 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	429a      	cmp	r2, r3
 800c796:	d002      	beq.n	800c79e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c79e:	bf00      	nop
 800c7a0:	3714      	adds	r7, #20
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	20004dd0 	.word	0x20004dd0
 800c7b0:	20004dd8 	.word	0x20004dd8

0800c7b4 <__libc_init_array>:
 800c7b4:	b570      	push	{r4, r5, r6, lr}
 800c7b6:	4d0d      	ldr	r5, [pc, #52]	; (800c7ec <__libc_init_array+0x38>)
 800c7b8:	4c0d      	ldr	r4, [pc, #52]	; (800c7f0 <__libc_init_array+0x3c>)
 800c7ba:	1b64      	subs	r4, r4, r5
 800c7bc:	10a4      	asrs	r4, r4, #2
 800c7be:	2600      	movs	r6, #0
 800c7c0:	42a6      	cmp	r6, r4
 800c7c2:	d109      	bne.n	800c7d8 <__libc_init_array+0x24>
 800c7c4:	4d0b      	ldr	r5, [pc, #44]	; (800c7f4 <__libc_init_array+0x40>)
 800c7c6:	4c0c      	ldr	r4, [pc, #48]	; (800c7f8 <__libc_init_array+0x44>)
 800c7c8:	f000 f82e 	bl	800c828 <_init>
 800c7cc:	1b64      	subs	r4, r4, r5
 800c7ce:	10a4      	asrs	r4, r4, #2
 800c7d0:	2600      	movs	r6, #0
 800c7d2:	42a6      	cmp	r6, r4
 800c7d4:	d105      	bne.n	800c7e2 <__libc_init_array+0x2e>
 800c7d6:	bd70      	pop	{r4, r5, r6, pc}
 800c7d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7dc:	4798      	blx	r3
 800c7de:	3601      	adds	r6, #1
 800c7e0:	e7ee      	b.n	800c7c0 <__libc_init_array+0xc>
 800c7e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7e6:	4798      	blx	r3
 800c7e8:	3601      	adds	r6, #1
 800c7ea:	e7f2      	b.n	800c7d2 <__libc_init_array+0x1e>
 800c7ec:	0800cc00 	.word	0x0800cc00
 800c7f0:	0800cc00 	.word	0x0800cc00
 800c7f4:	0800cc00 	.word	0x0800cc00
 800c7f8:	0800cc04 	.word	0x0800cc04

0800c7fc <memcpy>:
 800c7fc:	440a      	add	r2, r1
 800c7fe:	4291      	cmp	r1, r2
 800c800:	f100 33ff 	add.w	r3, r0, #4294967295
 800c804:	d100      	bne.n	800c808 <memcpy+0xc>
 800c806:	4770      	bx	lr
 800c808:	b510      	push	{r4, lr}
 800c80a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c80e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c812:	4291      	cmp	r1, r2
 800c814:	d1f9      	bne.n	800c80a <memcpy+0xe>
 800c816:	bd10      	pop	{r4, pc}

0800c818 <memset>:
 800c818:	4402      	add	r2, r0
 800c81a:	4603      	mov	r3, r0
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d100      	bne.n	800c822 <memset+0xa>
 800c820:	4770      	bx	lr
 800c822:	f803 1b01 	strb.w	r1, [r3], #1
 800c826:	e7f9      	b.n	800c81c <memset+0x4>

0800c828 <_init>:
 800c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82a:	bf00      	nop
 800c82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82e:	bc08      	pop	{r3}
 800c830:	469e      	mov	lr, r3
 800c832:	4770      	bx	lr

0800c834 <_fini>:
 800c834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c836:	bf00      	nop
 800c838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83a:	bc08      	pop	{r3}
 800c83c:	469e      	mov	lr, r3
 800c83e:	4770      	bx	lr
